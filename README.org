#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:nil todo:t |:t
#+TITLE: gregoryg's Emacs Initialization in Org-Mode - BACK TO BASICS 2023
#+DATE: <2023-10-03 Tue>
#+AUTHOR: Greg Grubbs
#+EMAIL: gregory.grubbs@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+setupfile: ~/projects/emacs/org-themes/src/readtheorg_inline/readtheorg_inline.theme

#+property: header-args:emacs-lisp :tangle ~/.emacs.d/emacs-init.el :results none
#+property: header-args:bash :comments both :shebang #!/usr/bin/env bash :results non
* Separation of concerns

* Literate Programming Config file
  This Org Mode file becomes "tangled" by the =org-babel-load-file= function in =init.el= to
  produce the entire config for my Emacs sessions on Windows, MacOS, Linux and ChromeOS

  Hip tip: to exclude entire code block sections from the resulting tangled config file,
  just add a =:tangle no= header to the source block - but do *not* use =:tangle yes= for
  that will lead to tears by interfering with =org-babel-load-file=

  If reading this file on GitHub, use the =raw= view to see all the code markings and
  header parameters.

* Should I use =evil-mode=?

  evil-mode gives you Vim-like keybindings in Emacs.  I would recommend starting with Emacs key
  bindings - more difficult to start with, but it will always work and you will adapt.
* Make reasonable and comfortable defaults
   So many defaults in Emacs make no sense.  If starting out with Emacs, consider these
   settings to make your first experiences nicer.

   If you have any questions about what these settings do, use Emacs to explore them:
   + If it's a variable being set (line starts with the =setq= function, set the point in
     the variable name and hit =C-h v= for help on that variable.
   + If it's a function (line starts with almost anything other than =setq=, set the point
     in the function name and hit "C-h f"
   #+begin_src emacs-lisp
        ;; When I want transient mark mode, I'll beat it out of you
        (setq transient-mark-mode nil)
        ;; (do not) display time and battery status in the mode line
        (display-time-mode 0)
        (display-battery-mode 0)
        ;; turn off that stupid toolbar
        (tool-bar-mode -1)
        ;; scroll bars?
        (scroll-bar-mode -1)
        (menu-bar-mode -1)
        ;; don't do that stoopid splash screen
        (setq inhibit-splash-screen t)

        ;; tab indents - if line is already indented, try to auto-complete
        (setq tab-always-indent 'complete)

        (setq-default indent-tabs-mode nil)
        (setq-default tab-width 4)
        ;; blink parens and similar delimiters
        ;; Global identity on all machines - Emacs does not make good guesses here
        (setq user-full-name "Gregory Grubbs"
          user-mail-address "gregory.grubbs@gmail.com")

        (setq confirm-kill-emacs 'y-or-n-p) ;; confirm to exit emacs

        ;; dippy bird FTW - single character y-n for all yes/no question dialogs
        (fset 'yes-or-no-p 'y-or-n-p)
        (setq shell-file-name "bash")
        ;; TODO: does setting shell-command-switch ever help?
        ;; (setq shell-command-switch "-ic") ; source .bashrc to get aliases etc
        (setq explicit-shell-file-name shell-file-name)
        (setq explicit-bash-args '("--noediting" "-i"))

        (global-hl-line-mode t) ;; highlight current line - turn off when figuring out faces

        (temp-buffer-resize-mode 1)  ;; crazy cool auto resizing of temp windows

        (setq-default fill-column 100); good default for wider screens

        ;; ensure that the default for searches is case-insensitive
        (setq case-fold-search t)

        ;; highlight/colorize everything that can be colorized!
        (global-font-lock-mode 1)

        ;; never split windows horizontally by default
        (setq split-width-threshold nil)
        ;; Here's a choice one: stay in the same column while scrolling!
        (setq scroll-preserve-screen-position t)
        ;; in Emacs23+, make line-move move by a line, ignoring wrapping
        (setq line-move-visual nil)
        ;; enable hugely useful things that are disabled by default
        (put 'narrow-to-region 'disabled nil)
        (put 'set-goal-column 'disabled nil)
     ;; echo quickly
     (setq echo-keystrokes 0.1)
     ;; keep the screen from jumping wildly as I cursor down/up
     (setq scroll-conservatively 5)
     ;; remember minibuffer history between sessions
     (savehist-mode t)
     ;; https://emacs.stackexchange.com/a/9952/418
     (use-package exec-path-from-shell :straight t)
     (exec-path-from-shell-initialize)
     (exec-path-from-shell-copy-env "HISTFILE")
     ;; if point is at end of line, keep it there for vertical movement
     (setq track-eol t)
     (setq align-to-tab-stop nil) ;; do not use tabs for align and align-regexp
     (setq auth-source-save-behavior nil) ; NEVER store passwords
     (setq enable-recursive-minibuffers t)
     ;; Allow Emacs to resize mini windows, otherwise this does not work:
     ;;   (setq org-use-fast-todo-selection 'expert)
     (setq resize-mini-windows t)
     ;; as of Emacs 29
     (setq pixel-scroll-precision-mode t)
   #+end_src
* Start emacs server
  #+begin_src emacs-lisp
    (require 'server)
    (unless (server-running-p)
      (server-start))
  #+end_src
* Greg's customizations

** Do async things
   #+begin_src emacs-lisp
     (use-package async :straight t)
     (use-package ob-async :straight t)
   #+end_src
** Revert buffer shortcut
  #+begin_src emacs-lisp
    (defun revert-dammit () ; revert buffer without prompting
      (interactive)
      ;; revert buffer, don't use auto-save, preserve modes
      (revert-buffer t t t))
    (defalias 'rd 'revert-dammit)
  #+end_src

** Cleanup on file save
   Tip o' the hat to [[https://github.com/mitchty][@mitchty]]
   Remove trailing whitespace when saving files
    #+begin_src emacs-lisp
      ;; from https://stackoverflow.com/a/3533933/457574
      (defun delete-trailing-whitespace-except-current-line ()
        "do delete-trailing-whitespace, except preserve whitespace of current line"
        (interactive)
        (let ((current-line (buffer-substring (line-beginning-position) (line-end-position)))
              (backward (- (line-end-position) (point))))
          (delete-trailing-whitespace)
          (when (not (string-equal (buffer-substring (line-beginning-position) (line-end-position))
                                   current-line))
            (delete-region (line-beginning-position) (line-end-position))
            (insert current-line)
            (backward-char backward))))


      (add-hook 'before-save-hook 'delete-trailing-whitespace-except-current-line)
   #+end_src

   Make it executable if it should be executable!

   #+begin_src emacs-lisp
   (add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
   #+end_src

** Linux things
   Fix to make Org export to HTML and open do the right thing: open in the preferred
   browser rather than just HTML in an Emacs buffer
   #+begin_src emacs-lisp
     (when (eq window-system 'x)
       (setq org-file-apps
             '((auto-mode . emacs)
               ("\\.mm\\'" . default)
               ("\\.x?html?\\'" . "/usr/bin/x-www-browser %s")
               ("\\.pdf\\'" . default))))
   #+end_src
** Fonts
   Forever in search of the One True Holy and Apostolic Programmer Font.

   Big fan of Inconsolata, Source Code Pro, and Hack.  Inability to decide on one is
   encoded herein.

   Make it a callable function so I can set new frames.  For now, do not tie it into a
   frame hook - not certain I would want it for every frame.  This would make use of the
   hook variable =after-make-frame-functions=

   Emacs 29 obviates my need for the inc/dec functions in =fontize.el= The key bindings
   for the new-in-Emacs-29 frame font resize functions are
   * =C-x C-M-+= -,0


   #+begin_src emacs-lisp
     (defun gjg/set-frame-font ()
       "Set frame font based on window system"
       (interactive)
       (cond ((or (eq window-system 'mac) (eq window-system 'ns))
              (set-frame-font "Source Code Pro-17"))
             ((eq window-system 'w32)
              (set-face-font 'default '"-outline-Source Code Pro-normal-normal-normal-mono-17-*-*-*-c-*-iso8859-1"))
             ((eq window-system 'x)
              (set-frame-font "Hack-16")
              ;; (set-frame-font "Inconsolata-16")
              )))
     (gjg/set-frame-font)
     ;; (add-hook 'after-make-frame-functions 'gjg/set-frame-font)
     (cond
      ((< emacs-major-version 29) ; from "fontize" package in ~/emacs/
       (autoload 'inc-font-size "fontize" "Adjust buffer relative font size" t)
       (autoload 'dec-font-size "fontize" "Adjust buffer relative font size" t))
      (t
       (defun inc-font-size ()
         (interactive)
         (global-text-scale-adjust 1))
       (defun dec-font-size ()
         (interactive)
         (global-text-scale-adjust -1))))

     (global-set-key [C-kp-subtract] 'dec-font-size)
     (global-set-key [C-kp-add] 'inc-font-size)
   #+end_src
** Custom Functions in a separate file
  TODO: pull these functions in
  #+begin_src emacs-lisp
    (add-to-list 'load-path "~/emacs")
    (load "gjg-functions")
    (require 'gjg-functions)
  #+end_src
** Key (and mouse) bindings
** Audio and media
   #+begin_src emacs-lisp
     (defun gjg/volume (volcmd)
       "Control volume with pulseaudio script."
       (let ((audioctl (expand-file-name "~/bin/pulseaudio-control-glados")))
         (call-process-shell-command (concat audioctl " " volcmd))))
     (bind-key (kbd "<XF86AudioLowerVolume>") (lambda () (interactive) (gjg/volume "down")))
     (bind-key (kbd "<XF86AudioRaiseVolume>") (lambda () (interactive) (gjg/volume "up")))
     (bind-key (kbd "<XF86AudioMute>") (lambda () (interactive) (gjg/volume "togmute")))
     (bind-key (kbd "<XF86AudioPlay>") (lambda () (interactive) (call-process-shell-command "/usr/bin/playerctl play-pause") ))
   #+end_src
** Big blob of various key bindings
  #+begin_src emacs-lisp
    (global-set-key [home] (lambda () (interactive) (goto-char (point-min))))
    (global-set-key [end] (quote end-of-buffer))
    ;; M-left and M-right on Pixelbook
    (global-unset-key (kbd "<M-left>"))
    (global-unset-key (kbd "<M-right>"))
    (global-set-key (kbd "<M-left>") (lambda () (interactive) (goto-char (point-min))))
    (global-set-key (kbd "<M-right>") 'end-of-buffer)
    (global-unset-key (kbd "C-z"))
    (global-set-key (kbd "C-z") 'undo)
    (global-unset-key (kbd "M-]")) ; unset one next-buffer binding
    (global-unset-key (kbd "M-[")) ; unset one previous-buffer binding
    (global-set-key (kbd "s-g") 'gjg/exwm-select-or-launch-logseq)
    (global-set-key (kbd "s-g") 'gjg/exwm-select-slack)
    (global-set-key (kbd "s-'") 'gjg/add-person-from-table)
    (global-set-key (kbd "s-y") 'gjg/exwm-select-or-launch-spotify)
    (global-set-key (kbd "s--")  'gjg/exwm-select-zoom-meeting)
    (global-set-key (kbd "s-=")  'gjg/exwm-select-teams-meeting)

    (global-set-key [f1] 'delete-other-windows)
    (global-set-key [f2] 'gjg/switch-to-other-buffer)
    (global-set-key [f3] 'gjg/other-window-or-split)
    (global-set-key [f4] 'narrow-to-defun)

    (global-set-key [f5] 'gjg/widen-ask-if-indirect)
    ;; (global-set-key [f6] 'read-only-mode)
    ;; (global-set-key [f6] 'gjg/open-work-agenda)
    (global-set-key [f7] 'hl-line-mode) ;; toggle hl-line-mode for this window only
    ;; (global-set-key [f8] 'bury-buffer)

    (global-set-key [f9] 'bury-buffer)
    (global-set-key [f10] 'dired-omit-mode)
    ;; (global-set-key [f11] 'mac-toggle-max-window)
    (global-set-key [f11] 'gjg/toggle-max-frame)
    (global-set-key [M-f11] 'gjg/toggle-max-frame)
    ;; (global-set-key [f11] 'toggle-fullscreen)
    ;; (global-set-key [f11] 'switch-full-screen)
    ;; (global-set-key (kbd "C-<f11>") 'gjg/emacs-max-coolness)
    (global-set-key [f12] (lambda () (interactive) (message (or (buffer-file-name) "No file associated with this buffer."))))
    (global-set-key (kbd "<C-f12>") 'yow)
    (global-set-key [C-wheel-up] 'text-scale-increase)
    (global-set-key [C-wheel-down] 'text-scale-decrease)
    (global-set-key [S-wheel-up] 'inc-font-size)
    (global-set-key [S-wheel-down] 'dec-font-size)
    (global-set-key (kbd "M-]") 'next-buffer)
    (global-set-key (kbd "M-[") 'previous-buffer)
    (global-set-key (kbd "C-c C-v") 'browse-url-at-point)
    ;; (unbind-key (kbd "C-c C-o") sh-mode-map)
    (global-set-key (kbd "C-c C-o") 'org-open-at-point)  ; open Org links in tangled files!
    (defalias 'ss 'gjg/open-remote-shell)
    (defalias 'ht 'gjg/highlight-terraform-stuff)
    (defalias 'rb 'rename-buffer)

  #+end_src
** Mouse actions
   I accidentally hit these mouse combos working on the laptop - disable 'em all!
   #+begin_src emacs-lisp
     (global-unset-key (kbd"C-<down-mouse-1>")) ;; mouse-buffer-menu
     (global-unset-key (kbd"C-<down-mouse-2>")) ;; facemenu-menu
     (global-unset-key (kbd"S-<down-mouse-1>")) ;; mouse-appearance-menu
   #+end_src
** Backup files
  #+begin_src emacs-lisp
    ;; backup files
    (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
     '(("." . "~/.emacs.d/backups"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 5
     kept-old-versions 5
     version-control nil)
  #+end_src

** Automatic typing
*** Abbreviations while typing
    Abbrevs are stored in =~/.emacs.d/abbrev_defs=
    #+begin_src emacs-lisp
     ;; Dynamic abbrevs should expand both words and symbols
     (setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
    #+end_src
*** Dynamic expansions with =M-/=
    The question to settle here is should I stick with default Dabbrev, or re-activate
    hippie-expand which I've used forever - also a built-in now?  Not sure I know the diff
    anymore
    #+begin_src emacs-lisp
      ;; and now set up hippie-expand
      (global-set-key (kbd "M-/") 'hippie-expand)
    #+end_src
** Games and silliness
   #+begin_src emacs-lisp
     ;; very important: keep a long list of yow lines
     ;;   in emacs 24.4 yow.el is obsolete; use cookie instead
     (when (featurep 'yow)
       (unload-feature 'yow))
     ;; (with-eval-after-load 'cookie
     (defun yow ()
       (interactive)
       (let ((suggest-key-bindings nil))
         (message (cookie gjg/yow-file nil nil))))
     ;; )
     ;; almost as important: keep track of those tetris scores
     (setq tetris-score-file "~/.emacs.d/tetris.score")
   #+end_src
** Multimedia
   Control whatever media is playing
   Requires =playerctl= OS package as well
   #+begin_src emacs-lisp
     (use-package playerctl :straight t)
   #+end_src
** Rainbow delimiters
   #+begin_src emacs-lisp
     (use-package rainbow-delimiters :straight t)
   #+end_src

* Encryption
  =epa-file= is a built-in

  Set value of =epg-gpg-program= to location on local system
  #+begin_src emacs-lisp
;; let's get encryption established
;; For gpg, disable external pinentry - let emacs handle pass phrase
;; (setenv "GPG_AGENT_INFO" nil)
(require 'epa-file)
;; (custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
(epa-file-enable)
(setq epg-pinentry-mode 'loopback)
(require 'org-crypt)
(org-crypt-use-before-save-magic)

  #+end_src
* Window/buffer management
** Text movement

   Built-in =forward-paragraph= annoys the living hell out of me because it does not place the cursor on the first line of the paragraph.

   Here's the fix with key rebinding

   Found on superuser.com:
   [[https://superuser.com/questions/643618/emacs-jump-paragraph-up-down-placing-cursor-on-the-first-visual-line/685604#685604][paragraph up / down placing cursor on the first line ≫ superuser.com]]

   #+begin_src emacs-lisp
     (defun lawlist-forward-paragraph ()
     (interactive "^")
       (let ((opoint (point)))
         (skip-chars-forward "\s\t\n\r")
         (re-search-forward "^\n" nil t)
         (skip-chars-forward "\s\t\n\r")
         (when (= opoint (point))
           (goto-char (point-max)))) )

     (defun lawlist-backward-paragraph ()
     (interactive "^")
       (let ((opoint (point)))
         (skip-chars-backward "\s\t\n\r")
         (re-search-backward "^\n" nil t)
         (skip-chars-forward "\s\t\n\r")
         (when (<= opoint (point))
           (goto-char (point-min)))) )

     ;; keep built-in forward/backward-paragraph key bindings
     ;; use super key with unshifted square brackets for the new functions
     (global-set-key (kbd "s-]") 'lawlist-forward-paragraph)
     (global-set-key (kbd "s-[") 'lawlist-backward-paragraph)

   #+end_src
** Switch to a buffer that uses selected minor mode
   #+begin_src emacs-lisp
     (defun active-minor-modes ()
       "List all active minor modes."
       (seq-filter #'symbol-value (seq-filter #'boundp minor-mode-list)))

     (defun buffers-with-minor-mode (minor-mode)
       "Return a list of buffers that have the specified MINOR-MODE active."
       (let ((buffers (buffer-list)))
         (seq-filter (lambda (buffer)
                       (with-current-buffer buffer
                         (and (boundp minor-mode) (symbol-value minor-mode))))
                     buffers)))

     (defun switch-to-buffer-with-minor-mode ()
       "Prompt to select a minor mode and then switch to a buffer with that minor mode enabled."
       (interactive)
       (let* ((active-modes (active-minor-modes))
              (mode (intern (completing-read "Select minor mode: " active-modes nil t)))
              (buffers (buffers-with-minor-mode mode)))
         (if buffers
             (switch-to-buffer (completing-read "Select buffer: " (mapcar 'buffer-name buffers) nil t))
           (message "No buffers found with minor mode %s" mode))))


   #+end_src
** Transparency / Opacity management
   Emacs 29 ushers in a bold new era where a frame's background can be made transparent
   without affecting the transparency of foreground text and other elements.  Who'd-a
   thunk?  Use that feature when available

   #+begin_src emacs-lisp
     ;; TODO ; fix toggle-transparency
     (defun toggle-transparency (alpha-level)
       (interactive "p")
       (message (format "%s" alpha-level))
       (when (< alpha-level 50) (setq alpha-level 90))
       (let ((myalpha (or (frame-parameter nil 'alpha) 100))
             (frame-param (if (< emacs-major-version 29) 'alpha 'alpha-background)))

         (set-frame-parameter nil frame-param myalpha)
         (message (format "Frame %s level is %d" frame-param myalpha))))

     (defun set-transparency (alpha-level)
       ;; in Emacs 29+, set background opacity
       ;; before 29, we have no choice but to set frame opacity
       (interactive "p")
       (message (format "Alpha level passed in: %s" alpha-level))
       (let ((alpha-level (if (< alpha-level 2)
                              (read-number "Opacity percentage: " 90)
                            alpha-level))
             (frame-param (if (< emacs-major-version 29) 'alpha 'alpha-background)))
         (set-frame-parameter nil frame-param alpha-level)
         (message (format "Frame %s level is %d" frame-param alpha-level))))
     (defalias 'set-opacity 'set-transparency )

   #+end_src
** Packages for window and buffer nav
   #+begin_src emacs-lisp
     (use-package ace-window :straight t
       :config
       (custom-set-faces
        '(aw-leading-char-face
          ((t (:foreground "deep sky blue" :height 5.0)))
          ))
       :bind
        (("C-x o" . ace-window)))
     (use-package winum :straight t
       :config
       (setq winum-scope                       'frame-local
             winum-auto-assign-0-to-minibuffer nil
             winum-auto-setup-mode-line        t))
     (winum-mode)
     (set-face-attribute 'winum-face nil :weight 'bold)
     (defun gjg/other-window-with-winum ()
       "if 2 windows, jump to other-window.  Elsecase use winum"
       (interactive)
       (cond ((= 1 winum--window-count)
              (gjg/switch-to-other-buffer))
             ((= 2 winum--window-count)
              (other-window 1))
             ((> 10 winum--window-count)
              ;; jump immediately to window
              ;; (let ((jwin (read-number (format "Jump to window num[1-%d]: " winum--window-count))))
              (let ((jwin (string-to-number (char-to-string (read-char (format "Jump to window num[1-%d]: " winum--window-count))))))
                (message "Jumping to %d" jwin)
                (winum-select-window-by-number jwin)))
             (t
              (let ((jwin (read-number (format "Jump to window num[1-%d]: " winum--window-count))))
                (message "Jumping to %d" jwin)
                (winum-select-window-by-number jwin)))
              ))
   #+end_src
** GJG Window splitting
   #+begin_src emacs-lisp
     ;; unbind some keys in favor of my functions bound to SUPER- combinations
     ;; the existing keys will work in Emacs buffers, but not in EXWM X buffers; the SUPER combos work everywhere
     (global-unset-key (kbd "M-]")) ; next-buffer
     (global-unset-key (kbd "M-[")) ; previous-buffer
     (defun gjg/switch-to-other-buffer ()
       (interactive)
       (switch-to-buffer (other-buffer))
       (message "Switched to other-buffer"))
     (defun gjg/split-window-below ()
       "Split window below, switch to the new window AND switch buffer in that window"
       (interactive)
       (split-window-below)
       (other-window 1)
       (switch-to-buffer (other-buffer)))
     (defun gjg/split-window-right ()
       "Split window right, switch to the new window AND switch buffer in that window"
       (interactive)
       (split-window-right)
       (other-window 1)
       (switch-to-buffer (other-buffer)))
     (defun toggle-window-split ()
       (interactive)
       (if (= (count-windows) 2)
           (let* ((this-win-buffer (window-buffer))
                  (next-win-buffer (window-buffer (next-window)))
                  (this-win-edges (window-edges (selected-window)))
                  (next-win-edges (window-edges (next-window)))
                  (this-win-2nd (not (and (<= (car this-win-edges)
                                              (car next-win-edges))
                                          (<= (cadr this-win-edges)
                                              (cadr next-win-edges)))))
                  (splitter
                   (if (= (car this-win-edges)
                          (car (window-edges (next-window))))
                       'split-window-horizontally
                     'split-window-vertically)))
             (delete-other-windows)
             (let ((first-win (selected-window)))
               (funcall splitter)
               (if this-win-2nd (other-window 1))
               (set-window-buffer (selected-window) this-win-buffer)
               (set-window-buffer (next-window) next-win-buffer)
               (select-window first-win)
               (if this-win-2nd (other-window 1))))))


   #+end_src
** Indirect buffer use
   #+begin_src emacs-lisp
     (defun gjg/widen-ask-if-indirect ()
       "If buffer is indirect, ask before widening"
       (interactive)
       (if (buffer-base-buffer)
           (when (yes-or-no-p "Buffer is indirect; really widen? ")
             (widen))
         (widen)))
   #+end_src
** Big bunch of key bindings for Window/Buffer navigation
   TODO: figure out global Super key chords in exwm map vs global key map
   #+begin_src emacs-lisp
     (bind-key "C-x 2" 'gjg/split-window-below)
     (bind-key "C-x 3" 'gjg/split-window-right)
     (bind-key "C-x o" 'gjg/other-window-with-winum)
     ;; (bind-key "s-a" 'gjg/open-work-agenda)
     (bind-key "s-o" 'gjg/other-window-with-winum)
     (bind-key "s-b" 'gjg/switch-to-other-buffer)
     (bind-key "s-<up>" 'windmove-up)
     (bind-key "s-<down>" 'windmove-down)
     (bind-key "s-<right>" 'windmove-right)
     (bind-key "s-<left>" 'windmove-left)

     (bind-key "s-0" 'delete-window)
     (bind-key "s-1" 'delete-other-windows)
     (bind-key "s-2" 'gjg/split-window-below)
     (bind-key "s-3" 'gjg/split-window-right)
     (bind-key "M-s-<up>" 'windmove-delete-up)
     (bind-key "M-s-<down>" 'windmove-delete-down)
     (bind-key "M-s-<left>" 'windmove-delete-left)
     (bind-key "M-s-<right>" 'windmove-delete-right)
     (bind-key "s-p" 'playerctl-play-pause-song)
     (bind-key "s-q" 'bury-buffer)
     (bind-key "s-t" 'toggle-truncate-lines)
     (bind-key "s-'" 'gjg/add-person-from-table)
     (bind-key "s-y" 'gjg/exwm-select-or-launch-spotify)
     (bind-key "s-c" 'gjg/exwm-select-or-launch-google-chat)
     ;; (bind-key "s-c" #'(lambda () (interactive) (call-process-shell-command "invert-color.sh")))
     (bind-key "s-." #'(lambda () (interactive) (find-file "~/emacs-gregoryg/README.org")))
     (bind-key "s-," 'gjg/polybar-start-or-toggle)
     ;; (bind-key "s-]" 'ded/org-show-next-heading-tidily)
     ;; (bind-key "s-[" 'ded/org-show-previous-heading-tidily)
     ;; (bind-key "M-SPC" #'(lambda () (interactive) (call-process-shell-command "rofi -modi drun,run -show drun")))
     (bind-key "M-SPC" 'gjg/launch-rofi)
     (bind-key "s-\\" 'switch-to-buffer)
     ;; (Set-face-attribute 'winum-face nil :foreground "deep sky blue")
     (define-key ctl-x-4-map "t" 'toggle-window-split)
   #+end_src
** Winner-mode and Windmove
  winner-mode is a built-in

  #+begin_src emacs-lisp
    ;; winner
    (require 'winner)
    (winner-mode 1)
    ;; windmove
    ;; (windmove-default-keybindings)
    ;; (with-eval-after-load 'windmove
    ;;   (windmove-default-keybindings)
    ;;   ;; Make windmove work in org-mode:
    ;;   (setq org-replace-disputed-keys t))
    ;; (add-hook 'org-shiftup-final-hook 'windmove-up)
    ;; (add-hook 'org-shiftleft-final-hook 'windmove-left)
    ;; (add-hook 'org-shiftdown-final-hook 'windmove-down)
    ;; (add-hook 'org-shiftright-final-hook 'windmove-right)))

    ;; Add advice to stop hangs on EXWM
    ;; The problem happens with floating windows that disappear - like open file dialog or a Zoom dialog when starting a meeting
    ;; The solution is to assure all frames in winner-modified-list pass the frame-live-p test
    (defun gjg/winner-clean-up-modified-list ()
      "Remove dead frames from `winner-modified-list`"
      (dolist (frame winner-modified-list)
        (unless (frame-live-p frame)
          (delete frame winner-modified-list))))
    (advice-add 'winner-save-old-configurations :before #'gjg/winner-clean-up-modified-list)
  #+end_src
** Ibuffer FTW
*** View customizations
    #+begin_src emacs-lisp
      (setq ibuffer-formats
            '((mark modified read-only locked " "
                    (name 50 50 :left :elide)  ; much wider buffer name column
                    " "
                    (size 9 -1 :right)
                    " "
                    (mode 16 16 :left :elide)
                    " " filename-and-process)
              (mark " "
                    (name 16 -1)
                    " " filename))
            )
    #+end_src
*** Filter groups
   Saved filter groups provide a nice organization.

   #+begin_src emacs-lisp
     (require 'ibuffer)
     (global-set-key (kbd "C-x C-b") (lambda () (interactive) (ibuffer)))
     (setq ibuffer-expert t)
     (setq ibuffer-default-sorting-mode 'alphabetic)
     (setq ibuffer-saved-filter-groups
           '(("home"
              ("Org and Markdown" (or (mode . org-mode)
                                      (mode . org-agenda-mode)
                                      (mode . markdown-mode)))
              ("Shells" (or (mode . shell-mode)
                            (mode . eshell-mode)))
              ("EXWM X Apps" (mode . exwm-mode))
              ("Configs" (or (derived-mode .  conf-mode)
                             (mode . yaml-mode)
                             (mode . json-mode)))
              ("Code" (derived-mode .  prog-mode))
              ("Images" (mode . image-mode))
              ("Magit" (or (mode . magit-diff-mode)
                           (mode . magit-status-mode)
                           (mode . magit-process-mode)
                           (mode . magit-revision-mode)
                           (mode . magit-refs-mode)))
              ("Dired" (mode . dired-mode))
              ("Tramp sessions" (name . "\*tramp.+"))
              ;; ("Remote" (filename . "\/.+:.+"))
              )))
     (add-hook 'ibuffer-mode-hook
               #'(lambda ()
                  (ibuffer-auto-mode 1)
                  (auto-revert-mode 1)
                  (ibuffer-switch-to-saved-filter-groups "home")))
   #+end_src
*** Preview buffer in side window
    Preview without selecting the window - stay on current line in Ibuffer

    This function should work just like =occur-mode-display-occurence= in =replace.el=
   #+begin_src emacs-lisp
     (defun gjg/ibuffer-only-exwm ()
       (interactive)
       (ibuffer nil "*EXWM Thang*" '((used-mode . exwm-mode)))
       (gjg/ibuffer-preview))
     (global-set-key (kbd "s-e") 'gjg/ibuffer-only-exwm)
     (defun gjg/ibuffer-preview ()
       "View the current file in other window but do not select"
       (interactive)
       (delete-other-windows)
       (when (not (window-parent)) ;; only one window, so split
         (split-window nil nil 'right))
       (let ((buf (ibuffer-current-buffer t)))
         (display-buffer buf '((display-buffer-use-some-window
                                display-buffer-pop-up-window)
                               (inhibit-same-window . t))))
       :refresh-p nil)

     (define-key ibuffer-mode-map (kbd "SPC") 'gjg/ibuffer-preview)
   #+end_src

** Uniquify
   #+begin_src emacs-lisp
     (autoload 'uniquify "uniquify" "unique buffer names dependent on file name")
     (with-eval-after-load 'uniquify
       (setq uniquify-buffer-name-style 'reverse)
       (setq uniquify-separator "/")
       (setq uniquify-after-kill-buffer-p t)
       (setq uniquify-ignore-buffers-re "^\\*"))
   #+end_src
** Themes
*** Modus themes
    Use the built-in - for Emacs >= 30.  Prior to that version, you have to install a package in order to get modus-themes 4.x


    I want to soften the contrasts in dark mode - default is white on black.  But
    changing the background too light throws off readability of some things - notably the
    deliimters when using =rainbow-delimiters-mode=.  So without going down the rabbit
    hole to modify all the rainbow-delimiters faces, I'm just nudging the background and
    foreground colors very slightly.
    #+begin_src emacs-lisp
      ;; make the modus themes act more like my brutalist theme in Org
      (use-package modus-themes :straight t)

      (defun gjg/my-modus-themes-custom-faces ()
        "Tweak faces"
        (message "Setting custom org-habit face for Modus themes")
        (modus-themes-with-colors
          (custom-set-faces
           `(org-habit-clear-face ((,c :background ,bg-graph-green-0 :foreground "black")))
           `(org-habit-clear-future-face ((,c :background ,bg-graph-green-1 )))
           `(org-habit-ready-face ((,c :background ,bg-graph-green-0 :foreground "black")))
           `(org-habit-ready-future-face ((,c :background ,bg-graph-green-1 ))))))
      (add-hook 'modus-themes-after-load-theme-hook #'gjg/my-modus-themes-custom-faces)
      (setq modus-themes-headings
            '((1 . ( semibold 1.3))
              (2 . ( semibold 1.1))
              (3 . ( semibold 1.1))
              (4 . ( semibold 1.1))
              (5 . ( semibold 1.1))
              (6 . ( semibold 1.1)))
            modus-themes-syntax '(faint alt-syntax)
            modus-themes-org-blocks nil
            modus-themes-org-agenda
            '((header-block . (1.3))
              (header-date . (bold-today 1.2))
              (habit . simplified))
            modus-themes-org-blocks nil
            ;; modus-themes-vivendi-color-overrides
            modus-themes-common-palette-overrides
            '(,@modus-themes-preset-overrides-intense)
            modus-vivendi-tinted-palette-overrides
            '((bg-main "#1a1a1a")  ; gray10
              (fg-main "#e5e5e5")  ; gray90
              (fg-heading-4 "#f4a460")
              (bg-hl-line "#262626")))
    #+end_src
*** Load default theme
    Deferred here until all theme tweaks have been applied
    #+begin_src emacs-lisp
      (gjg/go-dark)
      ;; (let ((hour (nth 2 (decode-time))))
      ;;   (if (or (< hour 9) (> hour 16))
      ;;       (gjg/go-dark)
      ;;     (gjg/go-light)))
    #+end_src
** Make things open up in preferred window
   There's a standard way to force niceness from functions that open buffers in random
   windows just to be annoying.  Here's where those functions are corralled
   #+begin_src emacs-lisp
     ;; Org capture
     (add-to-list 'display-buffer-alist '("^\\*Capture\\*" display-buffer-reuse-window display-buffer-same-window))
     ;; R
     (add-to-list 'display-buffer-alist '("^\\*R" display-buffer-same-window))
     ;; Helpful
     (add-to-list 'display-buffer-alist '("^\\*helpful" display-buffer-reuse-mode-window))
     ;; Change behavior of Magit status (status only, not magit-diff, magit-process etc)
     (add-to-list 'display-buffer-alist '("^magit:" display-buffer-same-window))
     ;; gptel
     (add-to-list 'display-buffer-alist '(".*ChatGPT\\*" display-buffer-same-window))
     ;; All interactive SQL modes
     (add-to-list 'display-buffer-alist
		  '((lambda (buffer action)
		      (with-current-buffer buffer
			(derived-mode-p 'sql-interactive-mode)))
		    display-buffer-same-window))
   #+end_src

   + Here's an example of wrangling a window to display in a direction, with width and
     height constraints
     #+begin_src emacs-lisp :tangle no
       (add-to-list 'display-buffer-alist
                    '(("\\*org-roam\\*"
                       (display-buffer-in-direction)
                       (direction . right)
                       (window-width . 0.33)
                       (window-height . fit-window-to-buffer))))
     #+end_src

** Enable resizing windows with mouse as a normal human
    =window-divider-mode= makes it easy to resize vertically split windows with the
   mouse - EXWM makes it nearly impossible to select the vertical margin without this!

   This is a built-in minor mode
   #+begin_src emacs-lisp
     (window-divider-mode 1)
   #+end_src
* Modeline
** Doom modeline
  #+begin_src emacs-lisp
    (use-package doom-modeline :straight t
      :ensure t
      :after eshell     ;; Make sure it gets hooked after eshell
      :hook (after-init . doom-modeline-mode)
      ;; :custom-face
      ;; ;; (mode-line ((t (:height 0.85))))
      ;; (mode-line-inactive ((t (:height 0.95))))
      :custom
      ;; (doom-modeline-height 15)
      ;; (doom-modeline-bar-width 6)
      (doom-modeline-lsp t)
      (doom-modeline-github nil)
      ;; (doom-modeline-mu4e nil)
      ;; (doom-modeline-irc nil)
      (doom-modeline-minor-modes t)
      ;; (doom-modeline-persp-name nil)
      (doom-modeline-buffer-file-name-style 'truncate-except-project)
      (doom-modeline-major-mode-icon nil)
      :config
      ; remove selection-info segment from default
      (doom-modeline-def-modeline 'main
        '(bar workspace-name window-number modals matches follow buffer-info remote-host buffer-position word-count parrot )
        '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug repl lsp minor-modes input-method indent-info buffer-encoding major-mode process vcs checker time))
      (doom-modeline-mode 1)
      ;; (doom-modeline-add-variable-watcher
      ;;  'doom-modeline--buffer-file-state-icon
      ;;  (lambda (_sym val op _where)
      ;;    (when (string= (buffer-name _where) "tryit.el")
      ;;      (message "DEBUG: %s %s %s %s" _sym val op _where))
      ;;    (when (eq op 'set)
      ;;      ;; (when (and val (not (string-empty-p val)))
      ;;        (setq doom-modeline--buffer-file-state-icon
      ;;              "🚫"
      ;;              ;; (string-replace "" "OHAI" val)
      ;;              )
      ;;      ;; )
      ;;  )))
      )
    (use-package minions :straight t
      :hook (doom-modeline-mode . minions-mode)
      :custom
      (minions-mode-line-lighter ""))

  #+end_src

** Hide the little bleeder altogether
  Set to hide globally, then bind a Super key to toggle only the current buffer. Super
  nice to use when screen sharing - provides ={global-}hide-mode-line-mode=

  #+begin_src emacs-lisp :tangle no
    (straight-use-package
     '(mask-mode-line :type git :host github :repo "ricardoricho/mask-mode-line"
                   :fork (:host github :branch "main" :repo "gregoryg/mask-mode-line")))
  #+end_src

  #+begin_src emacs-lisp
    (use-package hide-mode-line :straight t)
  #+end_src
* EXWM
  Emacs as tiling window manager for X11
** Determine whether to launch
   My configuration tests for the existence of a window manager.  If one is already
   running, just skip all the EXWM setup and bring up a "normal" Emacs instance.

   I shared this solution in an Emacs Stackexchange question: [[https://emacs.stackexchange.com/a/60455/418][Launch EXWM only when no another WM or DE are being used]]
   #+begin_src emacs-lisp
     (when (get-buffer "*window-manager*")
       (kill-buffer "*window-manager*"))
     (when (get-buffer "*window-manager-error*")
       (kill-buffer "*window-manager-error*"))
     (when (executable-find "wmctrl")
       (progn
         (shell-command "wmctrl -m ; echo $?" "*window-manager*" "*window-manager-error*")))
     (setq gjg/exwm-needed-p
           (and (get-buffer "*window-manager-error*")
                (eq window-system 'x)))
   #+end_src

   #+begin_src emacs-lisp
     (when gjg/exwm-needed-p
       ;(org-babel-tangle-file "~/emacs-gregoryg/EXWM.org")
       (load "~/.emacs.d/launch-exwm"))
   #+end_src

* Text / reading modes
** Visual line wrapping
   There is a way to make this usable without =auto-fill-mode= being on, as I have had for
   years (as of [2023-09-30 Sat]).

   The combination of =visual-line-mode= and =visual-fill-column=  - leads to bliss -
   one without the other is not great.

   There is some initialization magic that happens when the modes start in a buffer, and an order (=visual-line-mode= should be executed prior to =visual-fill-column=)

   So ... here are two helper functions to reliably disable and enable the combo
   #+begin_src emacs-lisp
     (defun gjg/disable-visual-line-with-fill ()
       "Disable `visual-fill-column-mode' using the function, followed by disabling `visual-line-mode' using the function."
       (visual-fill-column-mode -1)
       (visual-line-mode -1))

     (defun gjg/enable-visual-line-with-fill ()
       "Enable `visual-line-mode' and  `visual-fill-column-mode' using the functions."
       (interactive)
       (gjg/disable-visual-line-with-fill)
       (visual-line-mode 1)
       (visual-fill-column-mode 1))
   #+end_src

   Therefore, let's set this maybe for Org and =text-mode=
     #+begin_src emacs-lisp
       (use-package visual-fill-column :straight t)
       ;; (global-visual-line-mode 1)
       ;; (add-hook 'text-mode-hook #'gjg/enable-visual-line-with-fill)
       ;; (add-hook 'org-mode-hook #'visual-line-mode)
       ;; (add-hook 'visual-line-mode-hook #'visual-fill-column-mode)
     #+end_src

** Denote - note taking
   + Prot's denote - on System Crafters [[https://systemcrafters.net/live-streams/july-15-2022/][System Crafters Live! - July 15, 2022 - System Crafters]]

*** Initialize package
    Install and do initial configuration of Denote including Denote Dired
    #+begin_src emacs-lisp
      (use-package denote :straight t
        :defer nil
        :init
        (defun gjg/denote-project () (interactive) (project-switch-project "~/gregj-notes"))
        :bind
        ("C-S-d" . gjg/denote-project)
        :config
        (setq denote-directory (expand-file-name "~/gregj-notes/")
              denote-known-keywords '("journal" "projects" "ideas")
              denote-date-prompt-use-org-read-date t)
        ;; (setq denote-prompts '(title subdirectory))
        )
      (require 'denote)

      (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
      (add-to-list 'denote-dired-directories (expand-file-name "~/gregj-notes/journals/"))
      (custom-set-faces
       '(denote-faces-title
         ((t
           (:height 1.1 :weight semibold)))))
    #+end_src
*** Set up Capture template
    This might be further embellished to provide funcationality beyond simply using the
    =denote= function.

    #+begin_src emacs-lisp
      (with-eval-after-load 'org-capture
        (add-to-list 'org-capture-templates
                     '("n" "New note (with Denote)" plain
                       (file denote-last-path)
                       #'denote-org-capture
                       :no-save t
                       :immediate-finish nil
                       :kill-buffer t
                       :jump-to-captured t)))
    #+end_src
*** Journal
    :PROPERTIES:
    :ID:       d7faff4e-90a4-4b70-986f-739e3b936539
    :END:
    Use a =journals/= subdirectory to integrate nicely with Logseq
    #+begin_src emacs-lisp
      ;; Denote templates
      (add-to-list 'denote-templates '(journal . "* Thoughts\n\n* Tasks (require a category)\n" ) )

      ;; Here's a function for daily journal capture - compatible-ish with Logseq
      (defun gjg/denote-journal ()
        "Create an entry tagged 'journal' with the date as its title.
      If an entry for today is already present, visit that file.
      If there are more than one files that match, present a choice."
      ;; (directory-files (concat denote-directory "/journals") nil "^[0-9T]+--2022-10-27.+org$")
        (interactive)
        (let* ((dt (decode-time))
               (today (format "%d-%02d-%02d" (nth 5 dt) (nth 4 dt) (nth 3 dt)))
               (jfileregex (concat "^[0-9T]+--" today ".+org$"))
               (jfiles (directory-files (concat denote-directory "/journals") t jfileregex)))
          (cond
           ((= 1 (length jfiles))
            (find-file (car jfiles)))
           ((> (length jfiles) 1)
            (find-file (completing-read "Journal file (more than 1 found for today: " jfiles)))
           (t
            (denote
             (format-time-string "%Y-%m-%d")
             '("journal") ; multiple keywords are a list of strings: '("one" "two")
             nil          ; default Org file type
             (concat denote-directory "journals")
             nil          ; date - default to current-time
             'journal
             )))
          (save-buffer) ;; gotta save immediately to avoid creating duplicate dailies
          ))
    #+end_src

*** Function to bring up nested notes dired
    This function also works very nicely in the bookmark+ package, which allows
      bookmarking a function.  The function is not dependent on the =bookmark+= package,
      but is very useful with it
    #+begin_src emacs-lisp
      (defun gjg/dired-denote-nested-dirs ()
        "Dired view with Denote directory and subdirectories"
        (interactive)
        (dired denote-directory)
        (dired-maybe-insert-subdir "journals"))
    #+end_src
*** Function to quickly browse all notes with a particular keyword
    This relies on =gjg/dired-denote-nested-dirs=

    Bring up the notes dired, prompt for an existing keyword, then limit the dired view to
    just that keyword

    #+begin_src emacs-lisp
      (defun gjg/denote-browse-keyword (&optional keyword)
        "Bring up the notes dired, prompt for an existing keyword, then limit the dired view to
      just that keyword."
        (interactive)
        (let ((keyword (or keyword
                           (completing-read "Denote keyword: " (denote-keywords)))))
          (gjg/dired-denote-nested-dirs)
          (revert-buffer)
          ;; consider using dired-mark-files-containing-regexp !
          (dired-mark-files-regexp (concat "_" keyword))
          (dired-toggle-marks)
          (dired-do-kill-lines)))

      (bind-key "/" 'gjg/denote-browse-keyword dired-mode-map)
    #+end_src
*** Deregister the =:denote= link type
    I prefer to not make Denote itself a dependency - just use native Org Mode link types
    such as =id= and =file=

    #+begin_src emacs-lisp
      (setq org-link-parameters
            (delq (assoc "denote" org-link-parameters) org-link-parameters))
    #+end_src
* Commonly used modes

** Vertico (will it replace Selectrum which replaced Ivy which replaced Ido?)
   #+begin_src emacs-lisp
     ;; TODO add Prescient (or similar) https://github.com/minad/vertico/wiki/Migrating-from-Selectrum-to-Vertico
     (use-package vertico
       :straight (:files (:defaults "extensions/"))
       :init
       (vertico-mode)
       (vertico-multiform-mode +1))


     (use-package orderless :straight t
       :init
       ;; Configure a custom style dispatcher (see the Consult wiki)
       ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
       (setq completion-styles '(orderless basic)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))))
   #+end_src

** Yafolding Mode
   Yafolding mode is useful in code and (maybe even but probably not in) Org.  Let's keep
   Org mode's keys unmolested, and use an additional modifier to toggle hide/show
   #+begin_src emacs-lisp
     (use-package yafolding :straight t
       :init
       (unbind-key (kbd "<C-return>") yafolding-mode-map)
       (unbind-key (kbd "<C-S-return>") yafolding-mode-map)
       (unbind-key (kbd "<C-M-return>") yafolding-mode-map)
       (unbind-key (kbd "C-'") org-mode-map)
       (define-key yafolding-mode-map (kbd "C-'") #'yafolding-toggle-element)
       (define-key yafolding-mode-map (kbd "C-M-'") #'yafolding-toggle-all))
       ;; (define-key yafolding-mode-map (kbd "<C-S-return>") #'yafolding-toggle-all)
       ;; (define-key yafolding-mode-map (kbd "<C-M-return>") #'yafolding-toggle-element))
   #+end_src
** Corfu - in-buffer auto-complete and more

   + [[https://github.com/minad/corfu][GitHub - minad/corfu: corfu.el - Completion Overlay Region FUnction]]
   + Require 'dabbrev
     + I believe that fixes this error
       #+begin_example
         Error running timer ‘corfu--auto-complete-deferred’: (void-variable dabbrev-abbrev-skip-leading-regexp)
       #+end_example
   #+begin_src emacs-lisp :tangle no
     (require 'dabbrev)
     (use-package corfu :straight t
       ;; Optional customizations
       :custom
       ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
       (corfu-auto t)                 ;; Enable auto completion
       (corfu-separator ?\s)          ;; Orderless field separator
       ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
       ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
       ;; (corfu-preview-current nil)    ;; Disable current candidate preview
       ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
       ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
       ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
       ;; (corfu-scroll-margin 5)        ;; Use scroll margin

       ;; Enable Corfu only for certain modes.
       ;; :hook ((prog-mode . corfu-mode)
       ;;        (shell-mode . corfu-mode)
       ;;        (eshell-mode . corfu-mode))

       ;; Recommended: Enable Corfu globally.
       ;; This is recommended since Dabbrev can be used globally (M-/).
       ;; See also `corfu-excluded-modes'.
       (corfu-exclude-modes '(shell-mode vterm-mode comint-mode))
       :init
       (global-corfu-mode))


     ;; Add extensions
     (use-package cape :straight t
       :config
       (setq cape-dabbrev-check-other-buffers nil)
     ;;   ;; Bind dedicated completion commands
     ;;   ;; Alternative prefix keys: C-c p, M-p, M-+, ...
       :bind (("C-c p p" . completion-at-point) ;; capf
     ;;          ("C-c p t" . complete-tag)        ;; etags
              ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
     ;;          ("C-c p h" . cape-history)
              ("C-c p f" . cape-file)
     ;;          ("C-c p k" . cape-keyword)
     ;;          ("C-c p s" . cape-symbol)
     ;;          ("C-c p a" . cape-abbrev)
     ;;          ("C-c p i" . cape-ispell)
     ;;          ("C-c p l" . cape-line)
     ;;          ("C-c p w" . cape-dict)
     ;;          ("C-c p \\" . cape-tex)
     ;;          ("C-c p _" . cape-tex)
     ;;          ("C-c p ^" . cape-tex)
     ;;          ("C-c p &" . cape-sgml)
     ;;          ("C-c p r" . cape-rfc1345))
              )
       :init
       ;; Add `completion-at-point-functions', used by `completion-at-point'.
       (add-to-list 'completion-at-point-functions #'cape-dabbrev)
       (add-to-list 'completion-at-point-functions #'cape-file)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-history)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-tex)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
     ;;   ;; (add-to-list 'completion-at-point-functions #'cape-ispell)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-dict)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
     ;;   ;;(add-to-list 'completion-at-point-functions #'cape-line)
       )


     ;; (use-package orderless :straight t
     ;;   :init
     ;;   (setq completion-styles '(orderless basic)
     ;;     completion-category-defaults nil
     ;;     completion-category-overrides '((file (styles . (partial-completion))))))

     ;; A few more useful configurations...
     ;; (use-package emacs :straight t
     ;;
     ;;   :init
     ;;   ;; TAB cycle if there are only few candidates
     ;;   (setq completion-cycle-threshold 3)

     ;;   ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
     ;;   ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
     ;;   ;; (setq read-extended-command-predicate
     ;;   ;;       #'command-completion-default-include-p)

     ;;   ;; Enable indentation+completion using the TAB key.
     ;;   ;; `completion-at-point' is often bound to M-TAB.
     ;;   (setq tab-always-indent 'complete))
   #+end_src
** Marginalia - crazy annotations for completions
   #+begin_src emacs-lisp
     (use-package marginalia :straight t
       :bind (("M-A" . marginalia-cycle)
              :map minibuffer-local-map
              ("M-A" . marginalia-cycle)
              )
       :init
       (marginalia-mode))
   #+end_src
** Markdown
   It's common to have very long lines in Markdown text - so turn on =longlines-mode=
   with word wrapping only for those files.
   #+begin_src emacs-lisp
     (use-package markdown-mode :straight t
       :hook
       (markdown-mode . visual-line-mode)
     )
   #+end_src
** TRAMP
*** Tramp general config
    TRAMP may prompt for passphrase for =~/.authinfo.gpg= upon nearly every invocation if
    =tramp-completion-use-auth-sources= is t.  So .... don't do that.
    #+begin_src emacs-lisp
      (custom-set-variables '(tramp-completion-use-auth-sources nil)
                            '(tramp-allow-unsafe-temporary-files t))
    #+end_src
*** Tweak remote bash shell prompt PS1
    if used, tangle to  ~/.emacs.d/init_bash.sh

    #+begin_src bash :tangle no
      # Reset the prompt for remote TRAMP shells.
      if [ "${INSIDE_EMACS/*tramp*/tramp}" == "tramp" ] ; then
        PS1="[\u@\h \w]$ "
         # PS1="[$(echo $PS1 | cut -d':' -f 1-2 ):\w]$ "
      fi
    #+end_src
*** Add methods for Docker, DC/OS, Google Cloud Shell
**** Add a helper script for Kubernetes =kube= method

     + Firstly, implement my custom way of handling multiple clusters
       #+begin_src bash :tangle ~/bin/load-kubeconfigs.sh
         # Stolen from https://medium.com/@alexgued3s/multiple-kubeconfigs-no-problem-f6be646fc07d

         # Start by "resetting" KUBECONFIG
         unset KUBECONFIG
         # If there's already a kubeconfig file in ~/.kube/config it will import that too and all the contexts
         DEFAULT_KUBECONFIG_FILE="$HOME/.kube/config"
         if test -f "${DEFAULT_KUBECONFIG_FILE}"
         then
           export KUBECONFIG="$DEFAULT_KUBECONFIG_FILE"
         fi
         # Your additional kubeconfig files should be inside ~/.kube/config-files
         ADD_KUBECONFIG_FILES="$HOME/.kube/config-files"
         mkdir -p "${ADD_KUBECONFIG_FILES}"

         OIFS="$IFS"
         IFS=$'\n'
         for kubeconfigFile in `find "${ADD_KUBECONFIG_FILES}" -type f -name "*.yml" -o -name "*.yaml"`
         do
             export KUBECONFIG="$kubeconfigFile:$KUBECONFIG"
         done
         IFS="$OIFS"
       #+end_src
     + This will work with the custom method.  It will honor the existing setting of
       context namespace, so set that first if the Pod is running in something other than
       =default= namespace.

       E.g.
       #+begin_src bash
         kn poodle # using alias
         kubectl config set-context --current --namespace poodle # full cmd
       #+end_src
       #+begin_src bash :tangle ~/bin/mykubectl
         source ~/bin/load-kubeconfigs.sh
         kubectl $@
       #+end_src

**** Define TRAMP methods
    #+begin_src emacs-lisp
      ;; add method to connect to Mesosphere DC/OS tasks
      ;; we need to execute a command like the following
      ;;  dcos task exec --tty --interactive <taskname> -- bash
      ;; example TRAMP URI:   //dcos:jupyter:
      (require 'tramp)
      (with-eval-after-load 'tramp
        ;; Add method to connect to Kubernetes pods
        ;; we need to execute a command like the following
        ;;  kubectl exec -it --namespace jhub jupyter-gregj -- /bin/bash
        ;; example TRAMP URI:   //kexec:jhub@jupyter:
        (add-to-list 'tramp-methods
                     '("kube"
                       (tramp-login-program "~/bin/mykubectl")
                       (tramp-login-args
                        (nil
                         ("exec" "-it")
                         ("--namespace" "%u")
                         ("%h")
                         ("--" "sh")))
                       (tramp-remote-shell "/bin/sh")
                       (tramp-remote-shell-args ("-i" "-c"))))

        ;; Google Cloud Shell
        (add-to-list 'tramp-methods
                     '("gshell"
                       (tramp-login-program        "gcloud alpha cloud-shell ssh")
                       (tramp-default-host "cloud-shell")
                       (tramp-login-args (("#%h")))
                       ;; (tramp-login-args           (("%h")))
                       ;; (tramp-async-args           (("-q")))
                       (tramp-remote-shell         "/bin/bash")
                       (tramp-remote-shell-args    ("-c"))
                       ;; (tramp-gw-args              (("-o" "GlobalKnownHostsFile=/dev/null")
                       ;;                              ("-o" "UserKnownHostsFile=/dev/null")
                       ;;                              ("-o" "StrictHostKeyChecking=no")))
                       (tramp-default-port         22)))
        ;; TRAMP gcloud ssh with no helper script
        (add-to-list 'tramp-methods
                     '("gssh"
                       (tramp-login-program        "gcloud compute ssh")
                       (tramp-login-args           (("%h")))
                       (tramp-async-args           (("-q")))
                       (tramp-remote-shell         "/bin/sh")
                       (tramp-remote-shell-args    ("-c")))))


    #+end_src
*** Handle SUDO - root and other users
    #+begin_src emacs-lisp
      ;; TRAMP SUDO FUN - snarfed from Peter Dyballa on gmane.emacs.help
      (defun my-tramp-header-line-function ()
        (when (string-match "^/.*su\\(do\\)?:" default-directory)
          (setq header-line-format
                (format-mode-line "----- THIS BUFFER IS VISITED WITH SUDO PRIVILEGES -----"
                                  'font-lock-warning-face))))

      (with-eval-after-load 'tramp
        (add-hook 'find-file-hook 'my-tramp-header-line-function)
        (add-hook 'dired-mode-hook 'my-tramp-header-line-function))
    #+end_src
*** Shell sugar
**** Open remote shell in current remote directory
#+begin_src emacs-lisp
  (defun gjg/open-shell-prompted (newdir)
    "Directly open shell local or TRAMP remote"
    (interactive "D")
    (message (format "Changing directory to %s" newdir))
    (cd newdir)
    (if (file-remote-p newdir)
        (shell (format "%s-sh" (file-remote-p newdir 'host)))
      (shell
       (format "%s-sh"
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory newdir)))))))



  (defun gjg/open-remote-shell ()
    "If current buffer is remote, open a new uniquely named shell based on host name"
    (interactive)
    (if (file-remote-p default-directory)
        (progn
          ;; do stuff
          (message "Now I shall do stuff")
          (shell (concat (file-remote-p default-directory 'host) "-sh")))
      (shell
       (concat
        (file-name-nondirectory
         (directory-file-name
          (file-name-directory
           default-directory))) "-sh"))))
#+end_src
** Bookmark+
   Bookmark a function, bookmark crazy things
   Note this package provides =bmkp-bmenu-buffer= useful to use for jumping to bookmarked TRAMP connections
   #+begin_src emacs-lisp
     (use-package bookmark+ :straight t)
   #+end_src
** Dired
   =dired-dwim-target= is just awesome.  Whenever you have 2 Dired
   windows in a frame, hitting Copy or Rename from one Dired buffer
   automatically suggests the other as the target

   =dired-omit-files= is a regexp for files you want to hide using
   =dired-omit-mode= Depending on your workflow, that may include
   compiled files (.elc, .o etc) as well as normally hidden files.

   =auto-revert-mode= refreshes the visible buffer when something in
   the directory changes.

   #+begin_src emacs-lisp
     (require 'dired)
     (with-eval-after-load 'dired)
     ;; (use-package all-the-icons-dired :straight t)
     (use-package all-the-icons :straight t) ;; currently ([2022-12-03 Sat]) being used for org-agenda-category-icon-alist and maybe doom-modelinea
     (use-package dired-collapse :straight t)
     (use-package treemacs :straight t
       :defer t
       :config
       (progn
         (treemacs-fringe-indicator-mode 'only-when-focused)
         (when treemacs-python-executable
           (treemacs-git-commit-diff-mode t))
         (pcase (cons (not (null (executable-find "git")))
                      (not (null treemacs-python-executable)))
           (`(t . t)
            (treemacs-git-mode 'deferred))
           (`(t . _)
            (treemacs-git-mode 'simple)))
         (treemacs-modify-theme "Default"
           :icon-directory "~/emacs/pixmaps/"
           :config
           (progn
             (treemacs-create-icon :file "sparql-rdf.png" :extensions ("sparql" "rq" "ttl" "trig")))))
       :bind
       (:map treemacs-mode-map
             ("C-o" . treemacs-visit-node-no-split))
       )

     (use-package treemacs-icons-dired :straight t
       :hook
       (dired-mode . treemacs-icons-dired-enable-once))

     (define-key dired-mode-map [mouse-1] 'dired-find-file)
     (define-key dired-mode-map [mouse-2] 'dired-find-file)
     (keymap-unset dired-mode-map "N") ;; run man on file????
     (keymap-set dired-mode-map "N" (lambda () (interactive) (dired-display-file) (dired-next-line)))
     (setq dired-dwim-target t
           dired-omit-files "^\\.?#\\|^\\..*"
           delete-by-moving-to-trash nil
           dired-listing-switches "-alh --group-directories-first --time-style=long-iso")
     (require 'dired-x)
     (delete ".bin" dired-omit-extensions)
     ;; set key binding in key map prior to dired-x being loaded - for autoload
     (define-key dired-mode-map "\C-x\M-o" 'dired-omit-mode)
     (define-key dired-mode-map (kbd "M-<up>") 'dired-up-directory)
     (define-key dired-mode-map (kbd "M-<down>") 'dired-find-file)
     (autoload 'dired-omit-mode "dired-x" "Dired-X")
     ;; (declare (special dired-x-hands-off-my-keys
     ;; 		  dired-bind-vm
     ;; 		  dired-omit-files-p))
     ;; (add-hook 'dired-load-hook
     ;; 	  (function
     ;; 	   (lambda ()
     ;; 	     (declare (special dired-x-hands-off-my-keys
     ;; 			       dired-bind-vm))
     ;; 	     (load-library "dired-x")
     ;; 	     (setq dired-x-hands-off-my-keys nil
     ;; 		   dired-bind-vm t))))

     (setq auto-revert-verbose nil)
     (add-hook 'dired-mode-hook
           (lambda ()
             (interactive)
             (dired-omit-mode 1)
             ;; (dired-hide-details-mode 1)
             ;; (all-the-icons-dired-mode 1)
             (auto-revert-mode 1)))
     ;; 		      ;; Set dired-x buffer-local variables here.  For example:
     ;; 		      (setq dired-omit-mode t)
     ;; 		      (setq dired-omit-files "^\\..*")
     ;; 		      )))
   #+end_src
*** Open file in relevant OS app
#+begin_src emacs-lisp
  ;; swiped from Gilaras Drakeson <gilaras@gmail.com>
  (defcustom gjg/os-open "xdg-open"
    "Command to open a document, e.g. `xdg-open` on Linux, `sensible-browser` on crostini, `open` on OS X, `explorer` or `cygpath` on Windows"
    :type 'string
    :group 'gjg)


  (defun dired-open (&optional file-list)
    (interactive
     (list (dired-get-marked-files t current-prefix-arg)))
    (progn
      (message (format "Calling %s %s" gjg/os-open file-list))
      (apply 'call-process gjg/os-open nil 0 nil file-list)))
  (define-key dired-mode-map (kbd "C-;") 'dired-open)
#+end_src
** Ediff
   #+begin_src emacs-lisp
     (setq ediff-split-window-function 'split-window-horizontally)
     (setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src
** Project.el
   Project.el is built in

   #+begin_src emacs-lisp
     ;; (use-package project :straight t)
     (setq project-switch-commands
        '((project-find-file "Find file")
          (project-find-regexp "Find regexp")
          (project-find-dir "Dired somewhere")
          (project-dired "Root dired" ?r)
          (project-shell "Shell" ?s)
          (magit-project-status "Magit" ?m)
          (treemacs-add-and-display-current-project "Treemacs" ?t)))
     (defun gjg/project-dired-choose ()
       "Visit a directory (with completion) in the current project."
       (interactive)
       (let* ((pr (project-current t))
              (dir (expand-file-name "~/projects/homelab"))
              (localdir (file-name-unquote (file-local-name (expand-file-name dir))))
              (dirs (process-file-shell-command (format "%s -H %s -type d " find-program (shell-quote-argument (directory-file-name localdir))))))

         (completing-read "Ohai: " dirs)))
         ;; (message dirs)))

         ;; (project-find-file-in (thing-at-point 'filename) dirs pr)))
   #+end_src
** Shell and related modes
   TODO: remove conflicting key bindings
*** Vterm
    #+begin_src emacs-lisp
      (use-package vterm :straight t
        :ensure t
        :config
        (define-key vterm-mode-map (kbd "M-p") nil)
        :bind (:map vterm-mode-map
                    (("M-p" . (lambda () (interactive) (vterm-insert  (kbd "<up>")))))))
    #+end_src
*** Coterm - comint with terminal emulation
    This thing is magnificent.  It provides good-enough terminal emulation in my beloved
    old friend shell-mode windows.
    #+begin_src emacs-lisp
      (use-package coterm :straight t
        :config
        (coterm-mode 1))
    #+end_src
*** Shell mode config
    #+begin_src emacs-lisp
      (custom-set-variables '(shell-kill-buffer-on-exit t)
                            '(shell-command-prompt-show-cwd t))
    #+end_src
*** Config for comint mode
    #+begin_src emacs-lisp
      (defun gjg/turn-on-comint-history (history-file)
        (setq comint-input-ring-file-name history-file)
        (comint-read-input-ring 'silent))
      (setq comint-input-ring-size 5000)
    #+end_src
*** Hook in shell history
    #+begin_src emacs-lisp
      (add-hook 'shell-mode-hook
                (lambda ()
                  (gjg/turn-on-comint-history (getenv "HISTFILE"))))
      (add-hook 'kill-buffer-hook #'comint-write-input-ring)
      (add-hook 'kill-emacs-hook
                (lambda ()
                  (--each (buffer-list)
                    (with-current-buffer it (comint-write-input-ring)))))
    #+end_src
*** Bash completions
    #+begin_src emacs-lisp
      (use-package bash-completion :straight t
        :config
        (bash-completion-setup))
    #+end_src
*** ANSI color
    The =xterm-color-filter= function is part of the =xterm-color= package.  It does the
    Lord's work in translating ANSI color codes to font properties so that things can look
    awesome.

    #+begin_src emacs-lisp
      (use-package xterm-color :straight t)
      (ansi-color-for-comint-mode-on)
      ;; try some xterm coloring in shell buffers
      (setq comint-output-filter-functions
            (remove 'ansi-color-process-output comint-output-filter-functions))
      (add-hook 'shell-mode-hook
            (lambda ()
              (abbrev-mode 1)
              (dirtrack-mode 0)
              (shell-dirtrack-mode 1)
              (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))
    #+end_src
*** SSH Agent in subprocesses
    + Not really related to shell-mode, this assures our keychain is activated for things
      such as magit that fire off subproceess
      #+begin_src emacs-lisp
        (use-package keychain-environment :straight t)
        (keychain-refresh-environment)
      #+end_src
** Magit
*** Behavior
    #+begin_src emacs-lisp
      ;; (use-package magit-todos :straight t)
      (use-package magit :straight t
        :config
        (setq magit-clone-set-remote.pushDefault t))
    #+end_src

** Help and helpful modes
*** Add navigation to Help buffer
   #+begin_src emacs-lisp
     (setq help-window-select t)
     (add-hook 'help-mode-hook
               (lambda ()
                 (local-set-key (kbd "M-p") 'help-go-back)
                 (local-set-key (kbd "M-n") 'help-go-forward)
                 ))
   #+end_src
*** Use the Helpful package
   #+begin_src emacs-lisp
     (use-package helpful :straight t
       :config
       (global-set-key (kbd "C-h f") #'helpful-callable)
       (global-set-key (kbd "C-h v") #'helpful-variable)
       (global-set-key (kbd "C-h k") #'helpful-key)
       (global-set-key (kbd "C-h d") #'helpful-at-point)
       (global-set-key (kbd "C-h F") #'helpful-function)
       (global-set-key (kbd "C-h C") #'helpful-command))

     ;; (when (fboundp 'helpful-function)
     ;;   (progn
     ;;     ;; Note that the built-in `describe-function' includes both functions
     ;;     ;; and macros. `helpful-function' is functions only, so we provide
     ;;     ;; `helpful-callable' as a drop-in replacement.
     ;;     ;; (global-set-key (kbd "C-h f") #'helpful-callable)
     ;;     ;; (global-set-key (kbd "C-h v") #'helpful-variable)
     ;;     (global-set-key (kbd "C-h k") #'helpful-key)
     ;;     ;; Lookup the current symbol at point. C-c C-d is a common keybinding
     ;;     ;; for this in lisp modes.
     ;;     (global-set-key (kbd "C-c C-d") #'helpful-at-point)
     ;;     (setq counsel-describe-function-function #'helpful-callable)
     ;;     (setq counsel-describe-variable-function #'helpful-variable)))
   #+end_src

** CSV - Clumsy Stupid Varmint
    #+begin_src emacs-lisp
      (use-package csv-mode :straight t)
    #+end_src
*** TTL - Ticky Tacky Lunacy
    #+begin_src emacs-lisp
      (use-package ttl-mode :straight t
        :init
        (add-to-list 'auto-mode-alist '("\\.\\(n3\\|sms\\|sms2\\|ttl\\|trig\\)\\'" . ttl-mode))
        :config
        (setq ttl-indent-level 2))
    #+end_src
*** YAML - You A Moth Licker
    #+begin_src emacs-lisp
      (use-package yaml-mode :straight t
        :hook (yaml-mode . (lambda () (yafolding-mode 1)
                             (toggle-truncate-lines 1))))
      (add-hook 'conf-mode-hook
                (lambda ()
                  (yafolding-mode 1)
                  (toggle-truncate-lines 1)))
    #+end_src
 *

** TTL - Ticky Tacky Lunacy
    #+begin_src emacs-lisp
      (use-package ttl-mode :straight t
        :init
        (add-to-list 'auto-mode-alist '("\\.\\(n3\\|ttl\\|trig\\)\\'" . ttl-mode))
        :config
        (setq ttl-indent-level 2))
    #+end_src
*** YAML - You A Moth Licker
    #+begin_src emacs-lisp
      (use-package yaml-mode :straight t
        :hook (yaml-mode . (lambda () (yafolding-mode 1)
                             (toggle-truncate-lines 1))))
      (add-hook 'conf-mode-hook
                (lambda ()
                  (yafolding-mode 1)
                  (toggle-truncate-lines 1)))
    #+end_src
 *

** YAML - You A Moth Licker
    #+begin_src emacs-lisp
      (use-package yaml-mode :straight t
        :hook (yaml-mode . (lambda () (yafolding-mode 1)
                             (toggle-truncate-lines 1))))
      (add-hook 'conf-mode-hook
                (lambda ()
                  (yafolding-mode 1)
                  (toggle-truncate-lines 1)))
    #+end_src

** rg / ripgrep
   + Switching from ag/Silver Searcher simply because ag is no longer in the default repos
     for Debian Trixie
   #+begin_src emacs-lisp
     (use-package rg :straight t
       :custom
       (rg-custom-type-aliases
        '(
          ("sparql" . "*.{sparql,rq}")
          ("rdf"    . "*.{ttl,turtle,rdf,owl,trig}")
          ("sms"    . "*.{sms,sms2}")))
       (rg-hide-command t))
   #+end_src
* Presentation and screencasting
  Most everything I use is encoded in my own Org-as-presentation method using the
  ded/org-show-{next,prev}-heading-tidily bound to global keys

  The rest is outside of Emacs (OBS Studio for example)

  But for this one bitlet: echoing keystrokes during a screencast.
  #+begin_src emacs-lisp
    (use-package command-log-mode :straight t :defer t)
  #+end_src
* Programming language modes
** All modes derived from =prog-mode=
  #+begin_src emacs-lisp
    (add-hook 'prog-mode-hook
              (lambda ()
                     (rainbow-delimiters-mode 1)
                (yafolding-mode 1)
                (electric-pair-local-mode 1)))
  #+end_src

  Let's throw in IELM =inferior-emacs-lisp-mode=, which derives from =comint-mode=
  #+begin_src emacs-lisp
    (add-hook 'inferior-emacs-lisp-mode-hook
              (lambda ()
                (rainbow-delimiters-mode 1)
                (electric-pair-local-mode 1)))

  #+end_src
  And we'll do the same for the Sly REPL(s)
  #+begin_src emacs-lisp
    (add-hook 'sly-mrepl-mode-hook
              (lambda ()
                (rainbow-delimiters-mode 1)
                (electric-pair-local-mode 1)))
  #+end_src

** Clojure
   #+begin_src emacs-lisp
     ;; (add-hook 'cider-repl-mode-hook #'company-
     (use-package clojure-mode :straight t
       :mode "\\.clj[sc]?\\'"
       ;; :config
       ;; (add-hook 'clojure-mode-hook #'lispy-mode)
       )

     (use-package cider :straight t
       ;; :mode "\\.clj[sc]?\\'"
       )
     ;; ;; (add-to-list 'load-path "~/emacs/cider")
     ;; (autoload 'cider "cider" "Cider for Clojure")
     ;; (require 'cider)
     ;; (eval-after-load "cider"
     ;;   '(progn
     ;;      ;; (require 'cider)
     ;;      ;; (defadvice cider--lein-present-p (around gjg-find-the-damn-script activate)
     ;;      ;;   "Lein shell script is not detected on Windows as executable"
     ;;      ;;   (if (eq window-system 'w32)
     ;;      ;;       (setq ad-return-value (or (file-remote-p default-directory)
     ;;      ;;    			     (locate-file "lein" exec-path nil 'exists)))
     ;;      ;;     (ad-do-it)))
     ;;      (add-hook 'cider-repl-mode-hook 'company-mode)
     ;;      (add-hook 'cider-mode-hook 'company-mode)))

   #+end_src
** Javascript including JSON
*** Prefer json-mode to built-in package
    #+begin_src emacs-lisp
      (use-package json-mode :straight t)
    #+end_src
*** Treat =.cue= as JSON or Bazel
    #+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.cue$" . bazel-mode))

    #+end_src
** Lisp
*** Common Lisp
    Here we will assume SBCL
    + Install SBCL from [[https://www.sbcl.org/getting.html][the website]]
    + [[https://lispcookbook.github.io/cl-cookbook/getting-started.html#install-quicklisp][Install Quicklisp]]
    + [[https://lispcookbook.github.io/cl-cookbook/getting-started.html#install-quicklisp][Getting started with Common Lisp]]
    + [[https://github.com/joaotavora/sly][joaotavora/sly: Sylvester the Cat's Common Lisp IDE ≫ github.com]]
    #+begin_src emacs-lisp :tangle no
      (load (expand-file-name "~/quicklisp/slime-helper.el"))
      ;; Replace "sbcl" with the path to your implementation
      (setq inferior-lisp-program "sbcl")
    #+end_src
    #+begin_src emacs-lisp
      (use-package sly :straight t
        :config
        (setq inferior-lisp-program "sbcl"
              org-babel-lisp-eval-fn 'sly-eval
              sly-symbol-completion-mode nil)
        (electric-pair-local-mode 1))
    #+end_src

*** Guile Scheme
    +
   Setup for Guile Scheme - primarily for use on Guix system
   #+begin_src emacs-lisp :tangle no
     (use-package geiser :straight t
       :config
       (setq geiser-default-implementation 'guile
             geiser-active-implementations '(guile)
             geiser-implementations-alist '(((regexp "\\.scm$") guile))
             ;; geiser-repl-default-port 44555 ; for Gambit Scheme (from @daviwil)
             ))
     (use-package geiser-guile :straight t)
   #+end_src
*** Racket Scheme
    :PROPERTIES:
    :ID:       4c49ed92-563b-488a-988a-de54a24dd7c1
    :END:
   #+begin_src emacs-lisp :tangle no
     (use-package geiser :straight t
       :config
       (setq geiser-default-implementation 'racket
             geiser-active-implementations '(racket)
             geiser-implementations-alist '(((regexp "\\.scm$") racket))
             ;; geiser-repl-default-port 44555 ; for Gambit Scheme (from @daviwil)
             ))
     (use-package geiser-racket :straight t  )
     (with-eval-after-load 'eglot
       (add-to-list 'eglot-server-programs '(scheme-mode . ("racket" "-l" "racket-langserver"))))
   #+end_src
** Python
*** LSP Language Server
    Just make sure the language server is installed before using LSP with Python
    #+begin_src bash
      pip install -U setuptools
      pip install python-lsp-server[all]
    #+end_src
*** Python mode setup
   #+begin_src emacs-lisp
     ;; Python

     (use-package python :straight t
       :custom
       (org-babel-python-command "python3")
       :config
       (setq python-shell-interpreter "ipython3"
             python-shell-interpreter-args "-i --simple-prompt")
       (setq org-babel-python-command "python3")
       (add-hook 'python-mode-hook
                 (lambda ()
                   (setq indent-tabs-mode nil)
                   (setq python-indent-offset 4)
                   (setq tab-width 4)
                   (pyvenv-mode t)))
       )
     (use-package pyvenv :straight t
       :config
       (setenv "WORKON_HOME" (expand-file-name "~/.local/python-venvs/")))
     (custom-set-variables '(org-babel-python-command "python3"))

     ;; (setq ansi-color-drop-regexp
     ;;       "\033\\[\\([ABCDsuK]\\|[12][JK]\\|=[0-9]+[hI]\\|[0-9;]*[Hf]\\|\\?[0-9]+[hl]\\|[0-9]+[CD]\\|J\\|6n\\)")
   #+end_src
** R
   #+begin_src emacs-lisp :tangle no
     (use-package polymode :straight t
       :config
       (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
       (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
       (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode)))
     (use-package ess :straight t
       :config
       (setq ess-sas-edit-keys-toggle nil)
       :init (require 'ess-site))
   #+end_src
** Cypher/OpenCypher for Neo4j
   + Cypher mode
     #+begin_src emacs-lisp
       (use-package cypher-mode :straight t)
     #+end_src
   + ob-cypher
     #+begin_src emacs-lisp
       (use-package ob-cypher
         :straight t
         :config
         (add-to-list 'org-babel-load-languages '(cypher . t))
         (org-babel-do-load-languages 'org-babel-load-languages org-babel-load-languages)
         (add-to-list 'org-babel-tangle-lang-exts '("cypher" . "cypher")))
     #+end_src
** SPARQL
   #+begin_src emacs-lisp
     (straight-use-package
      '(sparql-mode :type git :host github :repo "ljos/sparql-mode"
                    :fork (:host github :branch "stardog-babel" :repo "gregoryg/sparql-mode")))
     (add-to-list 'auto-mode-alist '("\\.\\(sparql\\|rq\\)\\'" . sparql-mode))
     (load-library "~/projects/emacs/stardog-sparql/stardog-sparql")
   #+end_src
** SQL
*** Crazy removal of sql-login-delay
    SQL connections are very very fast, yet I always wait ~8 seconds before I can start
    typing in a new interactive SQL buffer (at least for MySQL/MariaDB).  Why?  There's a
    section in the =sql-product-interactive= function that waits for pending output from a
    process for no apparent reason, snippet below
    #+begin_src emacs-lisp :tangle no
      (while (and proc
                  (memq (process-status proc) '(open run))

                  (or (accept-process-output proc step) ; ALWAYS returns nil IME

                      (<= 0.0 (setq secs (- secs step))))
                  (progn (goto-char (point-max))
                         (not (re-search-backward sql-prompt-regexp 0 t))))
        (sql-progress-reporter-update rpt))  # ....
    #+end_src

    Therefore, I shall try globally setting sql-login-delay to zero.  Wish me luck!
    #+begin_src emacs-lisp
      (setq sql-login-delay 0)
    #+end_src
*** Format SQL
    Emacs doesn't come out of the box with a useful SQL formatter, so go ahead and use an
    external process

    Ref https://emacs.stackexchange.com/a/35683/418

    #+begin_src bash
      pip3 install sqlparse
    #+end_src
*** Org Babel SQL code blocks
    Come here to set code block headers

    Add your host user/pass in ~/.emacs.d/sql-wallet

    Ideally you can set header args per file, like
    #+begin_example
      ,#+property: header-args:sql :engine mysql :dbhost erebor :database northwind
    #+end_example


*** Save command history for all SQL modes
    + Little gpt-4 showed me how to do this on [2023-09-23 Sat]
    #+begin_src emacs-lisp
      (defvar my-sql-input-ring-file "~/.emacs.d/sqlhistory"
        "Path to file for saving sql-mode history.")

      (defun my-sql-save-history ()
        "Save sql-mode input history to a file."
        (let ((l (ring-elements comint-input-ring)))
          (when l
            (with-temp-file my-sql-input-ring-file
          (dolist (input l)
            (insert input ?\n))))))

      (defun my-sql-load-history ()
        "Load sql-mode input history from a file."
        (let ((f my-sql-input-ring-file))
          (when (file-exists-p f)
            (nreverse
             (with-temp-buffer
           (insert-file-contents f)
           (split-string (buffer-string) "\n" t))))))

      (add-hook 'sql-interactive-mode-hook
            (lambda ()
              (setq comint-input-ring-file-name my-sql-input-ring-file)
              (comint-read-input-ring 'silent)
              (add-hook 'kill-buffer-hook #'comint-write-input-ring nil 'local)))
    #+end_src
*** MySQL / MariaDB

    + Assure that client prompt is recognized for both products
   #+begin_src emacs-lisp
     ;; (add-hook 'sql-interactive-mode-hook (lambda ()
     ;;                                        (setq sql-prompt-regexp "\\(Maria[BD]*\\|MySQL\\) [^\\>]+\\>")
     ;;                                        ))
     (with-eval-after-load 'sql
       ;; (sql-set-product-feature 'mysql :prompt-regexp "^\\(MariaDB\\|[Mm][Yy][Ss][Qq][Ll]\\) *\\[?[\\[\\]]]_a-zA-Z0-9()]*\\]?> ")
       (sql-set-product-feature 'mysql :prompt-regexp
                                "^\\(MariaDB\\|MySQL\\|mysql\\) \\[[\\(\\)_a-zA-Z]*\\]> ")
       (setq sql-mysql-options '("-C" "-t" "-f" "-n"))
       (sql-set-product-feature 'sqlite :prompt-regexp
                                "^\\(sqlite\\|\\|mysql\\) *\\[[\\(\\)_a-zA-Z]*\\]> ")
       )
   #+end_src
   + Allow for alternative port
     #+begin_src emacs-lisp
       (setq sql-mysql-login-params '(user password server database port))
       (setq sql-port 3306)
     #+end_src

*** Postgresql
    + Allow for alternative port
     #+begin_src emacs-lisp :tangle no
       (setq sql-postgres-login-params '(user password server database port))
       ;; (setq sql-port 3306)
     #+end_src
** FINAL step after all language modes have been configured
   #+begin_src emacs-lisp
     (use-package ob-http :straight t)
     (org-babel-do-load-languages
      'org-babel-load-languages
      (append org-babel-load-languages
              '(
                (sparql . t)
                (clojure . t)
                (http . t) ;; curl
                (js . t)
                (latex . t)
                (lisp . t)
                ;;                (jupyter . t) ;; makes Emacs core dump??? (related to compiled zmq)
                (plantuml . t)
                (lilypond . t)
                (python . t)
                (shell  . t)
                (sql . t)
                )))
   #+end_src

* Devops
** Working with containers
   This is largely a function of TRAMP.  I have added simple ways to
   get Dired and =shell-mode= in
   + Docker containers using =docker-tramp= package
   + DC/OS tasks with the =dcos= TRAMP method
   + Kubernetes pods with the =kube= TRAMP method.  This will grab a
     shell on the first container defined in the pod
   + Google Cloud Shell with =gshell= TRAMP method

** Highlight Terraform and Ansible messages
   This function highlights the typical lines for:
   + Terraform (Creation/Destruction complete)
   + Ansible (RUNNING/STAGE/TASK/PLAY)
   + Docker build (Step n/n)

  #+begin_src emacs-lisp
    (defun gjg/highlight-terraform-stuff ()
      (interactive)
      ; Terraform patterns
      (highlight-regexp "Creation complete" 'hi-green)
      (highlight-regexp "Destruction complete" 'hi-pink)
      ; Docker build
      (highlight-regexp "Step [0-9]+/[0-9]+ : [A-Z]+" 'hi-aquamarine)
      ; Ansible
      (highlight-regexp "\\(RUNNING\\|STAGE\\|TASK\\|PLAY\\) .+" 'hi-black-b))

    (defun gjg/highlight-squid ()
      (interactive)
      ;; Registry pull-through cache
      (highlight-regexp "^HIT" 'hi-green)
      (highlight-regexp "^MISS" 'hi-pink)
      ;; Docker pull-through registry patterns
      (highlight-regexp "\"HIT\"" 'hi-green)
      (highlight-regexp "\"MISS\"" 'hi-pink)
      ;; Squid caching patterns
      (highlight-regexp "[A-Z_]*_HIT[A-Z_]*" 'hi-green)
      (highlight-regexp "[A-Z_]*_MISS[A-Z_]*" 'hi-pink)
      (highlight-regexp "[A-Z_]*_UNMODIFIED[A-Z_]*" 'hi-green)
      (highlight-regexp "application/[-a-z0-9A-Z]+" 'hi-yellow)
      (highlight-regexp "/[^/]+\.rpm" 'hi-black-b)
      (highlight-regexp "/[^/]+\.deb" 'hi-black-b))
  #+end_src
* Org mode stuff

** Org Contributions package
   Add =ignore= tag to headlines you don't want to export
   Refer to [[https://emacs.stackexchange.com/a/17677/418][org mode - Is it possible to export content of subtrees without their heading...]]
** Habits
   #+begin_src emacs-lisp
     (add-to-list 'org-modules 'org-habit t)
     (require 'org-habit)
     (setq org-habit-show-all-today t
           org-habit-show-done-always-green t
           org-habit-show-habits nil
           org-habit-graph-column 60
           ;; org-habit-completed-glyph 9989
           org-habit-preceding-days 7
           org-habit-following-days 2
           org-habit-show-done-always-green t
           org-habit-show-habits-only-for-today nil)
   #+end_src
** Org key mappings
   Disable some that get in the way
   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       ;; little use for header COMMENT keyword
       (unbind-key (kbd "C-c ;") org-mode-map)       ; org-toggle-comment
       (unbind-key (kbd "C-c ;") org-mode-map)
       ;; don't accidentally archive things
       (unbind-key (kbd "C-c C-x C-a") org-mode-map) ; org-archive-subtree-default
       (unbind-key (kbd "C-c C-x C-s") org-mode-map) ; org-archive-to-subtree
       (unbind-key (kbd "C-c C-x A") org-mode-map)   ; org-archive-to-archive-sibling
       (unbind-key (kbd "C-c C-x a") org-mode-map)   ; org-toggle-archive-tag
       ;; remap the dangerous C-c C-w to avoid nuking regions
       (unbind-key (kbd "C-c C-r") org-mode-map)   ; org-reveal
       (unbind-key (kbd "C-c C-w") org-mode-map)     ; org-refile
       (bind-key (kbd "C-c C-r") 'org-refile org-mode-map)
       ;; keys that conflict with buffer movement
       (unbind-key (kbd "<M-right>") org-mode-map)   ; org-metaright
       (unbind-key (kbd "<M-left>") org-mode-map)    ; org-metaleft
       ;; keys that conflict with windmove package
       ;; (unbind-key (kbd "<S-up>") org-mode-map)       ; org-shiftup
       ;; (unbind-key (kbd "<S-down>") org-mode-map)     ; org-shiftdown
       ;; (unbind-key (kbd "<S-left>") org-mode-map)     ; org-shiftleft
       ;; (unbind-key (kbd "<S-right>") org-mode-map)    ; org-shiftright
       )
   #+end_src
** Org Babel and Source Code Blocks
*** Set default tangle Org Babel headers
    Here's a thought: *every* tangled file should have a link back to its originating Org
    source
    #+begin_src emacs-lisp
      (add-to-list 'org-babel-default-header-args '(:comments . "both") )
    #+end_src
*** Report time for code block execution
    + Ref: My answer on Emacs Stackexchange
       [[https://emacs.stackexchange.com/a/61357/418][timers - How to time org-mode code block execution? - Emacs Stack Exchange]]
    #+begin_src emacs-lisp :tangle no
      (defun gjg/time-call (time-call &rest args)
        (message "Ohai %s" args)
        (let ((start-time (float-time))
              (result (apply time-call args)))
          (message "Function call took %f seconds" (- (float-time) start-time))
          result))

      (advice-add 'org-babel-execute-src-block :around #'gjg/time-call)
    #+end_src
*** Config including template shortcuts
    TODO: install ob-jupyter package on systems with Jupyter
     #+begin_src emacs-lisp
       ;; (unless (version< org-version "9.2")
       ;;   (require 'org-tempo) ; required for Easy Templates since Org 9.2
       ;;   )
       (with-eval-after-load 'org
         (setq org-confirm-babel-evaluate nil
               org-export-with-sub-superscripts nil)

         ;; ;; The Dreadful Timeline has brought us indentation-sensitive languages
         ;; ;; Python, YAML, Heredoc seem to require that Org not format source code blocks
         ;; (setq org-src-preserve-indentation nil)
         (setq org-src-window-setup 'current-window)
         (setq org-structure-template-alist '(("C" . "comment")
                                              ("e" . "example")
                                              ("E" . "export")
                                              ("h" . "export html")
                                              ("l" . "export latex")
                                              ("'" . "quote")
                                              ("qp" . "src sparql")
                                              ("qq" . "src sql")
                                              ("S" . "src")
                                              ("sc" . "src conf")
                                              ("sg" . "src sql :product gsql")
                                              ("sj" . "src json")
                                              ("sJ" . "src javascript")
                                              ("sl" . "src emacs-lisp")
                                              ("sL" . "src lisp") ;; Common Lisp
                                              ("sm" . "src gfm") ;; Github-flavored markdown
                                              ("so" . "src org")
                                              ("sp" . "src python")
                                              ("sP" . "src jupyter-python")
                                              ("sq" . "src sql")
                                              ("sr" . "src R")
                                              ("sR" . "src jupyter-R")
                                              ("ss" . "src bash")
                                              ("st" . "src text")
                                              ("sy" . "src yaml"))))

     #+end_src
*** Report on tangling when buffer is narrowed
    When one means to french fry (tangle whole file) but pizzas instead (tangle narrowed
    file) one may have a bad time.  But it's often intended - so don't stop, prompt and
    annoy - simply report - result: joy.
    #+begin_src emacs-lisp
      (add-hook 'org-babel-tangle-finished-hook
                (lambda () (interactive)
                  (when (buffer-narrowed-p)
                    (message "Blocks were tangled from narrowed buffer. Check *Messages* for count." (buffer-name)))))
    #+end_src
** Org tidy
   hides property drawers - good for use when presenting
   #+begin_src emacs-lisp
     (use-package org-tidy :straight t)
   #+end_src
** Org num mode
   #+begin_src emacs-lisp :tangle no
     ;; for use with org-num-mode
     (defun org-num-skip-top-level-format (numbering)
       "Number from subtree display function.
     NUMBERING is a list of numbers."
       (concat (mapconcat #'number-to-string (cdr numbering) ".") " "))
     (setq org-num-format-function 'org-num-skip-top-level-format)
   #+end_src
** Org Superstar - appearance of headers
   #+begin_src emacs-lisp
     (use-package org-superstar :straight t
       :hook
       (org-mode . org-superstar-mode))
   #+end_src
** Org-mode hook
   :PROPERTIES:
   :ID:       c1b7906b-4539-4cb7-94d5-285b5d17c404
   :END:
   On =auto-fill-mode=: I prefer to have it on, but hate when
   creating links and having it wrap while typing the description.
   For this reason, I want to get in the habit of only adding links
   using =C-c C-l= (=org-insert-link=)

   #+begin_src emacs-lisp
     (add-hook 'org-mode-hook
           (lambda ()
             ;; (auto-fill-mode 1) ;; experiment with visual-line <2023-09-30 Sat>
             (highlight-regexp ":tangle no" 'hi-pink)
             (highlight-regexp ":tangle /tmp/intothevoid.el" 'hi-aquamarine)
             ;; (org-modern-mode 1)
             (setq org-hide-leading-stars t
                   abbrev-mode 1
                   org-use-property-inheritance t
                   org-link-search-must-match-exact-headline nil
                   ;; org-defkey org-mode-map [(control tab)] 'org-next-link
                   org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)
             ;; steal back my keys
             (org-defkey org-mode-map [home] 'beginning-of-buffer)
             (org-defkey org-mode-map [end] 'end-of-buffer)
             ;; 	    ;; (local-set-key (kbd "C-c TAB") 'org-next-link)
             ;; 	    ;; (local-set-key (kbd "S C-c TAB") 'org-previous-link)
             ;; 	    (abbrev-mode 1)
             ;; 	    ;; set sub/superscript interpretation OFFFFFFOOOFFF
             ;; 	    (setq org-use-sub-superscripts nil)
             (setq org-catch-invisible-edits 'show-and-error )))
   #+end_src
** Org tree to indirect
   This useful feature is hampered by poor naming of the resulting buffer, making it very
   difficult to know whether you are editing the original buffer or the created indirect
   buffer.

   There are no user variables that influence the indirect buffer naming, and no hooks
   defined for any function related to =org-tree-to-indirect-buffer=

   It therefore seems the only way to affect it is to advise a function.
   #+begin_src emacs-lisp
     (defun gjg/rename-org-indirect-buffer (orig-fun &rest arg)
       (rename-buffer (concat "INDIRECT-" (buffer-name))))

     (advice-add 'org-tree-to-indirect-buffer :after 'gjg/rename-org-indirect-buffer)


   #+end_src
** Blogs - linking and image additions
   For blogging especially, we want to quickly add web links and images.  2 packages from
   m?elpa help here
   #+begin_src emacs-lisp :tangle no
     (use-package org-cliplink :straight t)
     (use-package org-download :straight t)
   #+end_src

   And here's a handy keyboard macro =gjg/url-grab-cliplink=

   Assume point is in an Org file, and there are two windows in the current frame *and*
   the other window is a Web browser (this only works in EXWM!).  Go to the browser
   window, copy the URL, then use =org-cliplink= at the starting point in the original Org window.

   #+begin_src emacs-lisp :tangle no
   (fset 'gjg/url-grab-cliplink
   (kmacro-lambda-form [?\C-x ?o ?\C-l ?\M-w tab ?\C-x ?o ?\M-x ?o ?r ?g ?- ?c ?l ?i ?p ?l ?i ?n ?k return] 0 "%d"))
   #+end_src

** Capture Templates
*** Functions to support capture templates
**** Bring in nicely formatted links to be used in the phone log capture template
      These entries are in a table in each customer engagement Org file named =people=

      #+begin_src emacs-lisp
        (defun gjg/annotate-person (s)
          "Provide annotations for completing-read using the data in a \"person\" table as used in my work files"
          (let ((item (assoc s minibuffer-completion-table)))
            (when item (concat
                        (string-pad "" (- 40 (string-width (nth 0 item) )))
                        (nth 2 item)
                        (if (string-empty-p (nth 4 item)) "" (concat " (" (nth 4 item) ")"))
                        ))))

        (defun gjg/add-person-from-table (table)
          "Add person from table to an Org unordered list - used with phone log capture template"
          (interactive)
          (let* ((marginalia-align-offset 80)
                 (completion-extra-properties '(:annotation-function gjg/annotate-person))
                 (myperson (assoc (completing-read "Person: " table) table))
                 (myname (nth 0 myperson))
                 (title (nth 2 myperson))
                 (linkedin (nth 1 myperson))
                 (company (nth 4 myperson))
                 (location (nth 3 myperson)))

            ;; Name Title (Company) Location
            (format "+ %s - %s %s - %s"
                    (if (string-empty-p linkedin)
                        myname
                      (concat "[[" linkedin "][" myname "]]"))
                    title
                    (if (string-empty-p company)
                        ""
                      (concat "(" company ")"))
                    location)))
      #+end_src
**** Create new blog post file for blog capture
    #+begin_src emacs-lisp
      ;; *** Org capture
      ;; taken from StackOverflow answer https://stackoverflow.com/questions/11902620/org-mode-how-do-i-create-a-new-file-with-org-capture
      ;; (defun capture-blog-filename (path)
      (defun safe-blog-filename ()
        (let ((thedate (org-read-date nil nil nil "Date of post: "))
              (name (read-string "Blog post title: ")))
          (setq gjg/blogpost-title name)
          (expand-file-name (format "%s-%s.org"
                                    (format-time-string "%Y-%m-%d")
                                    (downcase
                                     (replace-regexp-in-string "-+$" ""
                                                               (replace-regexp-in-string "[^[:alnum:]]+" "-"
                                                                                         (replace-regexp-in-string "[[:punct:]]" "" name)))))
                            "~/projects/blogs/hypecyclist/content/post/"
                            )))
    #+end_src
*** Variables and hook setup
    I want to always be prompted to refile my corporate phone log - so I remap =C-c C-c=
    for only that capture template.
    #+begin_src emacs-lisp
      (setq org-default-notes-file "~/projects/notes.org")
      ;; (with-eval-after-load 'org-capture
      ;;   ;; (add-hook 'org-capture-mode-hook 'turn-on-auto-fill)
      ;;   (add-hook 'org-capture-mode-hook
      ;;             (lambda ()
      ;;               (let ((mykey (plist-get org-capture-plist :key)))
      ;;                 (if (string= "p" mykey )
      ;;                     (define-key org-capture-mode-map (kbd "C-c C-c") 'org-capture-refile)
      ;;                   (define-key org-capture-mode-map (kbd "C-c C-c") 'org-capture-finalize))))))
      (define-key global-map "\C-cc" 'org-capture)
      (setq org-capture-templates nil) ; initialize to nil prior to grand setup below
    #+end_src

*** Template definitions
   + First set up org-protocol (require the library) prior to using the related
     capture templates.

     If on a system with no =emacsclient= binary - such as Chrome OS - consider using the JS clip
     extension from ChromeOS.

   #+begin_src emacs-lisp
     (when (executable-find "emacsclient")
       (require 'org-protocol))
   #+end_src
**** Blog post
     Start a new blog post for hypecyclist.org using my default Hugo template
     #+begin_src emacs-lisp
       (push
        '("b" "Blog post" plain
                     (file safe-blog-filename)
                     (file "~/.emacs.d/hugo-default-blog.tmpl")
                     :jump-to-captured t)
        org-capture-templates)
     #+end_src

**** Add items to a/the inbox - GTD style
     #+begin_src emacs-lisp
       (push
        '("i" "inbox" entry
          (file "~/projects/private-orgmode/inbox.org")
          "* TODO %?\n  :LOGBOOK:\n  CREATED: %U\n  :END:")
        org-capture-templates
        )
     #+end_src

**** Phone/meeting/task - the heart of it all
     #+begin_src emacs-lisp :tangle no
       (defun gjg/phone-meeting-template ()
         "Org capture template function for call/meeting logs.
       Pull in all customers from active engagements! "
         (format "* %%t %%^{type|%s} with %%^{with|%s}: %%^{subject|%s}
         %%i
         + Team: GG and %%?
           \#+begin_src emacs-lisp :var table=people :results append raw :exports results :eval never-export
            (gjg/add-person-from-table table)
           \#+end_src
       ,** Notes
         +
       ,** Next steps
       "
                 "Call|Meeting|Task"
                 (concat "Solutions Team|SE Team|PS|Marketing|Sales|Engineering|Product|"
                         (s-join "|"
                                 (mapcar #'org-get-title (gjg/get-work-agenda-files))))
                 "Sync-up|Stand-up|Presentation|Intro|Biweekly Services Engagement Review|Weekly|Weekly cadence|Working session"))

       (push
        '("p" "Phone/Meeting" entry
          (file+headline gjg/employer-org-file "Calls and Meetings")
          (function gjg/phone-meeting-template)
          :prepend t :clock-in t :clock-keep t :jump-to-captured t) org-capture-templates)
     #+end_src

**** Clock in to a new work "t"ask
     #+begin_src emacs-lisp :tangle no
       (push
        '             ("t" "Task - clock in using work file" entry
                       (file+headline gjg/employer-org-file "Tasks")
                       "* TODO %^{task description} \n  :LOGBOOK:\n  CREATED: %U\n  :END:\n%i\n   %?"
                       :prepend t :time-prompt nil :clock-in t :clock-keep t :jump-to-captured nil)
        org-capture-templates)
     #+end_src

**** Regular TODO
     #+begin_src emacs-lisp
       (push
        '             ("t" "Regular todo" entry
                       (file "~/projects/private-orgmode/inbox.org")
                       "* TODO %? \n  DEADLINE: %^T\n  :LOGBOOK:\n  CREATED: %U\n  :END:\n%i\n " :prepend nil :time-prompt t)
        org-capture-templates)
     #+end_src
** Exporting
*** General preferences
#+begin_src emacs-lisp
  (custom-set-variables '(org-export-with-sub-superscripts nil)
                        '(org-html-postamble nil))
#+end_src
*** Exporting Babel without evaluation
#+begin_src emacs-lisp
(custom-set-variables '(org-export-use-babel nil))
#+end_src
*** Export without theme interference
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2020-01-14 Tue 10:40]
	- State "DONE"       from "STARTED"    [2020-01-14 Tue 10:40]
	- State "STARTED"    from "TODO"       [2019-09-17 Tue 19:37]
	:END:
	Wrap advice around any means of exporting HTML, including export-and-open
#+begin_src emacs-lisp
  (use-package material-theme :straight t)
  (use-package ox-gfm :straight t)
  (use-package htmlize :straight t)
  ;; export to html - use light theme for export
  ;; tip o' the hat to legoscia https://github.com/legoscia/dotemacs/blob/master/dotemacs.org#theme-for-org-html-export
  (defvar my-org-html-export-theme (intern gjg/preferred-light-theme))
  (defun my-with-theme (orig-fun &rest args)
    (load-theme my-org-html-export-theme)
    (unwind-protect
        (apply orig-fun args)
      (disable-theme my-org-html-export-theme)))

  (with-eval-after-load "ox-html"
    (advice-add 'org-export-to-buffer :around 'my-with-theme)
    (advice-add 'org-export-to-file :around 'my-with-theme))
#+end_src
** Speed commands
   #+begin_src emacs-lisp
     (setq org-use-speed-commands t) ;; POWER USER BABY
     (add-to-list 'org-speed-commands
                  '("s" save-buffer))
     (add-to-list 'org-speed-commands
                  '("d" org-toggle-narrow-to-subtree))
     (setq org-speed-commands (delete '("a" . org-archive-subtree-default-with-confirmation) org-speed-commands))
   #+end_src

   The square bracket "show heading tidily" shortcuts can be used as a flexible
   slide show presentation.

   The OG functions from Dan Davison are now included here [[https://orgmode.org/worg/org-hacks.html#sec-1-3-2][Org ad hoc code, quick hacks and workarounds ≫ orgmode.org]]

   #+begin_src emacs-lisp :tangle no
     ;; DAN DAVISON nifty speed commands
     (defun ded/org-show-next-heading-tidily (&optional NO-NARROW)
       "Show next subtree, keeping other entries closed. Narrow to the subtree unless NO-NARROW is true."
       (interactive)
       (widen)
       (if (save-excursion (end-of-line) (outline-invisible-p))
           (progn (org-show-entry) (outline-show-children))
         (outline-next-heading)
         (unless (and (bolp) (org-at-heading-p))
           (org-up-heading-safe)
           (outline-hide-subtree)
           (error "Boundary reached"))
         (org-overview)
         (org-reveal t)
         (org-show-entry)
         (outline-show-children)
         (unless NO-NARROW (org-narrow-to-subtree))))

     (defun ded/org-show-previous-heading-tidily (&optional NO-NARROW)
       "Show previous subtree, keeping other entries closed. Narrow to the subtree unless NO-NARROW is true."
       (interactive)
       (widen)
       (let ((pos (point)))
         (outline-previous-heading)
         (unless (and (< (point) pos) (bolp) (org-at-heading-p))
           (goto-char pos)
           (outline-hide-subtree)
           (error "Boundary reached"))
         (org-overview)
         (org-reveal t)
         (org-show-entry)
         (outline-show-children)
         (unless NO-NARROW (org-narrow-to-subtree))))

     (add-to-list 'org-speed-commands
                  '("]" ded/org-show-next-heading-tidily))
     (add-to-list 'org-speed-commands
                  '("[" ded/org-show-previous-heading-tidily))
     ;; END DAN DAVISON nifty speed commands
   #+end_src
** Org Powerslides
   my extension to the Dan Davison show-blah-tidily
   #+begin_src emacs-lisp
     (load-file "~/projects/emacs/org-powerslides/org-powerslides.el")
   #+end_src
** Org Transclusion
   Super cool use found: put my very large People table from the main employer Org file,
   transclude it into the individual engagement / prospect files!

   Works fast, loads fast, pretty great
   #+begin_src emacs-lisp
     (use-package org-transclusion :straight t)
   #+end_src
** Org Agenda
*** Initialize Org Agenda
   #+begin_src emacs-lisp
     (require 'org-agenda)
     (setq org-agenda-custom-commands nil)
   #+end_src
*** Set up personal agenda files lists
    I keep one set of agenda files for personal / everyday use and another for work use.

    For work files, the rules are:
    + include the primary working file (e.g. mycompany.org.gpg)
    + include all all task files under the active engagements directory
      (e.g. ./mycompany/engagements/customer1/customer1.org.gpg)
    + Active task files are either any encrypted org file under engagements/ or the single
      unencrypted org file named for its containing directory
      (e.g. ./mycompany/engagements/customer2/customer2.org)
    + include the special case =inbox.org=

    #+begin_src emacs-lisp
      ;; Make sure we match encrypted files for Agenda
      ;; ref https://emacs.stackexchange.com/a/36543/418
      (unless (string-match-p "\\.gpg" org-agenda-file-regexp)
        (setq org-agenda-file-regexp
              (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?"
                                        org-agenda-file-regexp)))
      (global-set-key (kbd "C-c a") 'org-agenda)
      (setq gjg/org-agenda-directory "~/projects/private-orgmode/")
      (setq gjg/personal-org-agenda-files '("~/projects/private-orgmode/notes.org"
                                            "~/projects/private-orgmode/learning.org"
                                            "~/projects/private-orgmode/inbox.org"
                                            "~/projects/private-orgmode/someday.org"
                                            "~/projects/private-orgmode/projects.org"
                                            "~/projects/private-orgmode/habits.org"))
      (setq org-agenda-files gjg/personal-org-agenda-files)
      (add-to-list 'gjg/agenda-contexts-alist `(home ,gjg/personal-org-agenda-files))
      (add-to-list 'gjg/agenda-contexts-alist `(fitness ,(list "~/projects/private-orgmode/fitness/fitness.org")))
      (add-to-list 'gjg/agenda-contexts-alist `(notes ,(list "~/gregj-notes/" "~/gregj-notes/journals/")))
    #+end_src
*** Set up work agenda files lists
    #+begin_src emacs-lisp :tangle no
      ;; TODO add filter function to recurse only 1 level into engagements/ rather than use remove
      ;; add one "non-work" projects file to capture non-work scheduled and deadline tasks
      ;; (add-to-list 'engagement-files "~/projects/private-orgmode/projects.org" t)
      (defun gjg/get-work-agenda-files ()
        "Return list of work agenda files exculding archive/ dir.  Can be called in :scope param of clocktable"
        (let ((engagement-files '()))
          (dolist (file (directory-files-recursively (concat (f-dirname gjg/employer-org-file) "/engagements/")
                                                     "\\`[^.].*\\.org\\(\\.gpg\\)?\\'"))
            (let* ((dirname (file-name-directory file))
                   (basename (file-name-base file))
                   (dir (file-name-nondirectory (directory-file-name dirname))))
              (when (and (<= (length dir) (length basename))
                         (string= dir (substring basename 0 (length dir))))
                (setq engagement-files (cons file engagement-files)))))
          (add-to-list 'engagement-files gjg/employer-org-file t)
          (add-to-list 'engagement-files "~/projects/private-orgmode/inbox.org" t)))

      (add-to-list 'gjg/agenda-contexts-alist `(work ,(gjg/get-work-agenda-files)))

      (setq gjg/work-agenda-files (gjg/get-work-agenda-files))
      ;; Set agenda files to personal, override in work-related templates
    #+end_src

*** Set icons for agenda views
    These work by =category=
**** Resize icons to be used in agenda views
      Resize icons for use in agenda views to be square - helps with column alignment
      #+begin_src bash
        i=my-/where/ever/icon.png
        j=$(basename $i)
        convert -resize 512x512 $i -background transparent -gravity center -extent 512x512  ~/emacs/pixmaps/$j-512x512.png; done
      #+end_src
**** Set icon definitions by category
     #+begin_src emacs-lisp
       ;;(setq org-agenda-span 'day)
       ;;(setq org-agenda-skip-scheduled-if-done t)
       ;; (setq org-agenda-start-with-log-mode t)
       ;; (setq org-agenda-start-with-clockreport-mode nil)
       (setq org-agenda-category-icon-alist
             `(
               ("charity" "~/emacs/pixmaps/charity.png" nil nil :ascent center :height 48)
               ("coding" "~/emacs/pixmaps/math-function.png" nil nil :ascent center :height 48)
               ("emacs" "~/emacs/pixmaps/emacs-512x512.png" nil nil :ascent center :height 48)
               ("finances" "~/emacs/pixmaps/finances-512x512.png" nil nil :ascent center :height 48)
               ("fire" "~/emacs/pixmaps/fire.png" nil nil :ascent center :height 48)
               ("fitness" "~/emacs/pixmaps/fitness-heart-512x512.png" nil nil :ascent center :height 48)
               ("gwennie" "~/emacs/pixmaps/loon-512x512.png" nil nil :ascent center :height 48)
               ("ai"    "~/emacs/pixmaps/mindmap-icon-512x512.png" nil nil :ascent center :height 48)
               ("ideas" "~/emacs/pixmaps/mindmap-icon-512x512.png" nil nil :ascent center :height 48)
               ("creative" "~/emacs/pixmaps/creativity-4-512x512.png" nil nil :ascent center :height 48)
               ("inbox" "~/emacs/pixmaps/office-inbox-512x512.png" nil nil :ascent center :height 48)
               ("journal" "~/emacs/pixmaps/mindmap-icon-512x512.png" nil nil :ascent center :height 48)
               ("languages" ,(list (all-the-icons-fileicon "moment-tz" )) nil nil :ascent center :height 48)
               ("linux" "~/emacs/pixmaps/linux-color-512x512.png" nil nil :ascent center :height 48)
               ("music" "~/emacs/pixmaps/banjo-transparent-512x512.png" nil nil :ascent center :height 48)
               ("networking" "~/emacs/pixmaps/network-wired-512x512.png" nil nil :ascent center :height 48)
               ("notes" "~/emacs/pixmaps/mindmap-icon-512x512.png" nil nil :ascent center :height 48)
               ("social" "~/emacs/pixmaps/icon-social-events-512x512.png" nil nil :ascent center :height 48)
               ("Stardog" "~/emacs/pixmaps/stardog-logo-512x512.png" nil nil :ascent center :height 48)
               ("work-habit" "~/emacs/pixmaps/gtd-logo-2019-512x512.png" nil nil :ascent center :height 48)
               ;; ("inbox" ,(list (all-the-icons-material "inbox" )) nil nil :ascent center :height 48)
               ;; Customers / engagements
               ))
       (setq org-agenda-sticky t
             org-agenda-fontify-priorities t
             org-agenda-hide-tags-regexp "noagenda"
             org-agenda-restore-windows-after-quit t
             org-agenda-entry-text-maxlines 10
             org-agenda-diary-file "~/projects/private-orgmode/diary.org"
             org-agenda-include-diary t
             org-special-ctrl-a/e t
             org-agenda-clockreport-parameter-plist '(:link t :maxlevel 99)
             org-cycle-separator-lines 1
             org-clock-history-length 12)

       (setq org-agenda-exporter-settings
             '((ps-number-of-columns 1)
               (ps-landscape-mode t)
               (org-agenda-add-entry-text-maxlines 10)
               (htmlize-output-type 'css)))

      #+end_src
**** Test icons for alignment and um .... prettiness
     Test the icons set in
     #+begin_src org :tangle /tmp/test-icons.org
       ,* Ohai
         Use this to check icons and alignment in a TODO agenda buffer narrowed to this file

       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: emacs
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: Stardog
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: notes
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: work-habit
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: linux
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: music
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: networking
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: languages
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: Chubb
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: john deere
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: PicPay
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: guidehouse
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: optum
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: inbox
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: social
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: fitness
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: gwennie
         :END:
       ,* TODO check a thing
         :PROPERTIES:
         :CATEGORY: finances
         :END:
     #+end_src
*** Custom Agenda definitions
**** Cross-context agendas
***** Basic Agenda with work habits added
     #+begin_src emacs-lisp :tangle no
       (add-to-list 'org-agenda-custom-commands
                    '("A" "Agenda + work habits"
                      (
                       (agenda "" ((org-agenda-span 'day)
                                   (org-agenda-sorting-strategy
                                    (quote ((agenda time-up priority-down tag-up))))
                                   ;; (org-agend
                                   a-category-filter-preset (list "-work-habit"))
                               (org-agenda-files (cons "~/projects/private-orgmode/work-habits.org" gjg/personal-org-agenda-files))
                               (org-deadline-warning-days 0)))
                      )) t)
     #+end_src
***** Notes/Roam/Denote TODOs
      TODO: make category section of agenda the value of keywords in the front matter
      #+begin_src emacs-lisp
        ;; for example, category would be "linux-steam-deck"
        ;; (mapconcat 'identity (mapcar #'substring-no-properties org-file-tags) "-")
        ;; (string-join (mapcar #'substring-no-properties org-file-tags) "-")
        ;; use just org files in the notes directory
        (add-to-list 'org-agenda-custom-commands '("n" . "Notes prefix key")) ; describe prefix
        (add-to-list 'org-agenda-custom-commands
                     '("na" "Notes agenda"
                       ((agenda "" (
                                    (org-agenda-files '("~/gregj-notes/" "~/gregj-notes/journals/"))
                                    (org-agenda-span 'week)
                                    )
                                ))
                       ) t)
        (add-to-list 'org-agenda-custom-commands
                     '("nr" "Zettelkastenistische REVIEW" tags "-reviewed-do_not_review"
                       ((org-agenda-files '("~/gregj-notes/" "~/gregj-notes/journals/"))
                        (org-agenda-overriding-header "Notes Review")
                        ;; (org-agenda-prefix-format "")
                        )))
        (add-to-list 'org-agenda-custom-commands
                     '("nt" "Zettelkastenistische Note TODOs" todo ""
                       ((org-agenda-files '("~/gregj-notes/" "~/gregj-notes/journals/"))
                        (org-agenda-overriding-header "TODO items from Zettelkasten/Denote/Roam notes")
                        ;; (org-agenda-prefix-format "")
                        )))
      #+end_src
**** Work agendas
***** The big (W)ork agenda
       These views use the work files

       TODO  why does starting with clocktable and/or log-mode not work??
       #+begin_src emacs-lisp :tangle no
         (add-to-list 'org-agenda-custom-commands
                      '("W" "Work Agenda"
                        (
                         ;; Work / Laptop Habits section
                         ;; (agenda ""
                         ;;         ((org-agenda-files '("~/projects/private-orgmode/work-habits.org"))
                         ;;          (org-agenda-start-with-log-mode nil)
                         ;;          (org-agenda-start-with-clockreport-mode nil)
                         ;;          (org-agenda-overriding-header "Work/Laptop Morning Tasks")))
                         ;; Work agenda with clocked time
                         (agenda ""
                                 ((org-agenda-span 'day)
                                  (org-agenda-files (cons "~/projects/private-orgmode/work-habits.org" gjg/work-agenda-files ))
                                  (org-agenda-start-with-log-mode '(clock))
                                  (org-deadline-warning-days 2)
                                  (org-agenda-start-with-clockreport-mode t)
                                  (org-agenda-start-with-log-mode t)
                                  )
                                 )
                         ;; TODOs for Stardog and prospects/customers
                         (todo ""
                               ((org-agenda-span 'day)
                                (org-agenda-files gjg/work-agenda-files)
                                (org-agenda-overriding-header "Stardog and customer TODOs")
                                (org-deadline-warning-days 21)
                                ))
                         ))
                      t)
       #+end_src
***** special filtering
      #+begin_src emacs-lisp
        (add-to-list 'org-agenda-custom-commands '("p" . "Priority filtered TODO"))
        (add-to-list 'org-agenda-custom-commands
                     '("pa" "#A Priority" todo ""
                       ((org-agenda-entry-types '(:scheduled))
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\\[#A\\]")))))
        (add-to-list 'org-agenda-custom-commands
                     '("pb" "#B Priority" todo ""
                       ((org-agenda-entry-types '(:scheduled))
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\\[#B\\]")))))
        (add-to-list 'org-agenda-custom-commands
                     '("pc" "#C Priority" todo ""
                       ((org-agenda-entry-types '(:scheduled))
                        (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp "\\[#C\\]")))))

      #+end_src
**** Home based agendas
***** Fitness and @home
      #+begin_src emacs-lisp
        ;; TODO Filter on fitness tag
        (add-to-list 'org-agenda-custom-commands
                     '("f" "Fitness"
                       ((agenda "" (
                                    (org-agenda-span 'day)
                                    (org-agenda-files '("~/projects/private-orgmode/fitness/fitness.org")))))) t)
        (add-to-list 'org-agenda-custom-commands
                     '("h" "thing TODO at Home"
                       (
                        (agenda "" ((org-agenda-span 'day)
                                    (org-agenda-sorting-strategy
                                     (quote ((agenda time-up priority-down tag-up))))
                                    (org-agenda-category-filter-preset (list "-habits"))
                                    (org-agenda-files (cons "~/projects/private-orgmode/work-habits.org" gjg/personal-org-agenda-files))
                                    (org-deadline-warning-days 0)))
                        (tags-todo "+dailies+SCHEDULED<=\"<today>+1\"" ((org-agenda-files gjg/personal-org-agenda-files)))
                        (tags "reading")
                        (tags "writing")
                        (tags-todo "refile"))
                       ((org-agenda-tag-filter-preset '("-project" "-@office"))
                        )) t)

        (add-to-list 'org-agenda-custom-commands
                     '("i" "Inbox review"
                       ((todo "TODO"
                              ((org-agenda-overriding-header "Review and Refile")
                               (org-agenda-files '(,(concat gjg/org-agenda-directory "inbox.org"))))))) t)
      #+end_src
***** Started/Paused/Waiting personal tasks
      #+begin_src emacs-lisp
      ;; (add-to-list 'org-agenda-custom-commands
      ;; '("P" "Projects" tags "Project|project|PROJECT" ((org-use-tag-inheritance nil))))

      (add-to-list 'org-agenda-custom-commands
                   '("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil))))

      (add-to-list 'org-agenda-custom-commands
                   '("w" "Tasks waiting on something" tags "WAITING|PAUSED" ((org-use-tag-inheritance nil))))

      #+end_src
*** Agenda hooks setup
    #+begin_src emacs-lisp
      ;; org-agenda: some handy keys
      ;; you might also want to set:
      (setq org-agenda-skip-unavailable-files t)
      (add-hook 'org-agenda-mode-hook
                (lambda ()
                  ;; undo the horrendous "o" key binding (bound to 'delete-other-windows)
                  ;;       (local-unset-key "o")
                  ;; rebind to a sweet and beautiful function
                  (org-defkey org-agenda-mode-map "o" 'org-agenda-show)
                  (yafolding-mode 1)
                  ;; agenda lines get long with tags
                  (visual-line-mode -1)
                  (visual-fill-column-mode -1)
                  (setq-local truncate-lines t)
                  (local-unset-key "a") ;; don't let this accidentally archive a tree!
                  ;; "R" is used for clock report by default
                  ;; (define-key org-agenda-mode-map "R" 'org-agenda-refile)
                  (define-key org-agenda-mode-map "'" 'org-agenda-clockreport-mode)
                  (define-key org-agenda-mode-map  "g" 'org-agenda-redo) ;; instead of org-agenda-redo-all
                  ;; (define-key org-agenda-mode-map "h" 'org-habit-toggle-display-in-agenda)
                  ))
      (add-hook 'org-export-preprocess-hook
                (lambda ()
                  (org-dblock-update 2) ;; update all dynamic blocks in the buffer
                  ))
      ;; Function stolen from Bernt Hansen on gmane.emacs.orgmode: insert inactive time stamp for new entries

      (setq org-agenda-format-date
            (concat "%Y-%m-%d %a "
                    (make-string (- (window-width) 15) (string-to-char "_"))))

   #+end_src
*** Clock table
    #+begin_src emacs-lisp
      ;; First set clock summary to *not* show hours as days
      ;; ref: https://stackoverflow.com/a/54376827/457574
      (with-eval-after-load 'org-clock
        ;; (setq org-duration-format (quote h:mm)) ;; only in Org 9.1+
        (plist-put org-clocktable-defaults :fileskip0 t)
        (plist-put org-clocktable-defaults :emphasize t)
        (plist-put org-clocktable-defaults :link t)
        (plist-put org-clocktable-defaults :narrow '75!))
    #+end_src
*** Agenda context
    This is something to help separate work time.

    No dependency on Org or Org Agenda being loaded

    #+begin_src emacs-lisp
      ;; (let* ((thetime (decode-time))
      ;;        (dow (nth 6 thetime))
      ;;        (hour (nth 2 thetime)))
      ;;   (if (and (< dow 6) (> hour 7) (< hour 18))
      ;;       (gjg/select-agenda-context 'work)
      ;;     (gjg/select-agenda-context 'home)))
      (gjg/select-agenda-context 'home) ;; default to 'home context regardless
    #+end_src

** Tags/TODOs/Projects Oh My
   #+begin_src emacs-lisp
     (setq org-tag-persistent-alist
       '(("habit")
         ("billable")
         ("noexport" . ?x)
         ))
     (setq org-tag-alist '(("project" . ?p)
               ("processed" . ?.)
               ("NEXT" . ?n)
               ("noexport" . ?x)
               ("cloud" . ?c)
               (:startgroup . nil)
               ("@customer")
               ("@office" . ?o)
               ("@home" . ?h)
               ("@errands" . ?e)
               ("@happy-hour")
               (:endgroup . nil)
               ("maybe-someday" . ?m)
               ("writing" . ?w)
               ))
     ;; Projects are identified by a :Project: tag unless they are marked DONE;
     ;;   Any project must have one sub-task identified by :NEXT: to be considered un-stuck
     ;;   MAYBE: exclude special tags like Someday/Maybe
     (setq org-stuck-projects '("Project|project/-DONE"
                nil
                ("NEXT")
                ""))
     (setq org-columns-default-format "%TODO %CATEGORY %60ITEM(Task)%5Effort(Estim){:} %5CLOCKSUM(Clock) %SCHEDULED(Time) %DEADLINE")
     (setq org-todo-keywords (quote ((sequence "TODO(t)" "STARTED(s!)" "PAUSED(p!)" "|" "DONE(d!)")      ;; ordinary sequence is Todo -> Started -> Done
                     (sequence "WAITING(w@/!)" "MAYBE(m!)" "NEXT(n!)" "OPEN(O@)" "|" "CANCELLED(c@/!)" "SUBMITTED(S)") ;; "oddball" states that any task may be set to
                     ;; (sequence "QUOTE(q!)" "QUOTED(Q!)" "|" "APPROVED(A@)" "EXPIRED(E@)" "REJECTED(R@)")     ;; sequence for quotes
                     )))
     ;; (setq org-todo-keyword-faces
     ;;       '(("TODO"
     ;;          (:foreground "#ff39a3" :weight bold))
     ;;         ("STARTED" . "#E35DBF")
     ;;         ("CANCELLED" :foreground "green" :weight bold :strike-through t)
     ;;         ("PROPOSED" . "pink")
     ;;         ("PAUSED"  . "yellow")
     ;;         ("WAITING" . "yellow")))

     ;; (setq org-todo-state-tags-triggers
     ;;       (quote (("CANCELLED" ("CANCELLED" . t))
     ;; 	      ("WAITING" ("WAITING" . t) ("NEXT"))
     ;; 	      ("SOMEDAY" ("WAITING" . t))
     ;; 	      (done ("NEXT") ("WAITING"))
     ;; 	      ("TODO" ("WAITING") ("CANCELLED"))
     ;; 	      ("STARTED" ("WAITING") ("NEXT" . t)))))
     ;; Change task state to STARTED when clocking in
     (setq org-clock-in-switch-to-state "STARTED")

     (setq org-tags-exclude-from-inheritance '("Project" "project" "interview2"))
					     ;(setq org-tag-alist '(("project" . ?p)("car" . ?c)))
   #+end_src
** Refile
   I think the best approach here is to use =org-agenda-files= as the source for refile
   targets.  Then set =org-agenda-files= to whatever is appropriate for current context -
   i.e., work vs home

   Zettelkastenistische noten should *always* be available

   #+begin_src emacs-lisp
     ;; navigate to files using org-refile; use C-u C-c C-w
     (setq org-outline-path-complete-in-steps nil) ; use completion framework for quicker completion
     ;; Refile targets should be limited to org-agenda-files
     ;; TODO remove inbox.org based on absolute expanded path
     (setq org-refile-targets '((org-agenda-files :maxlevel . 2))
           org-refile-use-outline-path 'file
           org-refile-target-verify-function (lambda () (not (member "ARCHIVE" (org-get-tags)))))

     (defun gjg/org-refile-goto ()
       "Call org-refile with arg to visit an org-mode location. A convenience function to bind to a global key."
       (interactive)
       (org-refile 1))


   #+end_src

** Clocking time
*** Variables and keys
    Keep =org-clock-persist= unset (its default) to avoid opening files that may have had
    clock activity - the problem in my case is that many of those files are encrypted so I
    have to enter a pass phrase just to open nearly any Org mode file!  The problematic
    code is in the =org-clock= library:
    #+begin_src emacs-lisp :tangle no
      (defun org-clock-load ()
        "Load clock-related data from disk, maybe resuming a stored clock."
        (when (and org-clock-persist (not org-clock-loaded))
          (if (not (file-readable-p org-clock-persist-file))
          (message "Not restoring clock data; %S not found" org-clock-persist-file)
            (message "Restoring clock data")
            ;; Load history.
            (load-file org-clock-persist-file)
            (setq org-clock-loaded t)
            (pcase-dolist (`(,(and file (pred file-exists-p)) . ,position)
                   org-clock-stored-history)
          (org-clock-history-push position (find-file-noselect file)))
      ...
    #+end_src
    #+begin_src emacs-lisp
      (setq org-clock-persist nil
            org-duration-format 'h:mm ; format of clocktable - show hours, not days
            org-clock-string-limit 60 ; truncate very long clocked tasks
            org-clock-report-include-clocking-task t
            org-read-date-prefer-future 'time)
      ;; (org-clock-persistence-insinuate)
      ;; make the clock jump key global!
      (global-set-key (kbd "s-j") 'org-clock-goto)
    #+end_src
*** Start nag timer during work hours
    #+begin_src emacs-lisp :tangle no
      (let* ((datetime (decode-time))
              (hour (nth 2 datetime))
              (dow  (nth 6 datetime)))
        (if (and (> dow 0) (< dow 6) (> hour 7) (< hour 18))
            (gjg/nag)
          (gjg/cancel-nag)))
    #+end_src
** Behavior
   #+begin_src emacs-lisp
     (setq org-adapt-indentation t
           org-export-with-toc nil
           org-fontify-done-headline nil ; do *not* fontify entire line of DONE headlines
           org-agenda-window-setup 'current-window ; make c-y pay attention to current level
           org-yank-adjusted-subtrees t
           ;; org-yank-folded-subtrees nil
           org-insert-heading-respect-content t    ; new headings go AFTER CONTENT, even from the middle of content area
           org-indirect-buffer-display 'other-window
           org-reverse-note-order t                ; notes go at the top
           org-return-follows-link t
           org-treat-S-cursor-todo-selection-as-state-change nil ; use S-arrow without having to log state change!
           org-log-into-drawer t
           org-export-use-babel nil
           org-export-with-sub-superscripts nil
           org-html-extension "org.html"
           org-replace-disputed-keys t)
     ;; delete the seleted region when something is typed - don't do that
     (delete-selection-mode -1)

     ;; show only current/today's/all time in the clock task modeline
     ;; this SHOULD be settable on a file basis by using property CLOCK_MODELINE_TOTAL
     (setq org-clock-mode-line-total 'today)
     (setq org-loop-over-headlines-in-active-region t)
   #+end_src
* Learning / researching / knowledge flow

** Flaschcards
   Enable when in frequent use
  #+begin_src bash
    sudo apt-get -y install gawk
  #+end_src
  #+begin_src emacs-lisp
    ;; (straight-use-package 'hydra)
    (use-package hydra :straight t)
    (use-package org-fc :straight t
      :defer nil
      :load-path "~/projects/emacs/org-fc/"
      :custom (org-fc-directories '("~/projects/private-orgmode/"))
      :config
      (require 'org-fc-hydra)
      (require 'org-fc-keymap-hint)
      (global-set-key (kbd "C-c f") 'org-fc-hydra/body)
      (add-hook 'org-fc-after-flip-hook 'org-fold-show-subtree))
    (define-key org-fc-review-rate-mode-map (kbd "1") 'org-fc-review-rate-easy)
    (define-key org-fc-review-rate-mode-map (kbd "2") 'org-fc-review-rate-good)
    (define-key org-fc-review-rate-mode-map (kbd "3") 'org-fc-review-rate-hard)
    ;; will adding tab conflict with the Org Mode tab?
    (define-key org-fc-review-flip-mode-map (kbd "TAB") 'org-fc-review-flip)
  #+end_src
** GPTEL - LLMs in Markdown and Org Mode

  + [X] TODO: add completing-read with marginalia for =gptel-directives= (named prompts)
  + [ ] TODO: indicate system prompt(s) and model(s) used in *gpt-mode* buffer
  + ref: [[https://github.com/karthink/gptel][karthink/gptel: A no-frills ChatGPT client for Emacs ≫ github.com]] This package
    has it all: auth-source, Org Mode buffers, Markdown mode or other-mode buffers if
    you prefer, named prompts for special occasions, a transient mode interface, model
    choice, temperature settings, streaming support, multiple APIs, multiple chat
    sessions, an active GitHub. A dedication to keeping everything in plain text
    (without metadata markup)

*** Pricing
    updated [2024-03-24]
    | Provider    | Model               | Input/M tokens | Output/M tokens | Notes                   | ref               |
    |-------------+---------------------+----------------+-----------------+-------------------------+-------------------|
    | Anthropic   | claude-haiku        | $0.25          | $1.25           |                         | [[https://console.anthropic.com/settings/plans][Anthropic Console]] |
    |             | claude-sonnet       | $3.00          | $15.00          |                         |                   |
    |             | claude-opus         | $15.00         | $75.00          | yikes                   |                   |
    |-------------+---------------------+----------------+-----------------+-------------------------+-------------------|
    | OpenAI      | gpt-4-0125-preview  | $10            | $30             |                         | [[https://openai.com/pricing][Pricing]]           |
    |-------------+---------------------+----------------+-----------------+-------------------------+-------------------|
    | Together.ai | 41B-70B chat models | $.90 (in+out)  |                 | nothing cheaper around! | [[https://www.together.ai/pricing][Together Pricing]]  |

*** Load gptel using straight.el with my fork
   Because I want to augment, tweak and contribute to this package, I tell
   =straight-use-package= to pull from my fork and my =gregoryg= branch.

   #+begin_src emacs-lisp
     (straight-use-package
      '(gptel :type git :host github :repo "karthink/gptel"
              :fork (:host github :branch "gregoryg" :repo "gregoryg/gptel")))
     (setq gptel-default-mode 'org-mode
           gptel-expert-commands t
           gptel--debug nil)
     ;; defer nothing
     (require 'gptel)
     (require 'gptel-curl)
     (require 'gptel-transient)
   #+end_src
*** SIDE JOURNEY: keep track of LLM model charateristics and location somehow
    | model family | model name                    | ollama              | together.ai                             | tokens   | pricing | ref                                                         |
    |--------------+-------------------------------+---------------------+-----------------------------------------+----------+---------+-------------------------------------------------------------|
    | Llama2       | CodeLlama-34b-Instruct        |                     | togethercomputer/CodeLlama-34b-Instruct |          | .776/1M | https://about.fb.com/news/2023/08/code-llama-ai-for-coding/ |
    |              | CodeLlama-7b                  | codellama:7b        |                                         |          |         | https://ollama.ai/library/codellama                         |
    | Mistral      | mistral-7b                    | mistral:7b-instruct |                                         |          |         |                                                             |
    |              | yarn-mistral 64 or 128K token | yarn-mistral:7b-64k |                                         | 64K,128K |         |                                                             |
    |              | Mixtral-8x7B-Instruct         | mixtral:instruct    | mistralai/Mixtral-8x7B-Instruct-v0.1    |          | .6/1M   | https://huggingface.co/mistralai/Mixtral-8x7B-Instruct-v0.1 |
    | Phi          |                               |                     |                                         |          |         |                                                             |
*** Create custom Together.AI backend
    This makes use of the [[https://docs.together.ai/docs/openai-api-compatibility][OpenAI-compatible API]], which makes the backend generation super simple!

     #+begin_src emacs-lisp
       (gptel-make-openai ; but for Togeher.AI compatible API
        "together.ai"
        :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key )))))
        :key gptel-api-key
        :stream nil
        :host "api.together.xyz"
        :protocol "https"
        :endpoint "/v1/chat/completions"
        :models '("codellama/CodeLlama-70b-Instruct-hf"
                  "tiiuae/falcon-40b-instruct"
                  "codellama/CodeLlama-34b-Instruct-hf"
                  "mistralai/Mixtral-8x7B-Instruct-v0.1"
                  "mistralai/Mixtral-8x22B-Instruct-v0.1"
                  "meta-llama/llama-2-70b-chat-hf"
                  "meta-llama/Llama-3-70b-chat-hf"
                  "microsoft/WizardLM-2-8x22B"
                  ))
     #+end_src
*** Configure Anthropic Claude

      #+begin_src emacs-lisp
        (gptel-make-anthropic "Anthropic"
          :stream nil
          :key gptel-api-key)
      #+end_src

*** Optionally modify OpenAI setup

    If OpenAI makes new models available, the package may lag behind - so specify what models you want to use here
     #+begin_src emacs-lisp :tangle no
       (gptel-make-openai
        "ChatGPT"
        :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key)))))
        :key gptel-api-key
        :stream nil
        :models '(
                  "gpt-3.5-turbo"
                  "gpt-3.5-turbo-16k"
                  "gpt-4"
                  "gpt-4-turbo-preview"))
     #+end_src
*** Add Ollama backend if Ollama API server is accessible
    This queries all installed models

     #+begin_src emacs-lisp
       ;; Use netcat to assure API port is open
       (setq gjg/ollama-api-endpoint "http://172.16.17.77:11434")
       (defun gjg/get-ollama-models ()
         "Return a list of Ollama models from the API, or nil if the API is not available."
         (when-let*
             ((url (url-generic-parse-url gjg/ollama-api-endpoint))
              (host (url-host url))
              (port (url-port url))
              (maybe-ollama-models (s-split "\n"
                                            (shell-command-to-string (concat "curl -s --connect-timeout 0.5 '"
                                                                             gjg/ollama-api-endpoint "/api/tags' | jq -r '.models[].name'"))))
              (my-ollama-models (seq-filter (lambda (s) (not (string= s "")))
                                            maybe-ollama-models)))
           (gptel-make-ollama
            "Ollama"
            :host (concat host ":" (number-to-string port))
            :models my-ollama-models
            :stream nil)
           my-ollama-models))

       ;; set globally, as ollama-models is relevant to more than gptel
       (setq ollama-models (gjg/get-ollama-models))

       (unless ollama-models
         (setq gptel--known-backends
               (assoc-delete-all "Ollama" gptel--known-backends #'equal)))
     #+end_src
*** Add Ollama as OpenAI API
    Ollama supports OpenAI-compatible API for LLMs as of [2024-02-13]

    So let's use that
    #+begin_src emacs-lisp
      (when ollama-models  ;; set in previous code
        (gptel-make-openai ; but for Ollama's newer compatible API
            "ollama-compatible"
          ;; :header (lambda () `(("Authorization" . ,(concat "Bearer " (gptel--get-api-key )))))
          ;; :key gptel-api-key
          :stream t
          :host "172.16.17.77:11434"
          :protocol "http"
          :endpoint "/v1/chat/completions"
          :models ollama-models))
    #+end_src
*** Add Google Gemini
    + [[https://aistudio.google.com/app/apikey][API keys ≫ aistudio.google.com]]
    #+begin_src emacs-lisp
      (gptel-make-gemini
          "google-gemini"
        :stream nil
        :key 'gptel-api-key
        :models '("gemini-1.0-pro"))
    #+end_src
*** Load my custom system prompts (directives)
    This makes use of my AIPIKHAL package (AI Prompts I Have Known And Loved)
    #+begin_src emacs-lisp
      ;; Use the system prompt builder function
      (let ((build-directives-fun "~/projects/ai/AIPIHKAL/gptel-build-directives.el"))
        (when (f-exists-p build-directives-fun)
          (load build-directives-fun)
          ;; (custom-set-variables '(gptel-directives
          (setq gptel-directives
                (gjg/gptel-build-directives
                 "~/projects/ai/AIPIHKAL/system-prompts/"))))
    #+end_src
*** And my supplementos
**** Functions to use in hooks
***** Return Gptel backend + model
      I find it useful to indicate model and provider service (OpenAI, ollama, together.ai etc) at the beginning of each LLM response.
      #+begin_src emacs-lisp
        (defun gjg/gptel-backend-and-model ()
          "Return gptel backend and model (if any)."
          (let ((backend (if  (boundp 'gptel-backend)  (aref gptel-backend 1)))
                (model (if  (boundp 'gptel-model) gptel-model)))
            (format "(%s %s)" backend model)))
      #+end_src
***** Insert backend+model as first string in a response buffer
      This function is added as a hook to use with non-chat buffers.  In my org-mode chat buffers, I handle the model attribution differently (as part of my markdown->org function).
      #+begin_src emacs-lisp
        (defun gjg/gptel-insert-model-in-non-gptel-buffers ()
          "This function will add the backend and model in the \"dynamic\" buffers, not in dedicated chat buffers.
        To be used in `gptel-pre-response-hook'."
          (unless (member 'gptel-mode local-minor-modes)
            (goto-char (point-max))
            (insert (format "\n%s: " (gjg/gptel-backend-and-model)))
            (goto-char (point-max))))
        (add-hook 'gptel-pre-response-hook 'gjg/gptel-insert-model-in-non-gptel-buffers)
      #+end_src
**** Convert Markdown LLM responses to Org Mode using Pandoc
     This ultimately replaces the Markdown -> Org Mode conversion built in to =gptel=

     #+begin_src emacs-lisp
       ;; pandoc -f gfm -t org|sed '/:PROPERTIES:/,/:END:/d'

       (defun gjg/gptel--convert-markdown->org (str)
         "Convert string STR from markdown to org markup using Pandoc.
         Remove the property drawers Pandoc insists on inserting for org output."
         ;; point will be at the last user position - assistant response will be after that to the end of the buffer (hopefully without the next user prompt)
         ;; So let's
         (interactive)
         (let* ((org-prefix (alist-get 'org-mode gptel-prompt-prefix-alist))
                (shift-indent (progn (string-match "^\\(\\*+\\)" org-prefix) (length (match-string 1 org-prefix))))
                (lua-filter (when (file-readable-p "~/.config/pandoc/gfm_code_to_org_block.lua")
                              (concat "--lua-filter=" (expand-file-name "~/.config/pandoc/gfm_code_to_org_block.lua"))))
                (temp-name (make-temp-name "gptel-convert-" ))
                (sentence-end "\\([.?!
         ]\\)"))
           ;; TODO: consider placing original complete response in the kill ring
           ;; (with-temp-buffer
           (with-current-buffer (get-buffer-create (concat "*" temp-name "*"))
             (insert str)
             (write-region (point-min) (point-max) (concat "/tmp/" temp-name ".md" ))
             (shell-command-on-region (point-min) (point-max)
                                      (format "pandoc -f gfm -t org --shift-heading-level-by=%d %s|sed '/:PROPERTIES:/,/:END:/d'" shift-indent lua-filter)
                                      nil ;; use current buffer
                                      t   ;; replace the buffer contents
                                      "*gptel-convert-error*")
             (goto-char (point-min))
             (insert (format "%sAssistant %s: \n"
                             (alist-get 'org-mode gptel-prompt-prefix-alist)
                             (gjg/gptel-backend-and-model)))
             (goto-char (point-max))
             (buffer-string))))

       (defun gjg/gptel-convert-org-with-pandoc (content buffer)
         "Transform CONTENT acoording to required major-mode using `pandoc'.
          Currenly only `org-mode' is supported
          This depends on the `pandoc' binary only, not on the  Emacs Lisp `pandoc' package."
         (pcase (buffer-local-value 'major-mode buffer)
           ('org-mode (gjg/gptel--convert-markdown->org content))
           (_ content)))

       (custom-set-variables '(gptel-response-filter-functions
                               '(gjg/gptel-convert-org-with-pandoc)))
     #+end_src
**** Make an annotated completing-read function to select directives
     #+begin_src emacs-lisp
       (defun gjg/gptel--annotate-directives (s)
         "Make the directives selection look fancy."
         (let* ((item (assoc (intern s) minibuffer-completion-table))
                (desc (s-truncate 40 (nth 1 item)))
                (prompt (s-truncate 80 (s-replace "\n" "\\n" (nth 2 item)))))
           (when item (concat
                       (string-pad "" (- 40 (string-width s)))
                       desc
                       (string-pad "" (- 55 (string-width desc)))
                       prompt
                       ))))

       (defun gjg/gptel-select-system-prompt (&optional directive-key)
         "Set system message in local gptel buffer to directive/prompt indicated by DIRECTIVE-KEY."
         (interactive)
         (let* ((marginalia-align-offset 80)
                (completion-extra-properties '(:annotation-function gjg/gptel--annotate-directives))
                (directive-key (or directive-key
                                   (intern
                                    (completing-read
                                     ;; "New directive: "
                                     (format "Current prompt %s: "
                                             (truncate-string-to-width gptel--system-message 90 nil nil (truncate-string-ellipsis) ))
                                     gptel-directives
                                     nil ;; predicate/filter
                                     nil ;; do not require a match - allow custom prompt
                                     nil ;; no initial input
                                     nil ;; no history specified
                                     "default" ;; default value if return is nil
                                     )))))
           (setq-local gptel--system-message (nth 2 (assoc directive-key gptel-directives)))))
     #+end_src
**** Possibly useful function: insert cleaned text from URL into buffer
     #+begin_src emacs-lisp
       (defun gjg/insert-clean-website-text (url)
         "Run a shell command to return clean body text from the given URL."
         (interactive)
         (if (executable-find "text-from-url.py")
             (insert (shell-command-to-string (concat "text-from-url.py " url)))
           (message "Command not found: text-from-url.py")
           )
         )
     #+end_src

** Vertico, anyone?
   #+begin_src emacs-lisp
     (use-package vertico :straight t)
   #+end_src
** Language Translation
   #+begin_src emacs-lisp
     (use-package google-translate :straight t)
     ;; "smooth" UI to save a keystroke or two
     (setq google-translate-translation-directions-alist
           '(("es" . "en")
             ("en" . "es")
             ))
   #+end_src
** E-books in Epub format
   #+begin_src emacs-lisp
     (use-package nov :straight t)
     (setq nov-text-width t
           visual-fill-column-center-text t)
     (add-to-list 'auto-mode-alist '("\\.epub$" . nov-mode))

     (defun gjg/nov-mode-buffer-setup ()
       "Use with `nov-mode-hook' to provide a lovely reading experience."
       (setq-local nov-text-width t
                   visual-fill-column-center-text t)
       (gjg/enable-visual-line-with-fill))
     (add-hook 'nov-mode-hook 'gjg/nov-mode-buffer-setup)
   #+end_src
* Final steps
#+begin_src emacs-lisp
(shell (get-buffer-create "sh1"))
#+end_src
