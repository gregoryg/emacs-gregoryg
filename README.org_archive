#    -*- mode: org -*-


Archived entries from file /home/gregj/emacs-gregoryg/README.org


* Org Roam UI
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-08-24 Wed 19:24
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Org mode stuff/Org Roam - experimental - and currently off/Visualizations of the graph
  :ARCHIVE_CATEGORY: README
  :END:
  #+begin_src emacs-lisp
    (use-package org-roam-ui
      :straight t
      ;; (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
      ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
      ;;         a hookable mode anymore, you're advised to pick something yourself
      ;;         if you don't care about startup time, use
      ;;  :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))
  #+end_src

* Org Roam - experimental - and currently off
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-08-24 Wed 20:15
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Org mode stuff
  :ARCHIVE_CATEGORY: README
  :END:
** Configuration and startup
#+begin_src emacs-lisp :tangle no
  (use-package org-roam
    :straight t
    :hook
    (after-init . org-roam-mode)
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/projects/private-orgmode/roam-notes")
    (org-roam-completion-everywhere t)
    ;; :bind (:map org-roam-mode-map
    ;;             (("C-c n l" . org-roam)
    ;;              ("C-c n f" . org-roam-find-file)
    ;;              ("C-c n g" . org-roam-show-graph))
    ;;             :map org-mode-map
    ;;             (("C-c n i" . org-roam-insert)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           )
    :config
    (org-roam-setup)
    )
#+end_src
** Org Roam Capture templates
   Let's leave the default one alone for now - make a new 'g'reg template
   #+begin_src emacs-lisp :tangle no
     (require 'org-roam)
     (push
      '("g" "greg" plain "%?" :target
        (file+head "${slug}.org" "#+title: ${title}") :unnarrowed nil)
      org-roam-capture-templates)
   #+end_src
** Immediate thing in video
   Ref: comment by Umar Ahmad in [[https://www.youtube.com/watch?v=AyhPmypHDEw][Getting Started with Org Roam - Build a Second Brain in Emacs - YouTube]]
   #+begin_src emacs-lisp :tangle no
     ;; To get the old "immediate" insert you can add the following in your config:
     (defvar org-roam-capture-immediate-template
       (append (car org-roam-capture-templates) '(:immediate-finish t)))
     (defun org-roam-insert-immediate (arg &rest args)
       (interactive "P")
       (let ((args (push arg args))
             (org-roam-capture-templates (list org-roam-capture-immediate-template)))
         (apply #'org-roam-node-insert args)))
     ;; And then bind `org-roam-insert-immediate` to a keybinding.
   #+end_src
** Visualizations of the graph
   org-roam-server only worked on v1 of org-roam.

* Microsoft Windows things
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:29
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Greg's customizations!
  :ARCHIVE_CATEGORY: README
  :END:
** Printing
    #+begin_src emacs-lisp :tangle no
;; **** Windows printing that relies on ghostscript and gsview

(defcustom gjg/gsprint "c:/Program Files/Ghostgum/gsview/gsprint.exe"
  "Path to gsprint.exe: usually in Program Files or Program Files (x86)"
  :group 'gjg
  :type 'string)

(when (and (string= (window-system) "w32") (file-exists-p gjg/gsprint))
  (progn
    ;;  Windows printer
    (setq-default ps-lpr-command (expand-file-name gjg/gsprint))
    (setq-default ps-printer-name t)
    (setq-default ps-printer-name-option nil)
    (setq ps-lpr-switches '("-query")) ; show printer dialog
    (setq ps-right-header '("/pagenumberstring load" ps-time-stamp-mon-dd-yyyy))))

    #+end_src
** Info on Windows
   #+begin_src emacs-lisp :tangle no
     (when  (eq window-system 'w32)
       (progn
         (setq Info-directory-list Info-default-directory-list)
         (setq Info-additional-directory-list '("c:/emacs/share/info"))))
   #+end_src

** File opens
   #+begin_src emacs-lisp :tangle no
     (when (eq window-system 'w32)
       (setq w32-get-true-file-attributes nil)
       (remove-hook 'find-file-hook 'vc-find-file-hook))
   #+end_src

* Desktop save
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:30
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Greg's customizations!
  :ARCHIVE_CATEGORY: README
  :END:
  TODO: Does Desktop mode really mess with themes? it seems it tries to restore pieces of previous theme
  #+begin_src emacs-lisp :tangle no
    (desktop-save-mode 1)
    (setq desktop-restore-eager 0
          desktop-lazy-idle-delay 2
          desktop-file-name-format 'tilde
          desktop-files-not-to-save
          (concat "\\("
                  "\\`/[^/:]*:\\|(ftp)\\'"
                  "\\|~/projects/private-orgmode[.]*"
                  "\\)"))

    (add-to-list 'desktop-modes-not-to-save 'dired-mode)
    (add-to-list 'desktop-modes-not-to-save 'Info-mode)
    (add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
    (add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
    (add-to-list 'desktop-modes-not-to-save 'emacs-lisp-mode)
  #+end_src

* MOOs and MUDs - NOT legacy - added 2019!
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:30
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Greg's customizations!/Weird random rarely used maybe interesting things
  :ARCHIVE_CATEGORY: README
  :END:
 #+begin_src emacs-lisp :tangle no
   ;; Moos and MUDs - NOT legacy stuff - added 2019!
   (add-to-list 'load-path "~/projects/emacs/rmoo/")
   (require 'rmoo-autoload)
   (require 'moocode-mode)
   ;; (global-set-key (kbd "C-c C-r") 'rmoo)
   (add-to-list 'auto-mode-alist '("\\.moo$" . moocode-mode))
   (add-hook 'rmoo-interactive-mode-hooks
             (lambda ()
               (linum-mode -1)                  ;; ... no line numbers
               (goto-address-mode t)))          ;; ... clickable links


 #+end_src

* Define special logout if using LXDE
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:31
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: EXWM : The Emacs X Window Manager/Let's get this show on the road - if no window manager was detected
  :ARCHIVE_CATEGORY: README
  :END:
  I do not use this - but beware if using a lightweight desktop environment in
  conjunction with EXWM, you may have to use this code or something similar to get a
  clean user session logout
  #+begin_src emacs-lisp :tangle no
    (defun exwm-logout ()
      (interactive)
      ;; (recentf-save-list)
      (save-some-buffers)
      (start-process-shell-command "logout" nil "lxsession-logout"))
  #+end_src

* Company - retired?
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:31
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes
  :ARCHIVE_CATEGORY: README
  :END:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company-mode
    :straight t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map ("<tab>" . company-complete-selection))
          (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common))
   :config
    (company-idle-delay 0.0)
    (setq company-minimum-prefix-length 1))

  ;; (use-package company-lsp
  ;;   :straight t
  ;;   :config
  ;;  (push 'company-lsp company-backends)
  ;; )
#+END_SRC

* Placement of new shell windows
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:35
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes/Shell mode
  :ARCHIVE_CATEGORY: README
  :END:
  I want new shell buffers to open in the currently selected window, not replacing the
  text I'm referencing in a different window.  This is absurdly difficult to do because
  =shell-mode= does not offer a setting to control this behavior.  The solution I found
  was given in an answer [[https://stackoverflow.com/a/40351851/457574][here on stackoverflow]]

  #+begin_src emacs-lisp :tangle no
    (defun shell-same-window-advice (orig-fn &optional buffer)
      "Advice to make `shell' reuse the current window.

    Intended as :around advice."
      (let* ((buffer-regexp
              (regexp-quote
               (cond ((bufferp buffer)  (buffer-name buffer))
                     ((stringp buffer)  buffer)
                     (:else             "*shell*"))))
             (display-buffer-alist
              (cons `(,buffer-regexp display-buffer-same-window)
                    display-buffer-alist)))
        (funcall orig-fn buffer)))

    (advice-add 'shell :around #'shell-same-window-advice)
  #+end_src

* Set up a way to use `find-file` without Ivy
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:59
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes/Ivy / Smex / Counsel
  :ARCHIVE_CATEGORY: README
  :END:
  + I created this as an answer to [[https://emacs.stackexchange.com/a/58785/418][how to open a file without using Ivy - Emacs Stack Exchange]]
  #+begin_src emacs-lisp
    (defun gjg/find-file-no-ivy ()
      (interactive)
      (let ((ivy-state ivy-mode))
        (ivy-mode -1)
        (call-interactively 'find-file)
        (ivy-mode ivy-state)))

    (global-set-key (kbd "C-x F") 'gjg/find-file-no-ivy) ; steals the default key binding from set-fill-column
  #+end_src

* Grep
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-03 Sat 10:59
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes
  :ARCHIVE_CATEGORY: README
  :END:
  #+begin_src emacs-lisp
    ;; (defun advice-without-ivy (o &rest a)
    ;;   (ivy-mode -1)
    ;;   (prog1 (apply o a)
    ;;     (ivy-mode 1)))

    ;; (advice-add 'grep-read-files :around #'advice-without-ivy)
  #+end_src

* Rainbow delimiters for various programming modes
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-06 Tue 19:11
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes
  :ARCHIVE_CATEGORY: README
  :END:
  #+begin_src emacs-lisp :tangle no
    ;; rainbow delimiters ; make much stronger (more saturated) colors
    (autoload 'rainbow-delimiters "rainbow-delimiters" "Highlight brackets according to their depth")
    (with-eval-after-load 'rainbow-delimiters
      (require 'cl-lib)
      (require 'color)
      (cl-loop
       for index from 1 to rainbow-delimiters-max-face-count
       do
       (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
         (cl-callf color-saturate-name (face-foreground face) 30))))

  #+end_src

* Smartparens
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-09-23 Fri 14:08
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes
  :ARCHIVE_CATEGORY: README
  :END:
  # TODO: determine whether this is still needed - in v29, seems to be conflicting with a
  # built-in function
  #+begin_src emacs-lisp :tangle no
    (autoload 'smartparens-config "smartparens-config" "Default configuration for smartparens package")
    (defun my-create-newline-and-enter-sexp (&rest _ignored)
      "Open a new brace or bracket expression, with relevant newlines and indent. "
      (newline)
      (indent-according-to-mode)
      (forward-line -1)
      (indent-according-to-mode))


    ;; (with-eval-after-load 'smartparens
    ;;   (sp-with-modes
    ;;       '(c++-mode objc-mode c-mode js2-mode clojure-mode clojurescript-mode)
    ;;     (sp-local-pair "{" nil :post-handlers '(:add ("||\n[i]" "RET")))))

    ;; (eval-after-load "smartparens-config"
    ;;   '(progn
    ;; (sp-local-pair 'javascript-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
    ;; (sp-local-pair 'js2-mode        "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
    ;; (sp-local-pair 'js2-mode        "[" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
    ;; (sp-local-pair 'javascript-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
    ;; ))

  #+end_src

* Crazy way to allow babel elisp to modify window configuration    :noexport:
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-10-20 Thu 19:22
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Org mode stuff/Org Babel and Source Code Blocks
  :ARCHIVE_CATEGORY: README
  :END:
  This disables Org's use of =save-window-excursion= for execution of source blocks
  Stolen from [[https://emacs.stackexchange.com/questions/42096/running-elisp-within-an-orgmode-code-block][Running elisp within an orgmode code block]] (github)

  Simply add the new block param =:keep-windows= to use this functionality

  #+begin_src emacs-lisp :tangle /tmp/intothevoid.el
    (when nil
    (defun transform-tree (tree trafo)
      "Transform TREE by TRAFO."
      (let ((next tree))
        (while next
          (let ((this next))
        (setq next (cdr next))
        (if (consp (car this))
            (transform-tree (car this) trafo)
          (funcall trafo this)))))
      tree)

    (defun replace-in-fundef (fun sym &rest replacement)
      "In function FUN perform REPLACEMENT."
      (setq fun (or
             (condition-case err
             (let* ((pos (find-function-noselect fun t))
                (buf (car pos))
                (pt (cdr pos)))
               (with-current-buffer buf
                 (save-excursion
                   (goto-char pt)
                   (read buf))))
               (error nil))
             (and (symbolp fun) (symbol-function fun))
             fun))
      (transform-tree fun
              (lambda (this)
                (when (eq (car this) sym)
                  (let ((copy-repl (cl-copy-list replacement)))
                (setcdr (last copy-repl) (cdr this))
                (setcdr this (cdr copy-repl))
                (setcar this (car copy-repl)))))))

    (defmacro save-window-excursion-if (pred &rest body)
      "Act like `save-window-excursion' if PRED is non-nil."
      (declare (indent 1) (debug t))
      (let ((c (make-symbol "wconfig")))
        `(let ((,c (and ,pred (current-window-configuration))))
           (unwind-protect (progn ,@body)
             (when ,c (set-window-configuration ,c))))))

    (advice-remove 'org-babel-execute:emacs-lisp #'ad-org-babel-execute:emacs-lisp)
    ;; make sure we have access to the source code of `org-babel-execute:emacs-lisp'
    (find-function-noselect 'org-babel-execute:emacs-lisp t)
    ;; (defun ad-org-babel-execute:emacs-lisp ...):
    (eval (replace-in-fundef 'org-babel-execute:emacs-lisp 'org-babel-execute:emacs-lisp 'ad-org-babel-execute:emacs-lisp))
    ;; Use `save-window-excursion-if' in `ad-org-babel-execute:emacs-lisp':
    (declare-function 'ad-org-babel-execute:emacs-lisp " ")
    (eval (replace-in-fundef 'ad-org-babel-execute:emacs-lisp
                 'save-window-excursion 'save-window-excursion-if '(null (member (cdr (assoc :keep-windows params)) '("yes" "t")))))
    ;; Replace `org-babel-execute:emacs-lisp':
    (advice-add 'org-babel-execute:emacs-lisp :override #'ad-org-babel-execute:emacs-lisp)
    )
  #+end_src

* Web page entry - what is this for exactly?
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-10-20 Thu 19:23
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Org mode stuff/Capture Templates/Template definitions
  :ARCHIVE_CATEGORY: README
  :END:
  #+begin_src emacs-lisp :tangle /tmp/intothevoid.el
    (push
     '             ("w" "Web page to read from copied URL" entry (file "~/projects/private-orgmode/inbox.org")
                    "* TODO Read %(org-cliplink-capture)
                          Captured %u")
     org-capture-templates)
  #+end_src

* Typescript
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-10-20 Thu 19:25
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Programming language modes
  :ARCHIVE_CATEGORY: README
  :END:
  I don't actually use Typescript - but this was the example given by SystemCrafters for LSP

  + [[https://emacs-lsp.github.io/lsp-mode/page/lsp-typescript/][JavaScript/TypeScript (theia-ide) - LSP Mode - LSP support for Emacs]]
  + Install a TypeScript language server for each language
  #+begin_src bash
    npm i -g typescript-language-server ; npm i -g typescript
  #+end_src
  #+begin_src emacs-lisp :tangle /tmp/intothevoid.el
    (use-package typescript-mode
      :straight t
      :mode "\\.ts\\'"
      :hook (typescript-mode . lsp-deferred )
      :config
      (setq typescript-indent-level 2))
  #+end_src

* Eshell
  :PROPERTIES:
  :ARCHIVE_TIME: 2022-10-29 Sat 21:36
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Commonly used modes
  :ARCHIVE_CATEGORY: README
  :END:
  Okay, not yet "commonly used" (as of [2020-09-23 Wed]) ... but it appears to be
  awesome.

  Ref Howard Abrams' [[https://www.youtube.com/watch?v=RhYNu6i_uY4&t=1548s][Introduction to EShell - YouTube]]

  + Eshell uses =term= when a non-line-mode command is invoked.  Set it so that the
    =term= window goes away when the process ends.  Also make various =git= things work
    nicely.
  #+begin_src emacs-lisp :tangle no
    (setq eshell-visual-subcommands '(("git" "log" "diff" "show")))
    (setq eshell-destroy-buffer-when-process-dies t)
  #+end_src

* Eat - a terminal emulator
  :PROPERTIES:
  :ARCHIVE_TIME: 2023-05-10 mié 17:52
  :ARCHIVE_FILE: ~/emacs-gregoryg/README.org
  :ARCHIVE_OLPATH: Section of trying-things-out-and-please-remember-to-delete-them-if-they-dont-work-out
  :ARCHIVE_CATEGORY: README
  :END:
  #+begin_src emacs-lisp :tangle no
    (straight-use-package
     '(eat :type git
           :host codeberg.org
           :repo "akib/emacs-eat"
           :files ("*.el" ("term" "term/*.el") "*.texi"
                   "*.ti" ("terminfo/e" "terminfo/e/*")
                   ("terminfo/65" "terminfo/65/*")
                   ("integration" "integration/*")
                   (:exclude ".dir-locals.el" "*-tests.el"))))
  #+end_src
