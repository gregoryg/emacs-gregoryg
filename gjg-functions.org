#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:2 todo:t |:t
#+TITLE: gjg-functions library
#+DATE: <2022-08-13 Sat>
#+AUTHOR: Greg Grubbs
#+EMAIL: gregory.grubbs@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-readtheorg-local.setup
#+property: header-args:emacs-lisp :tangle ~/emacs-gregoryg/emacs/gjg-functions.el :comments org :results none
#+property: header-args:bash :shebang #!/usr/bin/env bash :results none
#+startup: content

A sort-of package with customization framework.  The famed =gjg= package.

* Variables with =defcustom=
   #+begin_src emacs-lisp
     (defcustom gjg/current-agenda-context 'work
       "Context for Org Agenda that determines global value of `org-agenda-files`"
       :type 'symbol
       :group 'gjg)

     (defcustom gjg/agenda-contexts-alist nil
       "List of all agenda contexts with list of Org files for each."
       :type '(alist :key-type (symbol :tag "Agenda context name")
                     :value-type (repeat :tag "Path" string)
                     )
       :group 'gjg)

     (defcustom gjg/audioplayer "mplayer"
       "Audio player for this machine"
       :type 'string
       :group 'gjg)

     (defcustom gjg/blogpost-title ""
       "Name of blogpost title used in blog capture template"
       )
     (defcustom gjg/employer-name "Poodles R Us"
       "Name used by Gmail for use in gmail-buffer-or-launch script"
       :type 'string
       :group 'gjg)

     (defcustom gjg/employer-org-file "~/wherever/poodlepep/poodlepep.org.gpg"
       "Path to probably-encrypted org file to use with capture templates"
       :type 'string
       :group 'gjg)

     (defcustom gjg/visual-notify-command "notify-send"
       "Command to create a visual notification"
       :type 'string
       :group 'gjg)

     (defcustom gjg/preferred-light-theme "brutalist"
       "Current preferred light theme"
       :type 'string
       :group 'gjg)

     (defcustom gjg/preferred-dark-theme "brutalist-dark"
       "Current preferred dark theme"
       :type 'string
       :group 'gjg)

     (defcustom gjg/stardog-connections-alist
       nil
       "List of stardog connections "
       :type '(alist :key-type (symbol :tag "Connection name")
                     :value-type (list (string :tag "Endpoint URL")
                                       (string :tag "Database name")
                                       ))
       :group 'gjg
       :version "0.1"
       )

     (defcustom gjg/yow-file
       "~/emacs/yow.lines"
       "Location of Zippy-isms"
       :type 'string
       :group 'gjg)
   #+end_src
* Quick theme switching
   #+begin_src emacs-lisp
    (defun gjg/go-dark ()
      "switch to preferred dark theme"
      (interactive)
      (load-theme (intern gjg/preferred-dark-theme) t)
      (disable-theme (intern gjg/preferred-light-theme)))
    (defun gjg/go-light ()
      "switch to preferred light theme"
      (interactive)
      (load-theme (intern gjg/preferred-light-theme) t)
      (disable-theme (intern gjg/preferred-dark-theme)))

   #+end_src
* Work/Job/Consulting/Employer functions
   #+begin_src emacs-lisp
    (defun gjg/nag-timer () "Nag me when there isn't a clock running"
           (unless (marker-buffer org-clock-marker)
             (call-process-shell-command gjg/visual-notify-command nil 0 nil "Org-Mode\\ Nudge" "What\\'s\\ \\going\\ on?")
             (if (fboundp 'async-start-process)
                 (async-start-process "naggynorman" "espeak" nil "What the heck is going on?")
               (call-process "espeak" nil nil nil  "What the heck is going on?"))))

    (defun gjg/nag () "Start nagging me every 15 minutes when not clocked in to an Org task"
           (interactive)
           (cancel-function-timers 'gjg/nag-timer) ;; don't start two timers
           (run-with-timer 1 900 'gjg/nag-timer))

    (defun gjg/cancel-nag () "Cancel the org-mode clock nag timer"
           (interactive)
           (cancel-function-timers 'gjg/nag-timer))

    (defun gjg/open-work-agenda ()
      (interactive)
      (org-agenda nil "W"))
   #+end_src
* Stardog and other RDF/SPARQL databases
   #+begin_src emacs-lisp
     ;; TODO: create function to change just the database
     ;; TODO: create function select database after querying server ( /admin/databases)
     (defun gjg/handle-stardog-result (status &optional output-buffer)
       "Handle it!"
       (message "Status is %s" status)
       (when (zerop (buffer-size))
         (error "URL '%s' is not accessible" (url-recreate-url url-current-object)))
       (let ((results-buffer (current-buffer))
             (response (url-http-parse-response)))
         ;; (with-current-buffer (get-buffer-create "zgrego")
         ;; (with-temp-buffer
         (with-current-buffer output-buffer
           (let ((buffer-read-only nill))
             (erase-buffer)
             (if (and (<= 200 response) (<= response 299))
                 (url-insert results-buffer)
               (insert-buffer-substring results-buffer))
             ;; (message "I got these databases %s" response ))
             (goto-char 0)
             (completing-read "Ohai: "
                              (append (cdr (assq 'databases (json-read))) nil)
                              )
           )
         )))
     (defun gjg/stardog-get-databases (server)
       "Get list of databases from the Stardog server - will work for users with admin rights"
       ;; (url-retrieve (concat server "/admin/databases") #'gjg/handle-stardog-result )
       (url-retrieve (concat (replace-regexp-in-string "/+$" "" server) "/admin/databases") #'gjg/handle-stardog-result (list (current-buffer)))
         )

     (defun gjg/stardog-build-url (arg &optional server database api-endpoint reasoning  )
       "Create a Stardog specific URL for use with Stardog Platform API.  Support query and update endpoints as well as reasoning"
       (interactive "P")
       (let* ((server (or server
                       (cdr (assoc :server (gjg/set-sparql-headers)))))
              (database (or database (completing-read "Database name: " '("this" "thag"))))
              (api-endpoint (if arg "update" "query"))
              )
         (message
         (format "%s/%s/%s"
                 server
                 database
                 api-endpoint
                 (when (and (not arg) (string= "query" api-endpoint)) "?reasoning=true")
                 )
         )))

     (defun gjg/set-sparql-header-args (url db endpoint)
       (let* ((url (replace-regexp-in-string "//+$" "" url))
              (fullurl (concat url "/" db "/" endpoint "/" )))
         ;; (message "My lovely url is %s\n" fullurl)
         (setq-local org-babel-default-header-args:sparql
                     (cons `(:server . ,url)
                           (cons `(:url  . ,fullurl)
                                 (assq-delete-all :url org-babel-default-header-args:sparql))))))

     (defun gjg/set-stardog-bash-header-args (tramp-path )
       (setq-local org-babel-default-header-args:bash
                   (cons `(:dir . ,tpath)
                         (assq-delete-all :dir org-babel-default-header-args:bash))))

     (defun gjg/annotate-sparql-selection (s)
       "Provide annotations for completing-read using the data in a SPARQL Stardog server table"
       ;; (message (format "DEBUG: stardog list |%s|, table |%s}" s minibuffer-completion-table))
       (let* ((item (assoc (intern s) minibuffer-completion-table))
              (connection-name (symbol-name (nth 0 item)))
              (displayurl (s-truncate 50 (nth 1 item)))
              (db (nth 2 item))
              )
         (when item (concat
                     (string-pad "" (- 20 (string-width connection-name)))
                     displayurl
                     (string-pad "" (- 55 (string-width displayurl)))
                     db
                     ))))

     (defun gjg/set-sparql-headers ()
       "Set Org Babel headers for SPARQL.   table named `svar` should have these columns: connection-name, base-url, database, api-type"
       (interactive)
       (let* ((marginalia-align-offset 80)
              (completion-extra-properties '(:annotation-function gjg/annotate-sparql-selection))
              (myconnection (assoc (intern (completing-read "SPARQL Server name: " gjg/stardog-connections-alist)) gjg/stardog-connections-alist))
              (connection-name (nth 0 myconnection))
              (url (nth 1 myconnection))
              (db (nth 2 myconnection))
              (api-type "query"))
         ;; (message (format "I will surely set sparql header args to %s %s %s %s" connection-name url db api-type))
         (gjg/set-sparql-header-args url db api-type)))
   #+end_src
* Polybar for use with Linux EXWM and desktop environments
  #+begin_src emacs-lisp
    (defun gjg/polybar-start-or-toggle ()
      "Toggle visibility of polybar, or start it if not running"
      (interactive)
      (if (get-process "polybar")
          (call-process-shell-command "polybar-msg cmd toggle")
        (start-process-shell-command "polybar" nil (concat "polybar --config=~/.config/polybar/config-fancy floating -r -l warning"))
        )
      )

    (defun gjg/kill-polybar ()
      (interactive)
      (let ((polybar-process (get-process "polybar")))
        (when polybar-process
          (ignore-errors
            (kill-process polybar-process)))))
    (defalias 'gjg/kill-panel 'gjg/polybar-start-or-toggle)

    (when (boundp 'exwm-workspace-switch-hook)
      (defun gjg/send-polybar-hook (module-name hook-index)
        (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

      (defun gjg/send-polybar-exwm-workspace ()
        (gjg/send-polybar-hook "exwm-workspace" 1))

      ;; Update panel indicator when workspace changes
      (add-hook 'exwm-workspace-switch-hook #'gjg/send-polybar-exwm-workspace))

  #+end_src
* Odds and ends
** Try harebrained idea for Org Agenda usage []
   TODO come up with a better / less ambiguous term for =context=

   The idea is to have a smaller set of custom agenda commands that will depend on setting a
   =context= such as work, health, notes, social.  Setting that context will determine the
   value of the global =org-agenda-files= from a list of lists of Org files related to
   each context.

   That way I don't have to create separate agendas that are the same in all ways but the
   list of agenda files they use.

   Var used is =gjg/current-agenda-context=
*** DONE Add indication of context to the Agenda Dispatcher
    :LOGBOOK:
    - State "DONE"       from              [2022-09-20 Tue 15:26]
    :END:
    + Ref: [[https://emacs.stackexchange.com/a/69537/418][Is there a "switch to buffer" hook? - Emacs Stack Exchange]]
    #+begin_src emacs-lisp
      (defun gjg/display-agenda-context (w)
        "Used in hook to modify ?? when ` *Agenda Commands*` buffer is activated."
        ;; very generic hook by necessity, so we must discover which buffer we have
        (when (string= (buffer-name) " *Agenda Commands*")
          (setq mode-name
                (concat "Fundamental[" (symbol-name gjg/current-agenda-context) "]"))))

      ;; (add-hook 'org-agenda-mode-hook ...
      (add-hook 'window-selection-change-functions
                'gjg/display-agenda-context nil t)

      ;; (remove-hook 'window-selection-change-functions 'gjg/display-agenda-context)
    #+end_src
*** Create a context switcher
    #+begin_src emacs-lisp
      (defun gjg/select-agenda-context ()
        "Set current Org Agenda context (work/home etc)."
        (interactive)

        (setq org-agenda-files
              (cadr (assoc (intern
                            (completing-read "Ohai: " gjg/agenda-contexts-alist )
                            )
                           gjg/agenda-contexts-alist
                           ))
              ))
    #+end_src
** Unfill paragraph
   Very useful - recognize paragraphs in text with line endings made just for display
   #+begin_src emacs-lisp
     ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
     (defun gjg/unfill-paragraph ()
       "Takes a multi-line paragraph and makes it into a single line of text."
       (interactive)
       (let ((fill-column (point-max)))
         (fill-paragraph nil)))

   #+end_src
** Replace fancy quotes/dashes with plain old quotes/dashes
   #+begin_src emacs-lisp
     (defun replace-smart-quotes (beg end)
       "Replace 'smart quotes' in buffer or region with ascii quotes."
       (interactive "r")
       (format-replace-strings '(("\x201C" . "\"")
                                 ("\x201D" . "\"")
                                 ("\x2018" . "'")
                                 ("\x2019" . "'")
                                 ("\221" . "`")
                                 ("\222" . "'")
                                 ("\223" . "\"")
                                 ("\224" . "\"")
                                 ("\226" . "-")
                                 ("\227" . "--")
                                 )
                               nil beg end))
   #+end_src
** Make acronyms of text
   Great World Blunders -> gwb
     #+begin_src emacs-lisp
     (defun gjg/acronyminize (text &optional do-capitalize)
       "Make an acronym from the text
     do-capitalize: t means run text through capitalize function, nil will respect CamelCase
     "
       (save-excursion
         (setq case-fold-search nil)
         (downcase
          (replace-regexp-in-string
           "[^A-Z]" ""
           (if do-capitalize (capitalize text) text) nil t))
         ))
     #+end_src
** Add unique IDs to Org Mode headers
     #+begin_src emacs-lisp
     (defun gjg/add-ids-to-headers ()
       "Add unique IDs to all headers in a buffer from current point; for use with org-mobile"
       (interactive)
       (save-excursion
         (org-back-to-heading t)
         (while (not (eobp))
           (org-id-get-create) ;; only creates an ID property if none exists
           (outline-next-heading))))
     #+end_src
** Move next s-expression past current scope
   TODO this is a good candidate for the trash bin
     #+begin_src emacs-lisp
     (defun gjg/move-next-sexp-past-current-scope ()
       "kill sexp following point, move past current scope/sexp/function, yank"
       (beginning-of-line)
       ;; (save-excursion
       (let ((beg (point)))
         (re-search-forward "^[ \t]*function[ \t]+[^}]+?}" (point-max) nil)
         (mark-defun)
         (kill-region (point) (mark)))
       (forward-line)
       (yank)
       (indent-region (mark) (point)))
     #+end_src
* Provide the library - we're done!
   #+begin_src emacs-lisp
    (provide 'gjg-functions)
   #+end_src
