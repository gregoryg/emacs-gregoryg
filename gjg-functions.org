#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:2 todo:t |:t
#+TITLE: gjg-functions library
#+DATE: <2022-08-13 Sat>
#+AUTHOR: Greg Grubbs
#+EMAIL: gregory.grubbs@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-readtheorg-local.setup
#+property: header-args:emacs-lisp :tangle ~/emacs-gregoryg/emacs/gjg-functions.el :comments org :results none
#+property: header-args:bash :shebang #!/usr/bin/env bash :results none
#+startup: content

A sort-of package with customization framework.  The famed =gjg= package.

* Variables with =defcustom=
  :PROPERTIES:
  :ID:       a0ef1a1a-59f5-4ba8-ac37-013ad307011e
  :END:
   #+begin_src emacs-lisp
     (defcustom gjg/current-agenda-context 'work
       "Context for Org Agenda that determines global value of `org-agenda-files`"
       :type 'symbol
       :group 'gjg)

     (defcustom gjg/agenda-contexts-alist nil
       "List of all agenda contexts with list of Org files for each."
       :type '(alist :key-type (symbol :tag "Agenda context name")
                     :value-type (repeat :tag "Path" string)
                     )
       :group 'gjg)

     (defcustom gjg/max-buffer-name-in-modeline 80
       "Maximum width of buffer name segment in modeline - EXWM buffer names can be REALLY LONG."
       :type 'number)

     (defcustom gjg/blogpost-title ""
       "Name of blogpost title used in blog capture template")

     (defcustom gjg/employer-name "Poodles R Us"
       "Name used by Gmail for use in gmail-buffer-or-launch script"
       :type 'string
       :group 'gjg)

     (defcustom gjg/employer-org-file "~/wherever/poodlepep/poodlepep.org.gpg"
       "Path to probably-encrypted org file to use with capture templates"
       :type 'string
       :group 'gjg)

     (defcustom gjg/visual-notify-command "notify-send"
       "Command to create a visual notification"
       :type 'string
       :group 'gjg)

     (defcustom gjg/preferred-light-theme "modus-operandi"
       "Current preferred light theme"
       :type 'string
       :group 'gjg)

     (defcustom gjg/preferred-dark-theme "modus-vivendi"
       "Current preferred dark theme"
       :type 'string
       :group 'gjg)

     (defcustom gjg/screensaver-program "xscreensaver"
       "Linux preferred screen saver program."
       :type 'string
       :group 'gjg)

     (defcustom gjg/stardog-connections-alist
       nil
       "List of stardog connections "
       :type '(alist :key-type (symbol :tag "Connection name")
                     :value-type (list (string :tag "Endpoint URL")
                                       (string :tag "Database name")
                                       ))
       :group 'gjg
       :version "0.1"
       )

     (defcustom gjg/yow-file
       "~/emacs/yow.lines"
       "Location of Zippy-isms"
       :type 'string
       :group 'gjg)
   #+end_src
* Quick theme switching
  :PROPERTIES:
  :ID:       67100837-6b96-46e1-b923-932b31ae1297
  :END:
   #+begin_src emacs-lisp
     (defun gjg/go-dark ()
       "switch to preferred dark theme - currently specific to modus-themes."
       (interactive)
       (if (s-starts-with? "modus-" gjg/preferred-dark-theme)
           (modus-themes-load-theme (intern gjg/preferred-dark-theme))
         (progn
           (load-theme (intern gjg/preferred-dark-theme))
           ((disable-theme gjg/preferred-light-theme)))))

     (defun gjg/go-light ()
       "switch to preferred light theme - currently specific to modus-themes."
       (interactive)
       (if (s-starts-with? "modus-" gjg/preferred-light-theme)
           (modus-themes-load-theme (intern gjg/preferred-light-theme))
         (progn
           (load-theme (intern gjg/preferred-light-theme))
           ((disable-theme gjg/preferred-dark-theme)))))
   #+end_src
* Register buffer name modeline segment for use in various modeline packages
  :PROPERTIES:
  :ID:       fb954462-87b1-46ea-8374-97759940b485
  :END:
  #+begin_src emacs-lisp :tangle no
    (defun gjg/moodline-buffer-name-segment
        "Displays the name of the current buffer in the mode-line - truncated to gjg/max-buffer-name-in-modeline if set"
      (if (and (boundp 'gjg/max-buffer-name-in-modeline) (numberp gjg/max-buffer-name-in-modeline))
          (propertize "%b " 'face )

            )
        )
  #+end_src
* Work/Job/Consulting/Employer functions
  :PROPERTIES:
  :ID:       a234d0a6-b019-4f55-95a0-d314bda7d439
  :END:
   #+begin_src emacs-lisp
     (defun gjg/nag-timer () "Nag me when there isn't a clock running"
            (unless (marker-buffer org-clock-marker)
              (call-process-shell-command gjg/visual-notify-command nil 0 nil "Org-Mode\\ Nudge" "What\\'s\\ \\going\\ on?")
              (if (fboundp 'async-start-process)
                  (async-start-process "naggynorman" "espeak" nil "What the heck is going on?")
                (call-process "espeak" nil nil nil  "What the heck is going on?"))))

     (defun gjg/nag () "Start nagging me every 15 minutes when not clocked in to an Org task"
            (interactive)
            (cancel-function-timers 'gjg/nag-timer) ;; don't start two timers
            (run-with-timer 1 900 'gjg/nag-timer))

     (defun gjg/cancel-nag () "Cancel the org-mode clock nag timer"
            (interactive)
            (cancel-function-timers 'gjg/nag-timer))

     (defun gjg/open-work-agenda ()
       (interactive)
       (gjg/select-agenda-context 'work)
       (org-agenda nil "W"))
   #+end_src
* Org Mode to RDF and (maybe) RDBMS
  :PROPERTIES:
  :ID:       732c1c28-5cee-4674-b4b2-ac3684759de4
  :END:
  [[id:de526c56-8069-47b6-b4f9-16f72e9e57d2][make Org and Markdown files into RDF triples]]

  TODO: return results as property lists rather than positional values
       use org-entry-get
** Code to return (very) simplifed headline parse of current Org buffer
   :PROPERTIES:
   :ID:       d08013df-17b2-4faa-b429-e91493625897
   :END:
   #+begin_src emacs-lisp
     ;; tags are being used only at file level for now (#+FILETAGS)
     (defun gjg/parse-org-buffer-for-rdf (&optional SIMPLE-LIST)
       "Parse current Org buffer, returning elements for my ontology.
     Set SIMPLE-LIST to t to return ordered list rather than keyed property list."
       (org-element-map (org-element-parse-buffer 'object) '( headline)
         (lambda (hl)
           (let* ((element-type   (car hl))
                  (body           (cadr hl))
                  (pos            (org-element-property :robust-begin hl))
                  (properties     (org-entry-properties pos))
                  (title          (org-element-property :raw-value hl))
                  (level          (org-element-property :level hl))
                  (todo-state     (org-element-property :todo-type hl))
                  (parent         (org-element-property :parent hl))
                  (parent-id      (when parent (org-element-property :ID (assoc 'headline parent))))
                  (id             (org-element-property :ID hl))
                  (category       (cdr (assoc "CATEGORY" properties))) ;; inherited or local
                  (contents-begin (org-element-property :contents-begin hl))
                  (contents-end (org-element-property :contents-end hl)))
             (message "DEBUG Level %d, id %s, parent id %s  \"%s\"" level id parent-id title)
             (setq gort parent)
             ;; TODO nab links in *only* the current heading/topic
             ;; (org-with-point-at contents-begin
             ;;   (org-narrow-to-subtree)
             ;;   (org-fold-hide-subtree)
             ;;   (org-show-entry)
             ;;   (org-element-map (org-element-parse-buffer '(object) t) '(link)
             ;;     (lambda (linky)
             ;;       (message "Ohai: link discovered: %s %s" (plist-get linky :type) (plist-get linky :path)
             ;;     )))
             ;;   (widen)
             ;;   )
             (when title
               (if SIMPLE-LIST
                   (list
                    element-type level title todo-state id parent-id category
                    )
                 (list :type element-type
                       :level level
                       :title title
                       :todo-state todo-state
                       :id id
                       :parent-id parent-id
                       :category category
                       ))
               )))))
     (defun gjg/parse-org-buffer-links-for-rdf ()
       "Parse current Org buffer, returning links for my ontology."
       (setq-local element-type nil)
       (org-element-map (org-element-parse-buffer) '(link headline)
         ;; assume elements will appear in order
         (lambda (hl)
           (if (eq 'headline (car hl))
               (setq-local headline-id (plist-get (cadr hl) :ID))
             (let* ((body         (cadr hl))
                    (element-type (car hl))
                    (link-type    (plist-get body :type))
                    (link-format  (plist-get body :format))
                    (link-path    (plist-get body :path))
                    )
               )
             (when (and element-type (eq 'link element-type))
               (list
                (headline-id link-type link-path link-format)
                )))))
       )
   #+end_src
** Return string with full RDF set based on my Org Mode ontology
   :PROPERTIES:
   :ID:       80080bf7-b231-4bac-885d-6d27333e6530
   :END:
   #+begin_src emacs-lisp
     (defun gjg/generate-rdf-from-org ()
       "Return Turtle format RDF for a graph based on my Org Mode ontology."
       ;; using concat instead of format due to conditional lines
       (let* ((orgparse (gjg/parse-org-buffer-for-rdf))
              (todo-states (delete-dups (mapcar (lambda (hl) (nth 3 hl)) orgparse)))
              (categories (delete-dups (mapcar (lambda (hl) (nth 6 hl)) orgparse)))
              (properties (org-entry-properties 0))
              (alltags (when (and properties (assoc "ALLTAGS" properties))
                         (s-split ":" (substring-no-properties (cdr (assoc "ALLTAGS" properties))) t)))
              (file-name (buffer-file-name))
              (file-id (s-replace "/" "_" file-name))
              (todo-state-data (mapcar
                                (lambda (todo-state)
                                  (format "
     :%s a :Todo . \n" todo-state )) todo-states
                                ))
              (file-level-data (format "
     PREFIX : <urn:orgmode:model#>
     :File-%s a :File ;
          rdfs:label \"%s\" ;
          :file_path \"%s\" ;
          :file_type \"%s\" .\n"
                                       file-id
                                       (file-name-base file-name)
                                       file-name
                                       "org"))
              (filetag-data (mapcar
                             (lambda (tag)
                               (format "
     :Tag-%s a :Tag ;
          rdfs:label \"%s\" .\n
     :File-%s a :File ;
          :file_tag :Tag-%s . \n"
                                       tag
                                       tag
                                       file-id
                                       tag
                                       ))
                             alltags))
              (category-data (mapcar
                              (lambda (cat)
                                (format "
     :Category-%s a :Category ;
     rdfs:label \"%s\" .\n"
                                        cat  cat))
                              categories))

              (topic-level-data (mapcar
                                 (lambda (hl)
                                   (let ((level (nth 1 hl))
                                         (title (s-replace "\"" "\\\"" (nth 2 hl)))
                                         (id (nth 4 hl))
                                         (category (nth 6 hl))
                                         (todo-data (when (nth 3 hl) (concat "     :todo_state :" (symbol-name (nth 3 hl))  " ;\n")))
                                         (child-data (when (nth 5 hl) (concat "     :child_of :Topic-" (nth 5 hl)  " ;\n")))
                                         )
                                     (concat "
     :Topic-" id " a :Topic ;\n"
     "     rdfs:label \"" title "\" ;\n"
     "     :topic_level " (int-to-string level) " ;\n"
     "     :topic_headline \"" title "\" ;\n"
     "     :topic_category :Category-" category " ;\n"
     todo-data
     child-data
     "     :from_file :File-" file-id " .\n"
     )
                                     ))
                                 orgparse)

                                )

              ) ; now we're in the let*
         (concat
          (format "# Data from file %s\n" file-name)
          file-level-data
          "# Unique file tags\n"
          (s-join "\n" filetag-data)
          "# Unique TODO states in file\n"
          (s-join "\n" todo-state-data)
          "# Unique categories in file\n"
          (s-join "\n" category-data)
          "# Topics (Org Mode headlines)\n"
          (s-join "\n" topic-level-data)
          )
         ) ;; end of let*
       )
   #+end_src
** Write RDF as turtle for directory of Org files
   :PROPERTIES:
   :ID:       ffbcffc0-1820-47fc-93ab-be7ab5d36e65
   :END:
   #+begin_src emacs-lisp
     (defun gjg/write-org-to-rdf (&optional dir)
       "Build RDF and write TURTLE file for all Org Mode files in notes directory.
     Write all TURTLE files to DIR, or `/tmp/' if not specified."
       (interactive)
       (let ((files   (directory-files-recursively "~/gregj-notes/" org-agenda-file-regexp))
             (targetdir (or dir "/tmp/")))
         (dolist (file files)
           (message "Processing file %s" file)
           (let ((buffer (or (find-buffer-visiting file) (find-file-noselect file))))
             (with-current-buffer buffer
               (org-mode)
               (gjg/add-org-header-ids)
               (f-write (gjg/generate-rdf-from-org) 'utf-8 (concat targetdir "/" (file-name-sans-extension (file-name-nondirectory file)) ".ttl")))))))
   #+end_src
* Stardog and other RDF/SPARQL databases
  :PROPERTIES:
  :ID:       05f31067-47d5-4486-a252-3af2a0157978
  :END:
   #+begin_src emacs-lisp
     ;; TODO: create function to change just the database
     ;; TODO: create function select database after querying server ( /admin/databases)
     (defun gjg/handle-stardog-result (status &optional output-buffer)
       "Handle it!"
       (message "Status is %s" status)
       (when (zerop (buffer-size))
         (error "URL '%s' is not accessible" (url-recreate-url url-current-object)))
       (let ((results-buffer (current-buffer))
             (response (url-http-parse-response)))
         ;; (with-current-buffer (get-buffer-create "zgrego")
         ;; (with-temp-buffer
         (with-current-buffer output-buffer
           (let ((buffer-read-only nil))
             (erase-buffer)
             (if (and (<= 200 response) (<= response 299))
                 (url-insert results-buffer)
               (insert-buffer-substring results-buffer))
             ;; (message "I got these databases %s" response ))
             (goto-char 0)
             (completing-read "Ohai: "
                              (append (cdr (assq 'databases (json-read))) nil)
                              )
           )
         )))
     (defun gjg/stardog-get-databases (server)
       "Get list of databases from the Stardog server - will work for users with admin rights"
       ;; (url-retrieve (concat server "/admin/databases") #'gjg/handle-stardog-result )
       (url-retrieve (concat (replace-regexp-in-string "/+$" "" server) "/admin/databases") #'gjg/handle-stardog-result (list (current-buffer)))
       (url-retrieve (concat (replace-regexp-in-string "/+$" "" server) "/admin/databases") #'gjg/handle-stardog-result)
         )

     (defun gjg/stardog-build-url (arg &optional server database api-endpoint reasoning  )
       "Create a Stardog specific URL for use with Stardog Platform API.  Support query and update endpoints as well as reasoning"
       (interactive "P")
       (let* ((server (or server
                       (cdr (assoc :server (gjg/set-sparql-headers)))))
              (database (or database (completing-read "Database name: " '("this" "thag"))))
              (api-endpoint (if arg "update" "query"))
              )
         (message
         (format "%s/%s/%s"
                 server
                 database
                 api-endpoint
                 (when (and (not arg) (string= "query" api-endpoint)) "?reasoning=true")
                 )
         )))

     (defun gjg/set-sparql-header-args (url db endpoint)
       (let* ((url (replace-regexp-in-string "//+$" "" url))
              (fullurl (concat url "/" db "/" endpoint "/" )))
         ;; (message "My lovely url is %s\n" fullurl)
         (setq-local org-babel-default-header-args:sparql
                     (cons `(:server . ,url)
                           (cons `(:url  . ,fullurl)
                                 (assq-delete-all :url org-babel-default-header-args:sparql))))))

     (defun gjg/set-stardog-bash-header-args (tramp-path )
       (setq-local org-babel-default-header-args:bash
                   (cons `(:dir . ,tpath)
                         (assq-delete-all :dir org-babel-default-header-args:bash))))

     (defun gjg/annotate-sparql-selection (s)
       "Provide annotations for completing-read using the data in a SPARQL Stardog server table"
       ;; (message (format "DEBUG: stardog list |%s|, table |%s}" s minibuffer-completion-table))
       (let* ((item (assoc (intern s) minibuffer-completion-table))
              (connection-name (symbol-name (nth 0 item)))
              (displayurl (s-truncate 50 (nth 1 item)))
              (db (nth 2 item))
              )
         (when item (concat
                     (string-pad "" (- 20 (string-width connection-name)))
                     displayurl
                     (string-pad "" (- 55 (string-width displayurl)))
                     db
                     ))))

     (defun gjg/set-sparql-headers ()
       "Set Org Babel headers for SPARQL.   table named `svar` should have these columns: connection-name, base-url, database, api-type"
       (interactive)
       (let* ((marginalia-align-offset 80)
              (completion-extra-properties '(:annotation-function gjg/annotate-sparql-selection))
              (myconnection (assoc (intern (completing-read "SPARQL Server name: " gjg/stardog-connections-alist)) gjg/stardog-connections-alist))
              (connection-name (nth 0 myconnection))
              (url (nth 1 myconnection))
              (db (nth 2 myconnection))
              (api-type "query"))
         ;; (message (format "I will surely set sparql header args to %s %s %s %s" connection-name url db api-type))
         (gjg/set-sparql-header-args url db api-type)))
   #+end_src
* Polybar for use with Linux EXWM and desktop environments
  :PROPERTIES:
  :ID:       8c5730d0-92b7-42eb-b8ad-db2dae8e6a38
  :END:
  #+begin_src emacs-lisp
    (defun gjg/polybar-start-or-toggle ()
      "Toggle visibility of polybar, or start it if not running"
      (interactive)
      (if (get-process "polybar")
          (call-process-shell-command "polybar-msg cmd toggle")
        (start-process-shell-command "polybar" nil (concat "polybar --config=~/.config/polybar/config-fancy floating -r -l warning"))
        )
      )

    (defun gjg/kill-polybar ()
      (interactive)
      (let ((polybar-process (get-process "polybar")))
        (when polybar-process
          (ignore-errors
            (kill-process polybar-process)))))
    (defalias 'gjg/kill-panel 'gjg/polybar-start-or-toggle)

    (when (boundp 'exwm-workspace-switch-hook)
      (defun gjg/send-polybar-hook (module-name hook-index)
        (start-process-shell-command "polybar-msg" nil (format "polybar-msg hook %s %s" module-name hook-index)))

      (defun gjg/send-polybar-exwm-workspace ()
        (gjg/send-polybar-hook "exwm-workspace" 1))

      ;; Update panel indicator when workspace changes
      (add-hook 'exwm-workspace-switch-hook #'gjg/send-polybar-exwm-workspace))

  #+end_src
* Laptop management
** Lock screen
   #+begin_src emacs-lisp
     (defun gjg/lock-screen ()
       "Linux-specific screen lock with order of preference for screensaver programs."
       (interactive)
       (let ((pgm (or (and gjg/screensaver-program (executable-find gjg/screensaver-program))
                      (executable-find "xfce4-screensaver-command")
                      (executable-find "xscreensaver"))))
         (if pgm
             (progn
               (call-process-shell-command (concat pgm "-command -lock"))
               (message (concat "Fun: " pgm "-command -lock")))
           (message "No screen saver program found."))))
   #+end_src
* Odds and ends
  :PROPERTIES:
  :ID:       39e8657c-2662-4231-9fc6-440544b659e2
  :END:
** Org mode linking using refile targets
   :PROPERTIES:
   :ID:       5450a76d-760d-4157-b311-bcf68f8b86a4
   :END:
   TODO: degrade to =org=insert-link= behavior - e.g. accept URL
   #+begin_src emacs-lisp
     (defun gjg/insert-org-link ()
       "Insert ID link using value of org-refile-targets"
       (interactive)
       (let* ((targets-table (org-refile-get-targets))
              (selection (completing-read "Select block to link: " targets-table))
              (myinfo (assoc selection targets-table))
              (path (nth 1 myinfo))
              (filepos (or (nth 3 myinfo) 0))
              ;; visit the target file at position, call =org-id-get-create=
              (targetid
               (when (> filepos 0)
                 (with-current-buffer
                     (find-file-noselect path)
                   (goto-char filepos)
                   (org-id-get-create)))))
         (insert (format "[[%s:%s][%s]]"
                         (if targetid "id" "file")
                         (if targetid targetid path)
                         selection))))
   #+end_src
** Try harebrained idea for Org Agenda usage []
   :PROPERTIES:
   :ID:       461e61b0-2cc4-4fa6-81dd-13e489c69b51
   :END:
   TODO come up with a better / less ambiguous term for =context=

   The idea is to have a smaller set of custom agenda commands that will depend on setting a
   =context= such as work, health, notes, social.  Setting that context will determine the
   value of the global =org-agenda-files= from a list of lists of Org files related to
   each context.

   That way I don't have to create separate agendas that are the same in all ways but the
   list of agenda files they use.

   Var used is =gjg/current-agenda-context=
*** DONE Add indication of context to the Agenda Dispatcher
    :PROPERTIES:
    :ID:       1aad783e-f6b2-489a-b69d-d2a709d797b6
    :END:
    :LOGBOOK:
    - State "DONE"       from              [2022-09-20 Tue 15:26]
    :END:
    + Ref: [[https://emacs.stackexchange.com/a/69537/418][Is there a "switch to buffer" hook? - Emacs Stack Exchange]]
    #+begin_src emacs-lisp
      (defun gjg/display-agenda-context (w)
        "Used in hook to modify ?? when ` *Agenda Commands*` buffer is activated."
        ;; very generic hook by necessity, so we must discover which buffer we have
        (when (string= (buffer-name) " *Agenda Commands*")
          (setq mode-name
                (concat "Fundamental[" (symbol-name gjg/current-agenda-context) "]"))))

      (add-hook 'window-selection-change-functions 'gjg/display-agenda-context)
      ;; (remove-hook 'window-selection-change-functions 'gjg/display-agenda-context)
    #+end_src
*** Create a context switcher
    :PROPERTIES:
    :ID:       6d89a208-8799-405c-b996-395ca8fbf4de
    :END:
    #+begin_src emacs-lisp
      (defun gjg/select-agenda-context (&optional context)
        "Set current Org Agenda context (work/home etc)."
        (interactive)

        (if context
            (setq gjg/current-agenda-context context)
          (let ((selection (intern (completing-read (format "Set Org Agenda context[%s]: " gjg/current-agenda-context) gjg/agenda-contexts-alist ))))
            (setq gjg/current-agenda-context selection)))
        (setq org-agenda-files
              (cadr (assoc gjg/current-agenda-context gjg/agenda-contexts-alist))))
      (global-set-key (kbd "C-c b") 'gjg/select-agenda-context)
    #+end_src
** Unfill paragraph
   :PROPERTIES:
   :ID:       8c584065-8611-4926-8535-4f69345aa10a
   :END:
   Very useful - recognize paragraphs in text with line endings made just for display
   #+begin_src emacs-lisp
     ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
     (defun gjg/unfill-paragraph ()
       "Takes a multi-line paragraph and makes it into a single line of text."
       (interactive)
       (let ((fill-column (point-max)))
         (fill-paragraph nil)))

   #+end_src
** Replace fancy quotes/dashes with plain old quotes/dashes
   :PROPERTIES:
   :ID:       6b620c2d-aba5-43e3-841a-e19fe7e2e78d
   :END:
   #+begin_src emacs-lisp
     (defun replace-smart-quotes (beg end)
       "Replace 'smart quotes' in buffer or region with ascii quotes."
       (interactive "r")
       (format-replace-strings '(("\x201C" . "\"")
                                 ("\x201D" . "\"")
                                 ("\x2018" . "'")
                                 ("\x2019" . "'")
                                 ("\221" . "`")
                                 ("\222" . "'")
                                 ("\223" . "\"")
                                 ("\224" . "\"")
                                 ("\226" . "-")
                                 ("\227" . "--")
                                 )
                               nil beg end))
   #+end_src
** Make acronyms of text
   :PROPERTIES:
   :ID:       5e9d588e-4ca0-4336-b188-28340430d7fd
   :END:
   Great World Blunders -> gwb
     #+begin_src emacs-lisp
     (defun gjg/acronyminize (text &optional do-capitalize)
       "Make an acronym from the text
     do-capitalize: t means run text through capitalize function, nil will respect CamelCase
     "
       (save-excursion
         (setq case-fold-search nil)
         (downcase
          (replace-regexp-in-string
           "[^A-Z]" ""
           (if do-capitalize (capitalize text) text) nil t))
         ))
     #+end_src
** Add unique IDs to Org Mode headers
   :PROPERTIES:
   :ID:       2ec9cebc-57e0-4154-b8d8-42702f0ef974
   :END:
   + ref [[https://stackoverflow.com/a/13349772/457574][emacs - Assign IDs to every entry in Org-mode - Stack Overflow]]
     #+begin_src emacs-lisp
       (require 'org-id)
       (defun gjg/add-org-header-ids ()
         (save-excursion
           (goto-char (point-max))
           (while (outline-previous-heading)
             (org-id-get-create))))
     #+end_src
** Move next s-expression past current scope
   :PROPERTIES:
   :ID:       3cd0bcfa-2f09-414f-85ea-0f6a267c89f0
   :END:
   TODO this is a good candidate for the trash bin
     #+begin_src emacs-lisp
     (defun gjg/move-next-sexp-past-current-scope ()
       "kill sexp following point, move past current scope/sexp/function, yank"
       (beginning-of-line)
       ;; (save-excursion
       (let ((beg (point)))
         (re-search-forward "^[ \t]*function[ \t]+[^}]+?}" (point-max) nil)
         (mark-defun)
         (kill-region (point) (mark)))
       (forward-line)
       (yank)
       (indent-region (mark) (point)))
     #+end_src
* Provide the library - we're done!
  :PROPERTIES:
  :ID:       cbd06cb9-7d27-4d09-be18-150053dbede0
  :END:
   #+begin_src emacs-lisp
    (provide 'gjg-functions)
   #+end_src
