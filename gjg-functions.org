#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:2 todo:t |:t
#+TITLE: gjg-functions
#+DATE: <2022-08-13 Sat>
#+AUTHOR: Greg Grubbs
#+EMAIL: gregory.grubbs@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)
#+setupfile: ~/projects/emacs/org-html-themes/org/theme-readtheorg-local.setup
#+property: header-args:emacs-lisp :tangle ~/emacs-gregoryg/emacs/gjg-functions.el :comments org :results none
#+property: header-args:bash :shebang #!/usr/bin/env bash :results none

* gjg-functions library
** Variables defvar and defcustom
   #+begin_src emacs-lisp
     (defcustom gjg/audioplayer "mplayer"
       "Audio player for this machine"
       :type 'string
       :group 'gjg)

     (defcustom gjg/employer-name "Poodles R Us"
       "Name used by Gmail for use in gmail-buffer-or-launch script"
       :type 'string
       :group 'gjg)

     (defcustom gjg/employer-org-file "~/wherever/poodlepep/poodlepep.org.gpg"
       "Path to probably-encrypted org file to use with capture templates"
       :type 'string
       :group 'gjg)

     (defcustom gjg/visual-notify-command "notify-send"
       "Command to create a visual notification"
       :type 'string
       :group 'gjg)

     (defcustom gjg/preferred-light-theme "brutalist"
       "Current preferred light theme"
       :type 'string
       :group 'gjg)

     (defcustom gjg/preferred-dark-theme "brutalist-dark"
       "Current preferred dark theme"
       :type 'string
       :group 'gjg)

     (defcustom gjg/stardog-connections-alist
       nil
       "List of stardog connections "
       :type '(alist :key-type (symbol :tag "Connection name")
                     :value-type (list (string :tag "Endpoint URL")
                                       (string :tag "Database name")
                                       ))
       :group 'gjg
       :version "0.1"
       )

   #+end_src
** Quick theme switching
   #+begin_src emacs-lisp
    (defun gjg/go-dark ()
      "switch to preferred dark theme"
      (interactive)
      (load-theme (intern gjg/preferred-dark-theme) t)
      (disable-theme (intern gjg/preferred-light-theme)))
    (defun gjg/go-light ()
      "switch to preferred light theme"
      (interactive)
      (load-theme (intern gjg/preferred-light-theme) t)
      (disable-theme (intern gjg/preferred-dark-theme)))

   #+end_src
** Work/Job/Consulting/Employer functions
   #+begin_src emacs-lisp
    (defun gjg/nag-timer () "Nag me when there isn't a clock running"
           (unless (marker-buffer org-clock-marker)
             (call-process-shell-command gjg/visual-notify-command nil 0 nil "Org-Mode\\ Nudge" "What\\'s\\ \\going\\ on?")
             (if (fboundp 'async-start-process)
                 (async-start-process "naggynorman" "espeak" nil "What the heck is going on?")
               (call-process "espeak" nil nil nil  "What the heck is going on?"))))

    (defun gjg/nag () "Start nagging me every 15 minutes when not clocked in to an Org task"
           (interactive)
           (cancel-function-timers 'gjg/nag-timer) ;; don't start two timers
           (run-with-timer 1 900 'gjg/nag-timer))

    (defun gjg/cancel-nag () "Cancel the org-mode clock nag timer"
           (interactive)
           (cancel-function-timers 'gjg/nag-timer))

    (defun gjg/open-work-agenda ()
      (interactive)
      (org-agenda nil "W"))
   #+end_src
** Stardog and other RDF/SPARQL databases
   #+begin_src emacs-lisp
     (defun gjg/set-sparql-header-args (url db endpoint)

       (let ((fullurl (concat url "/" db "/" endpoint "/" )))
         ;; (message "My lovely url is %s\n" fullurl)
         (setq-local org-babel-default-header-args:sparql
                     (cons `(:url  . ,fullurl)
                           (assq-delete-all :url org-babel-default-header-args:sparql)))))
     (defun gjg/set-stardog-bash-header-args (tramp-path )
       (setq-local org-babel-default-header-args:bash
                   (cons `(:dir . ,tpath)
                         (assq-delete-all :dir org-babel-default-header-args:bash))))

     (defun gjg/annotate-sparql-selection (s)
       "Provide annotations for completing-read using the data in a SPARQL Stardog server table"
       ;; (message (format "DEBUG: stardog list |%s|, table |%s}" s minibuffer-completion-table))
       (let ((item (assoc (intern s) minibuffer-completion-table)))
         (when item (concat
                     (string-pad "" (- 20 (string-width (symbol-name (nth 0 item)))))
                     (nth 1 item)
                     " " (nth 2 item) " " (nth 3 item)))))

     (defun gjg/set-sparql-headers ()
       "Set Org Babel headers for SPARQL.   table named `svar` should have these columns: connection-name, base-url, database, api-type"
       (interactive)
       (let* ((marginalia-align-offset 80)
              (completion-extra-properties '(:annotation-function gjg/annotate-sparql-selection))
              (myconnection (assoc (intern (completing-read "SPARQL Server name: " gjg/stardog-connections-alist)) gjg/stardog-connections-alist))
              (connection-name (nth 0 myconnection))
              (url (nth 1 myconnection))
              (db (nth 2 myconnection))
              (api-type "query"))
         ;; (message (format "I will surely set sparql header args to %s %s %s %s" connection-name url db api-type))
         (gjg/set-sparql-header-args url db api-type)))
   #+end_src
**  Odds and ends
   #+begin_src emacs-lisp
    (defun replace-smart-quotes (beg end)
      "Replace 'smart quotes' in buffer or region with ascii quotes."
      (interactive "r")
      (format-replace-strings '(("\x201C" . "\"")
                                ("\x201D" . "\"")
                                ("\x2018" . "'")
                                ("\x2019" . "'")
                                ("\221" . "`")
                                ("\222" . "'")
                                ("\223" . "\"")
                                ("\224" . "\"")
                                ("\226" . "-")
                                ("\227" . "--")
                                )
                              nil beg end))

    ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
    (defun gjg/unfill-paragraph ()
      "Takes a multi-line paragraph and makes it into a single line of text."
      (interactive)
      (let ((fill-column (point-max)))
        (fill-paragraph nil)))

    (defun gjg/acronyminize (text &optional do-capitalize)
      "Make an acronym from the text
    do-capitalize: t means run text through capitalize function, nil will respect CamelCase
    "
      (save-excursion
        (setq case-fold-search nil)
        (downcase
         (replace-regexp-in-string
          "[^A-Z]" ""
          (if do-capitalize (capitalize text) text) nil t))
        ))

    (defun gjg/add-ids-to-headers ()
      "Add unique IDs to all headers in a buffer from current point; for use with org-mobile"
      (interactive)
      (save-excursion
        (org-back-to-heading t)
        (while (not (eobp))
          (org-id-get-create) ;; only creates an ID property if none exists
          (outline-next-heading))))

    (defun gjg/move-next-sexp-past-current-scope ()
      "kill sexp following point, move past current scope/sexp/function, yank"
      (beginning-of-line)
      ;; (save-excursion
      (let ((beg (point)))
        (re-search-forward "^[ \t]*function[ \t]+[^}]+?}" (point-max) nil)
        (mark-defun)
        (kill-region (point) (mark)))
      (forward-line)
      (yank)
      (indent-region (mark) (point)))


    ;; TODO: integrate lsp-mode maybe someday

    ;; ** LSP-Mode
    ;; #+begin_src emacs-lisp :tangle no
    ;; (use-package lsp-mode
    ;;   :ensure t
    ;;   :commands lsp
    ;;   :custom
    ;;   (lsp-auto-guess-root nil)
    ;;   (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    ;;   :bind (:map lsp-mode-map ("C-c C-f" . lsp-format-buffer))
    ;;   :hook ((python-mode c-mode c++-mode) . lsp))


    ;; (use-package lsp-ui
    ;;   :after lsp-mode
    ;;   :ensure t
    ;;   :diminish
    ;;   :commands lsp-ui-mode
    ;;   :custom-face
    ;;   (lsp-ui-doc-background ((t (:background nil))))
    ;;   (lsp-ui-doc-header ((t (:inherit (font-lock-string-face italic)))))
    ;;   :bind (:map lsp-ui-mode-map
    ;;               ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
    ;;               ([remap xref-find-references] . lsp-ui-peek-find-references)
    ;;               ("C-c u" . lsp-ui-imenu))
    ;;   :custom
    ;;   (lsp-ui-doc-enable t)
    ;;   (lsp-ui-doc-header t)
    ;;   (lsp-ui-doc-include-signature t)
    ;;   (lsp-ui-doc-position 'top)
    ;;   (lsp-ui-doc-border (face-foreground 'default))
    ;;   (lsp-ui-sideline-enable nil)
    ;;   (lsp-ui-sideline-ignore-duplicate t)
    ;;   (lsp-ui-sideline-show-code-actions nil)
    ;;   :config
    ;;   ;; Use lsp-ui-doc-webkit only in GUI
    ;;   (setq lsp-ui-doc-use-webkit t)
    ;;   ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
    ;;   ;; https://github.com/emacs-lsp/lsp-ui/issues/243
    ;;   (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    ;;     (setq mode-line-format nil)))
    ;; #+end_src


   #+end_src
** Provide the library - we're done!
   #+begin_src emacs-lisp
    (provide 'gjg-functions)
   #+end_src
