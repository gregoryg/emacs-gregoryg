#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:2 todo:t |:t
#+TITLE: Scripts and configs to support tiling window managers including EXWM
#+DATE: <2020-11-21 Sat>
#+AUTHOR: Greg Grubbs
#+EMAIL: gregory@dynapse.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 28.0.50 with nativecomp
#+setupfile: ~/projects/emacs/org-themes/src/readtheorg_inline/readtheorg_inline.theme
#+PROPERTY: header-args:emacs-lisp :results none
#+PROPERTY: header-args:bash :results none :comments both :shebang #!/usr/bin/env bash
* Overview

  Minimalistic desktop environment things that are closely tied with my EXWM configuration
  and/or include some emacs lisp will be found in [[file:README.org][README.org]]

  This file handles creating all the basics for a DYI Linux desktop environment.  If you
  forego the pre-packaged desktop environments such as Gnome, KDE, XFCE, Mate, etc. you
  will need to substitute some of the conveniences those environments offer.

  Things like a panel, system tray, media controls, and so forth.

  The configuration below is very much geared to tiling window managers - I use EXWM, but
  much of the config and helper applications would be useful with i3, StumpWM and others.

  Tangle this file to generate shell scripts.

* Control scripts
** Volume
   Volume control uses the =pulseaudio-control= script

   To simplify invocation of the command, create a wrapper script per machine with all
   the parameters filled in.

   Here's the wrapper for GladOS, my Dell XPS 13" 2-in-1 laptop
   #+begin_src bash :tangle ~/bin/pulseaudio-control-glados
     # The arguments for this script:
     if [ -z "$1" ]; then
         echo "\
     Usage: $0 [output, up, down, mute, unmute, togmute, next-node, sync]"
         exit 0
     fi
     ~/bin/pulseaudio-control \
         --icons-volume " , " \
         --icon-muted " " \
         --node-nicknames-from "device.description" \
         --node-nickname "alsa_output.pci-0000_00_1f.3.analog-stereo:  Speakers" \
         --node-nickname "bluez_output.AC_BF_71_F5_46_BE.1: High of the Low" \
         $1
   #+end_src
** Laptop battery level notifications
   #+begin_src bash :tangle ~/bin/notify-battery-levels.sh
     # Run this script as a cronjob every 5 minutes or so, to get notifications when
     # battery percentage goes below 30% or above 80%.
     # Cronjob line example:
     # */5 * * * * /bin/bash /path/to/battery_health_notifications.sh

     # This line is to make notify-send always work, also when run in a crontab.
     # https://askubuntu.com/questions/298608/notify-send-doesnt-work-from-crontab/346580#346580
     export $(grep -z DBUS_SESSION_BUS_ADDRESS /proc/$(pgrep -u $LOGNAME emacs)/environ | tr '\0' '\n')
     export DISPLAY=:0

     ICON_LOW="/usr/share/icons/Papirus/48x48/status/battery-low.svg"
     ICON_GOOD="/usr/share/icons/Papirus/48x48/status/battery-good.svg"
     TARGET_MAX=80
     TARGET_MIN=20
     TARGET_STOP_NAGGING=85 # stop nagging on full battery after this threshold
     BATTERY_PATH=$(upower -e | grep battery_BAT0)
     LINE_POWER_PATH=$(upower -e | grep line_power_AC)
     BATTERY_PERCENTAGE=${BATTERY_PERCENTAGE:-$(upower -i $BATTERY_PATH | grep 'percentage:' | awk '{ print $2 }' | sed 's/%//')}
     CABLE_PLUGGED=${CABLE_PLUGGED:-$(upower -i $LINE_POWER_PATH | grep -A2 'line-power' | grep online | awk '{ print $2 }')}

     if [[ $CABLE_PLUGGED == 'yes' ]]; then
         if [ $BATTERY_PERCENTAGE -ge ${TARGET_MAX} ] && [ $BATTERY_PERCENTAGE -lt ${TARGET_STOP_NAGGING} ] ; then
             /usr/bin/notify-send --urgency=normal --icon=${ICON_GOOD} "Battery optimization" "Battery reached ${TARGET_MAX}%, unplug the power cable to optimize battery life."
         fi
     else
         if [[ $BATTERY_PERCENTAGE -lt ${TARGET_MIN} ]]; then
             /usr/bin/notify-send --urgency=critical --icon=${ICON_LOW} "Battery optimization" "Battery is below ${TARGET_MIN}% (${BATTERY_PERCENTAGE}%), plug in the power cable to optimize battery life."
         fi
     fi
   #+end_src
*** Test battery high
    #+begin_src bash
      CABLE_PLUGGED=yes BATTERY_PERCENTAGE=81 ~/bin/notify-battery-levels.sh
#+end_src
*** Test battery low
    #+begin_src bash
      CABLE_PLUGGED=no BATTERY_PERCENTAGE=18 ~/bin/notify-battery-levels.sh
#+end_src
*** Scriptifically install user crontab
    + Write the crontab
    #+begin_src bash :results none
      crontab -l | tee /tmp/mycrontab
      echo '*/2 * * * * /home/gregj/bin/notify-battery-levels.sh' | tee -a /tmp/mycrontab
      crontab /tmp/mycrontab
    #+end_src
    + Check out user crontab contents
      #+begin_src bash :results value verbatim
crontab -e
      #+end_src

* OS Applications
  The shell scripts here expect certain applications to be installed, so let's take care
  of those
** Guix
  GNU Guix changes everything - packages will be added declaratively*
** Debian and Ubuntu
   #+begin_src bash
     sudo apt update
     sudo apt -y install \
          acpi \
          autorandr \
          blueman \
          cifs-utils \
          cmake \
          compton \
          cowsay \
          dbus-x11 \
          discount \
          dunst \
          evdi-dkms \
          feh \
          flatpak \
          font-manager \
          fonts-hack \
          fonts-opensymbol \
          fonts-cantarell \
          fonts-material-design-icons-iconfont \
          fonts-firacode \
          fortune-mod \
          texlive-fonts-extra \
          fonts-oxygen \
          fonts-freefont-otf \
          fortunes \
          gcc \
          git \
          gwenview \
          ipython3 \
          jupyter \
          libreoffice-gtk3 \
          libnotify-bin \
          libtool-bin \
          lightdm \
          keychain \
          locate \
          net-tools \
          nm-tray \
          network-manager-openvpn-gnome \
          numlockx \
          pdsh \
          playerctl \
          policykit-1-gnome \
          polybar \
          python3-venv \
          qlipper \
          ripgrep \
          rofi \
          ruby \
          slick-greeter \
          tree \
          vlc \
          wmctrl \
          xdotool \
          xfce4-mount-plugin \
          xfce4-panel \
          xfce4-power-manager-plugins \
          xfce4-pulseaudio-plugin \
          xfce4-screenshooter \
          xfce4-whiskermenu-plugin \
          xfconf \
          xfce4-screensaver
   #+end_src
** X Session Desktop file for Lightdm
   Having this allows EXWM to be chosen from the Display Manager

   Place in =/usr/share/xsessions/emacs.desktop=
   #+begin_src conf :tangle /sudo::/usr/share/xsessions/emacs.desktop
     [Desktop Entry]
     Encoding=UTF-8
     Type=XSession
     Name=Emacs EXWM Session
     GenericName=Window Manager
     Icon=emacs
     Exec=/usr/local/bin/emacs
     NoDisplay=false
     Hidden=false
     Categories=Application;System;
     StartupNotify=false
     X-GNOME-Autostart-Notify=false
     X-GNOME-Autostart-Phase=WindowManager
     X-GNOME-Provides=windowmanager
     X-GNOME-WMName=EXWM
     DesktopNames=EXWM
     X-LightDM-DesktopName=exwm

     [Window Manager]
     Name=exwm
     SessionManaged=true
     StartupNotification=false
   #+end_src

   Install the above as an X Session alternative
   #+begin_src bash
     sudo update-alternatives --install /usr/share/xsessions/default.desktop default-xsession.desktop /usr/share/xsessions/emacs.desktop 20
   #+end_src
** Lightdm auto-login and default user behavior
   #+begin_src conf :tangle /sudo::/usr/share/lightdm/lightdm.conf.d/42-gregthang.conf
     [Seat:*]
     autologin-user=gregj
     greeter-hide-users=false
   #+end_src
** Lightdm fancy icon for Emacs window manager
   This is for use with LightDM Slick Greeter - look for a =badges= directory for
   whichever DM you use
   #+begin_src bash
     sudo cp -v ~/emacs/pixmaps/emacs-512x512.png /usr/share/slick-greeter/badges/emacs.png
   #+end_src
** Touchpad and external mouse settings
   These configs set up my preference for scrolling direction with the touchpad and an
   external mouse.

   #+begin_src conf :tangle /sudo::/usr/share/X11/xorg.conf.d/41-gregor-libinput.conf
     # Control scrolling direction and tap to click - Add this to libinput touchpad config in  =/etc/X11/xorg.conf.d/40-libinput.conf=
     Section "InputClass"
             Identifier "libinput touchpad gorto"
             MatchIsTouchpad "on"
             MatchDevicePath "/dev/input/event*"
             Driver "libinput"
             Option "NaturalScrolling" "on"
             Option "Tapping" "on"
             Option "ClickMethod" "clickfinger"
     EndSection
     Section "InputClass"
             Identifier "libinput pointer gorto"
             MatchIsPointer "on"
             Driver "libinput"
             Option "NaturalScrolling" "off"
             Option "AccelSpeed" "0.3"
     EndSection
   #+end_src
** Touchscreen scrolling
   To =/etc/security/pam_env.conf= add
   #+begin_src conf
     MOZ_USE_XINPUT2 DEFAULT=1
   #+end_src

   Log out and back in
* Fix problems with conflicting DE features and applications
** Symptom: C-: brings up a text entry popup
   This interferes with my key binding for =dired-open=.  The same mechanism offers other
   keybindings I don't want to be stolen from Emacs: =C-.= and =S-C-u=

   The first 2 bindings bring up a handy pop-up window of emojis when invoked in a
   graphical application window.

   The offending system is =ibus=, installed by the Zoom Debian package and potentially by
   various desktop environments.

   The fix: invoke =ibus-setup=, and delete all keyboard shortcuts under the =Emoji= tab

* Set default applications
  Here's what =mimeapps.list= looks like after a year of use on Debian
  #+begin_src conf :tangle no
    # :tangle ~/.config/mimeapps.list
    [Default Applications]
    text/html=microsoft-edge.desktop
    x-scheme-handler/http=microsoft-edge.desktop
    x-scheme-handler/https=microsoft-edge.desktop
    x-scheme-handler/about=microsoft-edge.desktop
    x-scheme-handler/unknown=microsoft-edge.desktop
    x-scheme-handler/webcal=microsoft-edge.desktop
    x-scheme-handler/mailto=microsoft-edge.desktop
    text/org=emacsclient.desktop
    text/markdown=emacsclient.desktop;
    x-scheme-handler/org-protocol=org-protocol.desktop
    image/gif=eom.desktop

    [Added Associations]
    text/turtle=emacsclient.desktop;
    application/x-sms-rom=emacsclient.desktop;
    text/org=emacsclient.desktop;
    text/markdown=emacsclient.desktop;
    video/mp4=vlc.desktop;org.gnome.Totem.desktop;
    video/x-flv=vlc.desktop;
    image/gif=eom.desktop;
  #+end_src
* Useful scripts when no DE is available
** Script to run autostart apps including compositor
  I run a shell script which starts up key helper apps like albert/ulauncher, picom/compton and
  xscreensaver.  Also some common mouse and keyboard settings that are ordinarily handled
  in the DE.

  NOTE: If both =xscreensaver= and =xfce4-screensaver= are running, they can "fight" for
  control in the Lightdm screen and prevent any user input!  So for now I will just use
   =xfce4-screensaver=

  #+begin_src bash :tangle ~/bin/dns-restarter.sh
    sudo systemctl restart systemd-resolved.service
  #+end_src
  #+begin_src bash :tangle ~/bin/capsctrl.sh
    # Set CAPS LOCK as control
    setxkbmap -verbose  -option "ctrl:nocaps"
    # To re-enable caps lock
    # setxkbmap -option
  #+end_src
  #+begin_src bash :tangle ~/bin/numlockon.sh
    numlockx on
  #+end_src
  #+begin_src bash :tangle ~/bin/emacswm.sh
    echo "Running emacswm.sh script from `pwd`"
    # Set CAPS LOCK key as CTRL
    ~/bin/capsctrl.sh
    ~/bin/numlockon.sh
    # Network Manager using CLI
    # ref https://core.docs.ubuntu.com/en/stacks/network/network-manager/docs/configure-wifi-connections
    # If you get 'secrets were required' when trying to connect, delete the connection first
    # sudo nmcli d wifi   # to scan wifi
    # nmcli connection delete moodseer-5G
    # nmcli d wifi connect moodseer-5G password blah

    # run an authentication agent for graphical programs that need SUDO - like GParted
    if [ -x "/usr/lib/polkit-gnome-authentication-agent-1" ] ; then
        (cd /tmp && nohup /usr/lib/polkit-gnome-authentication-agent-1&)
    elif [ -x "/usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1" ] ; then
        (cd /tmp && nohup /usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1&)
    fi


    # assure that battery monitoring is goin' on
    acpi

    # Set scrolling direction to "natural"
    xmodmap -e "pointer = 1 2 3 4 5"

    rm -vf nohup.out
    echo Start notification system
    nohup dunst&


    nohup nm-applet&
    # echo Remember iflipb for changing buffers - and/or buffer-expose-mode
    # xrandr --output eDP-1 --brightness .8

    echo Start xscreensaver
    xfce4-screensaver -no-splash &

    nohup xfce4-power-manager&

    echo Start compositor
    ~/bin/reset-compositor.sh

  #+end_src
** Scripts to rotate wallpaper on multiple screens
   The schedule script runs only if it is not already running
   #+begin_src bash :tangle ~/bin/rotate-wallpapers.sh
     # # Get active monitors
     # IFS=$'\n'
     # for monitor in `xrandr --listactivemonitors| egrep '^ *[0-9]'`
     # do
     #     cleaned=`echo $monitor | sed -E 's/^ *([0-9]+): [\+\*]+([-0-9a-zA-Z]+) ([0-9]+)[^x]*x([0-9]+).+/\1 \2 \3x\4/'`
     #     # echo $cleaned
     #     IFS=' ' read mon name res <<< ${cleaned}
     #     echo "Monitor #${mon} named ${name} has resolution ${res}"
     #     # naiively assume correct dir exists
     #     DISPLAY=:0 /usr/bin/feh --xinerama-index ${mon} --bg-max --randomize ~/backgrounds/safe/${res}/
     # done

     # DISPLAY=:0.0 /usr/bin/feh --xinerama-index 1 --bg-max --randomize ~/backgrounds/safe/1920x1200/
     # DISPLAY=:0.0 /usr/bin/feh --xinerama-index 0 --bg-max --randomize ~/backgrounds/safe/3440x1440/

     myrandomfile=$(find ~/backgrounds/safe/ -type f | shuf | head -1)
     myrandomfile2=$(find ~/backgrounds/safe/ -type f | shuf | head -1)
     echo ${myrandomfile} > /tmp/last-wallpaper.txt
     feh --bg-fill "${myrandomfile}" "${myrandomfile2}"
   #+end_src
   #+begin_src bash :tangle ~/bin/schedule-rotate-wallpapers.sh
     #!/usr/bin/env bash
     # check for running process
     pids=$(/bin/pgrep -f schedule-rotate-wallpapers )
     for pid in $pids ; do
         if [ $pid != $$ ] ; then
             echo "already running"
             exit 0
         fi
     done

     while true
     do
         # DISPLAY=:0.0 /usr/bin/feh --bg-max --randomize ~/backgrounds/safe/1920x1200/
         /home/gregj/bin/rotate-wallpapers.sh
         sleep 20m
     done
   #+end_src
   #+begin_src bash :tangle ~/bin/random-wallpaper-by-keyword.sh
     word=$1

     if [ -z "${word}" ] ; then
         echo "Usage: $0 'keyword'"
         exit 0
     fi

     newpaper=$(find ~/backgrounds -iname "*${word}*" | shuf | head -1)
     newpaper2=$(find ~/backgrounds -iname "*${word}*" | shuf | head -1)
     if [ -n "${newpaper}" ] ; then
         feh --bg-fill "${newpaper}" "${newpaper2}"
     else
         echo "No wallpaper found with keyword \"${word}\" - skipping."
         exit 0
     fi

   #+end_src
** Script to launch panel with good widgets
   #+begin_src bash :tangle ~/bin/xfce-panel-widgets.sh
     nohup xfce4-panel &
     # Clipboard manager
     # nohup parcellite &
     # Network Manager applet
     nohup nm-applet --indicator &
     # Bluetooth setup + file transfer
     nohup /usr/bin/python3 /usr/bin/blueman-applet &
     # # Printer notifications - this applet was causing problems with EXWM - somehow added an unseen dedicated window
     # nohup /usr/bin/python3 /usr/share/system-config-printer/applet.py &
   #+end_src
** Script to toggle autohiding of xfce4-panel
   #+begin_src bash :tangle ~/bin/toggle-xfce4-panel-hide.sh
     ##### EDIT these values to suit
     # the panel to affect
     PANEL=1

     # the hide behaviour setting (1=intelligently, 2=always)
     HIDE=2

     ##### Don't edit anything below
     # get the current setting
     CURR=$(xfconf-query -c xfce4-panel -p /panels/panel-$PANEL/autohide-behavior)

     xfconf-query -c xfce4-panel -p /panels/panel-$PANEL/disable-struts -s false
     # show hidden or hide displayed
     case $CURR in
             #currently visible, so hide it
         0) xfconf-query -c xfce4-panel -p /panels/panel-$PANEL/autohide-behavior -s $HIDE ;;
             # currently intelligent, set to visible
         1) xfconf-query -c xfce4-panel -p /panels/panel-$PANEL/autohide-behavior -s 0 ;;
             # currently always hidden, set to visible
         2) xfconf-query -c xfce4-panel -p /panels/panel-$PANEL/autohide-behavior -s 0 ;;
             # otherwise ignore
         ,*) ;;
     esac

   #+end_src



** Script to adjust screen brightness
   #+begin_src bash :tangle ~/bin/gjg-bright.sh
     #!/usr/bin/env bash

     # base dir for backlight class
     basedir="/sys/class/backlight/"

     # get the backlight handler
     handler=$basedir$(ls $basedir)"/"

     # get current brightness
     old_brightness=$(cat $handler"brightness")

     # get max brightness
     max_brightness=$(cat $handler"max_brightness")

     # get current brightness %
     old_brightness_p=$(( 100 * $old_brightness / $max_brightness ))

     # calculate new brightness %
     new_brightness_p=$(($old_brightness_p $1))

     # calculate new brightness value
     new_brightness=$(( $max_brightness * $new_brightness_p / 100 ))

     # set the new brightness value
     sudo chmod 666 $handler"brightness"
     echo $new_brightness > $handler"brightness"

   #+end_src
**  Script to invert colors on the active window
   I use this to cleanse the sins of Spotify's dark-only theme

   #+begin_src bash :tangle ~/bin/invert-color.sh
     ID=$(xdotool getactivewindow)
     if [ $? -ne 0 ]; then
         echo "Cannot get ID of active window - exiting"
         exit 0
     fi
     CLASS=$(xprop -id "$ID"  | grep "WM_CLASS" | awk '{print $4}')
     COND="class_g=${CLASS}"

     if [ "$(pidof compton)" ];
     then
         pkill compton
         compositor=compton
     elif [ "$(pidof picom)"];
     then
         pkill picom
         compositor=picom
     else
         echo "No known compositor is running - exiting"
         exit 0
     fi

     ID=$(xdotool getactivewindow)
     CLASS=$(xprop -id "$ID"  | grep "WM_CLASS" | awk '{print $4}')
     COND="class_g=${CLASS}"
     ${compositor} --invert-color-include "$COND" &
   #+end_src
   #+begin_src bash :tangle ~/bin/reset-compositor.sh
     if which picom ; then
         pkill picom
        nohup picom &
     elif which compton ; then
         pkill compton
         nohup compton &
     fi
   #+end_src
* Autorandr setup
  The config to start with is set up using =autorandr --save <profile>= with and without
  monitors attached.  I create =laptop-only=, =dual-monitor= and =monitor-only= profiles

  The resulting config files are stored in =~/.config/autorandr/=

  In addition, there are =postswitch= scripts that run whenever a profile is activated.
  Set to right-handed mouse in laptop-only for the trackpad, left-handed for external
  mouse when using external monitor.

  #+begin_src bash
    mkdir -p ~/.config/autorandr/laptop-only ~/.config/autorandr/dual-monitor ~/.config/autorandr/monitor-only
  #+end_src

** Laptop-only
   #+begin_src bash :tangle ~/.config/autorandr/laptop-only/postswitch
     /home/gregj/bin/righty
     /home/gregj/bin/capsctrl.sh
     /home/gregj/bin/schedule-rotate-wallpapers.sh
   #+end_src
** Dual-monitor
   #+begin_src bash :tangle ~/.config/autorandr/dual-monitor/postswitch
     /home/gregj/bin/lefty
     /home/gregj/bin/capsctrl.sh
     /home/gregj/bin/schedule-rotate-wallpapers.sh
   #+end_src
** Monitor-only
   #+begin_src bash :tangle ~/.config/autorandr/monitor-only/postswitch
     /home/gregj/bin/lefty
     /home/gregj/bin/capsctrl.sh
     /home/gregj/bin/schedule-rotate-wallpapers.sh
   #+end_src
* Polybar including modules and scripts
** Python virtual environment including Gmail packages
  This virtual environment supports the Unread Gmail module used with Polybar.  The same
  virtual environment will also be used for Jupyter Lab
  #+begin_src bash :results both
    python3 -m venv ~/.local/python-venvs/gmail/
    source ~/.local/python-venvs/gmail/bin/activate
    pip install google google_auth google_auth_oauthlib googleapi
    deactivate
    # Test with
    # ~/.local/python-venvs/gmail/bin/python3 ~/.config/polybar/gmail-unread.py

  #+end_src
** Script to pause Gmail unread reporting
   #+begin_src bash :tangle ~/bin/gmail-unread-toggle-pause.sh
     if [ -f "/tmp/pause-gmail-unread" ]; then
         rm -f /tmp/pause-gmail-unread
         echo Unread gmail threads resumed.
     else
         touch /tmp/pause-gmail-unread
         echo Unread gmail threads paused.
     fi
   #+end_src
* Applications not handled by OS package managers - using Flatpak
   #+end_src
  Guix, Debian, and other preferred OS distributions are "OSS Puritan" to varying degress.

  To manage the unsavory apps I may want to run, I have chosen the Flatpak system.  It's
  needlessly huge in that it downloads duplicates of libraries for different packages, but
  it's easy to maintain and runs fast.

  To control where things are installed, we can add a bind mount to the key app install paths
  + System-wide path =/var/lib/flatpak=
  + Local path =~/.local/share/flatpak= (and maybe =~/.var/app=)

  I use =--user= installs on my laptop(s)


  Examples of apps I prefer to run on Flatpak:
  + Discord
  + Draw.io
  + Logseq
  + Microsoft Edge
  + Microsoft Teams
  + Obsidian
  + OBS Studio (settings are kept more consistently)
  + Signal Desktop
  + Slack
  + Steam
  + Visual Studio Code
  + Zoom
** Add the primary repository
  Add the Flathub package repository
  #+begin_src bash
    flatpak remote-add --user \
            --if-not-exists \
            flathub https://flathub.org/repo/flathub.flatpakrepo
    # For system-wide, do the same without --user and run as root
  #+end_src
** Names and notes for Flatpak Applicatons
*** Firefox - org.mozilla.firefox
   + Firefox supports the flatpak distribution method.  Neither Google nor Microsoft (for
     Edge) are supporting it
   + Go to preferences to allow DRM content - otherwise there will be no audio on YouTube videos
*** Discord - com.discordapp.Discord
*** Slack - com.slack.Slack
*** Signal Desktop - org.signal.Signal
*** Spotify - com.spotify.Client
*** Steam - com.valvesoftware.Steam
    For game =.desktop= shortcuts, open up the xdg directories.  Open up any library
    folders used as well
    #+begin_src bash
      flatpak --user override --filesystem=/data/Steam com.valvesoftware.Steam
      flatpak --user override --filesystem=xdg-data/icons com.valvesoftware.Steam
      flatpak --user override --filesystem=xdg-data/applications com.valvesoftware.Steam
      flatpak --user override --filesystem=xdg-desktop com.valvesoftware.Steam
      flatpak --user override --filesystem=/data/music com.spotify.Client
    #+end_src
*** Visual Studio Code - OSS - com.visualstudio.code-oss
*** Zoom - us.zoom.Zoom
  + Give access to virtual backgrounds
    #+begin_src bash
      flatpak --user override --filesystem=~/backgrounds us.zoom.Zoom
      flatpak --user override --filesystem=~/.zoom us.zoom.Zoom
    #+end_src
  + Run Zoom once, exit, then edit ~/.var/app/us.zoom.Zoom/config/zoomus.conf
    Set =enableMiniWindow=false=
  + Add MIME handler =x-scheme-handler/zoommtg=us.zoom.Zoom.desktop= to
    =~/.config/mimeapps.list=
** Special cases to place in =~/bin=
*** AWS CLI
     Debian apt gets weird about updating the AWS CLI - I install it with curl/wget and
     thereafter let the command keep itself updated.

     #+begin_src bash :results silent
       cd /tmp/
       curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
       unzip awscliv2.zip
       ./aws/install --install-dir ~/bin/awscli/ --bin-dir ~/bin/
     #+end_src
* Desktop files to use with Albert / ulauncher / rofi
** Assure directories are created before tangling
   #+begin_src bash
     mkdir -p ~/.local/share/applications ~/.local/share/pixmaps/
     sudo update-alternatives --install /usr/bin/x-www-browser x-www-browser /usr/bin/firefox 50
   #+end_src
** Images referred to in the files below
   These images are to be placed in =~/.local/share/pixmaps/=

   Copy all images from the [[file:~/projects/emacs/emacs-gregoryg/emacs/pixmaps/][~/emacs/pixmaps]] directory
   #+begin_src bash :results none
     rsync -av ~/emacs/pixmaps/ ~/.local/share/pixmaps/
   #+end_src
** Amazon.com
   #+begin_src conf :tangle ~/.local/share/applications/amazon.desktop
     [Desktop Entry]
     Name=Amazon.com
     Comment=That's right
     Exec=xdg-open https://www.amazon.com/
     Icon=/home/gregj/.local/share/pixmaps/amazon-logo-rgb.png
     Terminal=false
     Type=Application
     Categories=Shopping;Retail;
   #+end_src
** Browser
   + generic browser, specified by update-alternatives x-www-browser *or* xdg-settings
   #+begin_src conf :tangle ~/.local/share/applications/browser-generic.desktop
     [Desktop Entry]
     Name=Browser
     Comment=The default web browser
     Exec=xdg-open https://
     Icon= /home/gregj/.local/share/pixmaps/browser-mashup-icon-512x512.png
     Terminal=false
     Type=Application
     Categories=Fun;Web
   #+end_src
** Canvas Credit Union
   #+begin_src conf :tangle ~/.local/share/applications/canvas-cu.desktop
     [Desktop Entry]
     Name=Canvas CU
     Comment=That's right
     Exec=xdg-open https://digital.canvas.org/
     Icon=/home/gregj/.local/share/pixmaps/canvas-cu-logo-512x512.png
     Terminal=false
     Type=Application
     Categories=Bank
   #+end_src
** Capsctrl
   #+begin_src conf :tangle ~/.local/share/applications/capsctrl.desktop
     [Desktop Entry]
     Name=Capsctrl
     Comment=Use CAPS LOCK as control
     Exec=/home/gregj/bin/capsctrl.sh
     Icon= /home/gregj/.local/share/pixmaps/CAPSoff.gif
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Chrome
   Use this if you are not using the OS package manager or Flatpak installation - set
   =:tangle no= if you are
   #+begin_src conf :tangle no
     # ~/.local/share/applications/chrome.desktop
     [Desktop Entry]
     Encoding=UTF-8
     Name=Google Chrome
     GenericName=Web Browser
     Comment=Browse the Web
     Exec=flatpak run com.google.Chrome
     Icon= /home/gregj/.local/share/pixmaps/google-cloud-logo.png
     Terminal=false
     Type=Application
     Categories=Application;Network;WebBrowser;
     MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;
     StartupNotify=True
   #+end_src
** Cloudflare
   #+begin_src conf :tangle ~/.local/share/applications/cloudflare.desktop
     [Desktop Entry]
     Name=Cloudflare
     Comment=
     Exec=xdg-open https://cloudflare.com
     Icon= /home/gregj/.local/share/pixmaps/cloudflare-icon.png
     Terminal=false
     Type=Application
     Categories=Storage
   #+end_src

** Cockpit / Red Hat Web Console
   #+begin_src conf :tangle ~/.local/share/applications/cockpit.desktop
     [Desktop Entry]
     Name=Cockpit
     Comment=Red Hat RHEL Web Console on protomolecule
     Exec=xdg-open http://cockpit.magichome:9090
     Icon= /home/gregj/.local/share/pixmaps/org.cockpit_project.CockpitClient-512x512.png
     Terminal=false
     Type=Application
     Categories=Administration;sysadmin
   #+end_src
** Dired
   #+begin_src conf :tangle ~/.local/share/applications/emacs-dired.desktop
     # Stolen from https://emacs.stackexchange.com/a/16394/418
     [Desktop Entry]
        Encoding=UTF-8
        Version=1.0
        Type=Application
        NoDisplay=true
        Exec=emacsclient --no-wait --eval '(dired "%f")'
        Name=Dired
        Comment=Use Emacs Dired as file manager for OS
        Icon= /home/gregj/.local/share/pixmaps/rotate-wallpapers.jpg
        # Terminal=false
        Categories=Office;Productivity;Coolness
   #+end_src

** DNS Restarter
# :tangle ~/.local/share/applications/dns-restarter.desktop
   #+begin_src conf :tangle no
     [Desktop Entry]
     Name=DNS Restarter
     Comment=Restart resolver service on stupid Ubuntu
     Exec=/home/gregj/bin/dns-restarter.sh
     Icon= /home/gregj/.local/share/pixmaps/ignition-sources-matches-icon.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** emacsclient
   #+begin_src conf :tangle ~/.local/share/applications/userapp-emacsclient-6OAMT0.desktop
     [Desktop Entry]
     Encoding=UTF-8
     Version=1.0
     Type=Application
     NoDisplay=true
     Exec=/usr/local/bin/emacsclient --no-wait %f
     Name=emacsclient
     Comment=Custom definition for emacsclient
   #+end_src
** Erebor Synology
   #+begin_src conf :tangle ~/.local/share/applications/erebor.desktop
     [Desktop Entry]
     Name=Erebor Synology DSM
     Comment=Erebor
     Exec=xdg-open https://erebor.magichome:5001
     Icon= /home/gregj/.local/share/pixmaps/synology.png
     Terminal=false
     Type=Application
     Categories=Storage
   #+end_src
** Firefox
   Use this if you are not using the OS package manager installation - set =:tangle no= if
   you are
   # :tangle ~/.local/share/applications/firefox.desktop
   #+begin_src conf :tangle no
          [Desktop Entry]
          Encoding=UTF-8
          Name=Firefox but scrolls
          GenericName=Web Browser
          Comment=Browse the Web
          Exec=env MOZ_USE_XINPUT2=1 /usr/bin/firefox-esr
          Icon= /home/gregj/.local/share/pixmaps/firefox-128.png
          Terminal=false
          Type=Application
          Categories=Application;Network;WebBrowser;
          MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;text/mml;
          StartupNotify=True
   #+end_src
** GitHub
   #+begin_src bash  :tangle ~/.local/share/applications/github.desktop
     [Desktop Entry]
     Name=GitHub
     Comment=GitHub
     Exec=xdg-open https://github.com/gregoryg?tab=repositories
     Icon= /home/gregj/.local/share/pixmaps/github4.jpg
     Terminal=false
     Type=Application
     Categories=Development;Coding
   #+end_src
** Google Cloud Platform
   #+begin_src bash  :tangle ~/.local/share/applications/gcp.desktop
     [Desktop Entry]
     Name=GCP Google Cloud
     Comment=GCP
     Exec=xdg-open https://console.cloud.google.com/compute/instances?authuser=0
     Icon= /home/gregj/.local/share/pixmaps/google-cloud-logo.png
     Terminal=false
     Type=Application
     Categories=Cloud;Virtualization
   #+end_src

** Google Maps
   #+begin_src bash  :tangle ~/.local/share/applications/google-maps.desktop
     [Desktop Entry]
     Name=Google Maps
     Comment=
     Exec=xdg-open https://maps.google.com?authuser=0
     Icon= /home/gregj/.local/share/pixmaps/Maps_Pin_FullColor.max-1000x1000.png
     Terminal=false
     Type=Application
     Categories=Maps;Navigation
   #+end_src

** Hangouts / Google Chat
   #+begin_src conf :tangle ~/.local/share/applications/google-chat.desktop
     [Desktop Entry]
     Name=Charlar (née Hangouts)
     Comment=Google Chat
     Exec=xdg-open https://mail.google.com/chat/u/0
     Icon=/home/gregj/.local/share/pixmaps/google-chat.png
     Terminal=false
     Type=Application
     Categories=InstantMessaging;
   #+end_src
** Home Assistant
   #+begin_src conf :tangle ~/.local/share/applications/home-assistant.desktop
     [Desktop Entry]
     Name=Home Assistant
     Comment=Home Assistant of 2 Moonz
     Exec=xdg-open http://homeassistant.magichome:8123/
     Icon= /home/gregj/.local/share/pixmaps/homeassistant.png
     Terminal=false
     Type=Application
     Categories=Automation;
   #+end_src
** Home Assistant Community Website
   #+begin_src conf :tangle ~/.local/share/applications/home-assistant-community.desktop
     [Desktop Entry]
     Name=Home Assistant Community Site
     Comment=Nerd community Homeass
     Exec=xdg-open https://community.home-assistant.io
     Icon= /home/gregj/.local/share/pixmaps/community-512x512.png
     Terminal=false
     Type=Application
     Categories=Automation;
   #+end_src
** IntelliJ IDEA Community Edition
   # :tangle ~/.local/share/applications/jetbrains-idea-ce.desktop
   #+begin_src conf :tangle no
     [Desktop Entry]
     Version=1.0
     Type=Application
     Name=IntelliJ IDEA Community Edition
     Icon=/home/gregj/Downloads/idea-IC-202.6397.94/bin/idea.svg
     Exec="/home/gregj/Downloads/idea-IC-202.6397.94/bin/idea.sh" %f
     Comment=Capable and Ergonomic IDE for JVM
     Categories=Development;IDE;
     Terminal=false
     StartupWMClass=jetbrains-idea-ce
   #+end_src
** Jellyfin media server
   #+begin_src conf :tangle ~/.local/share/applications/jellyfin.desktop
     [Desktop Entry]
     Name=Jellyfin
     Comment=Jellyfin media server
     Exec=xdg-open http://jellyfin.magichome:8096
     Icon=/home/gregj/.local/share/pixmaps/jellyfin-icon-256x256-rjpwup8s.png
     Terminal=false
     Type=Application
     Categories=Media;Music;Video
   #+end_src
** Jupyter Lab - local server
   + tangle startup script
     #+begin_src bash :tangle ~/bin/start_jupyterlab.sh
       # Requires c.ServerApp.allow_remote_access = True in ~/.config/jupyter/jupyter_lab_config.py
       # Set password with `jupyter-lab password` ; stored in ~/.config/jupyter/jupyter_server_config.json
       jupyter-lab --no-browser --ip=jupyter.127.0.0.1.nip.io --port=8442
       # jupyter-lab --ip=jupyter.127.0.0.1.nip.io --port=8442
     #+end_src
   + Tangle the desktop file
   #+begin_src conf :tangle ~/.local/share/applications/jupyter-lab.desktop
     [Desktop Entry]
     Name=Jupyter Lab
     Comment=Browse local Jupyter Lab server
     Exec=xdg-open http://aziriphale.magichome:8442
     Icon= /home/gregj/.local/share/pixmaps/1200px-Jupyter_logo.svg.png
     Terminal=false
     Type=Application
     Categories=Automation;
   #+end_src
** Lefty Loosey
   #+begin_src bash :tangle ~/bin/lefty
     xmodmap -e "pointer = 3 2 1"
   #+end_src
   #+begin_src conf :tangle ~/.local/share/applications/lefty.desktop
     [Desktop Entry]
     Name=Lefty Loosey
     Comment=Set attached mouse to left-handed use
     Exec=/home/gregj/bin/lefty
     Icon= /home/gregj/.local/share/pixmaps/lefthand_logo.gif
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** LinkedIn
   #+begin_src conf :tangle ~/.local/share/applications/linkedin.desktop
     [Desktop Entry]
     Name=LinkedIn
     Comment=Networking
     Exec=xdg-open https://linkedin.com/
     Icon=/home/gregj/.local/share/pixmaps/linkedin-glossy.jpg
     Terminal=false
     Type=Application
     Categories=Office;Networking;Social
   #+end_src
** LM Studio
   This crazy thing is distributed as an AppImage
   #+begin_src conf :tangle ~/.local/share/applications/lm-studio.desktop
     [Desktop Entry]
     Name=LM Studio
     Comment=LLM AI
     Exec=/opt/lmstudio/lms
     Icon=/home/gregj/.local/share/pixmaps/lm-studio-logo.png
     Terminal=false
     Type=Application
     Categories=Development;AI;LLM;
   #+end_src
** Google Calendar
   #+begin_src conf :tangle ~/.local/share/applications/gcalendar.desktop
     [Desktop Entry]
     Name=Google Calendar
     Comment=Google Calendar in Browser
     Exec=xdg-open https://calendar.google.com/calendar/u/0/
     Icon=/home/gregj/.local/share/pixmaps/google-calendar-icon.png
     Terminal=false
     Type=Application
     Categories=Office;Calendar;
   #+end_src
** Google Gmail - Personal
   #+begin_src conf :tangle ~/.local/share/applications/gmail-personal.desktop
     [Desktop Entry]
     Name=Gmail Personal Mail
     Comment=Google EMail in Browser
     Exec=xdg-open https://mail.google.com/mail/u/0/#search/in:inbox+is:unread
     Icon= /home/gregj/.local/share/pixmaps/gmail-logo.png
     Terminal=false
     Type=Application
     Categories=Office;Mail;
   #+end_src
** Kobo e-books and e-reader
   #+begin_src conf :tangle ~/.local/share/applications/kobo.desktop
     [Desktop Entry]
     Name=Kobo
     Comment=Books and e-readers
     Exec=xdg-open https://www.kobo.com/
     Icon=/home/gregj/.local/share/pixmaps/kobo-logo-1-512x512.png
     Terminal=false
     Type=Application
     Categories=Shopping;Retail;
   #+end_src
** Mastodon
   Go directly to my server
   #+begin_src bash  :tangle ~/.local/share/applications/mastodon.desktop
     [Desktop Entry]
     Name=Mastodon
     Comment=
     Exec=xdg-open https://discuss.systems/home
     Icon= /home/gregj/.local/share/pixmaps/mastodon-logo.png
     Terminal=false
     Type=Application
     Categories=Communication
   #+end_src
** Monitor change
   Run when external monitor is connected/disconnected
   #+begin_src conf :tangle ~/.local/share/applications/autorandr-monitor.desktop
     [Desktop Entry]
     Name=Autorandr Monitor Change
     Comment=run when monitor setup changes
     Exec=/bin/autorandr --detect
     Icon= /home/gregj/.local/share/pixmaps/laptop-monitor.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Neo4j Desktop
   #+begin_src conf :tangle ~/.local/share/applications/neo4j-desktop.desktop
     [Desktop Entry]
     Name=Neo4j Desktop
     Comment=
     Exec=/usr/local/bin/neo4j-desktop
     Icon= /home/gregj/.local/share/pixmaps/neo4j-desktop.png
     Terminal=false
     Type=Application
     Categories=Database;
   #+end_src
** Org Roam Protocol
   Org-roam provides extensions for capturing content from external applications such as
   the browser, via =org-protocol=.  Org-roam extends =org-protocol= with 2 protocols: the
   =roam-node= and =roam-ref= protocols.

   #+begin_src conf :tangle ~/.local/share/applications/org-protocol.desktop
     [Desktop Entry]
     Name=org-protocol
     Comment=Intercept calls from emacsclient to trigger custom actions
     Categories=Other;Editor;
     Keywords=org-protocol;
     Icon=~/emacs/pixmaps/org-roam.png
     Type=Application
     Exec=emacsclient -- %u
     Terminal=false
     StartWMClass=Emacs
     MimeType=x-scheme-handler/org-protocol;
   #+end_src

   Activate this by running
   #+begin_src bash
     xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
   #+end_src
** Polybar panel
   We can choose between simple and fancy
   #+begin_src conf :tangle ~/.local/share/applications/polybar-starter.desktop
     [Desktop Entry]
     Name=Polybar panel
     Comment=
     Exec=(killall polybar ; polybar --config=/home/gregj/.config/polybar/config-fancy floating -r -l info)
     Icon= /home/gregj/.local/share/pixmaps/ignition-sources-matches-icon.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Protege Desktop
   #+begin_src conf :tangle ~/.local/share/applications/protege.desktop
     [Desktop Entry]
     Name=Protege Ontology Knowledge Model tool
     Comment=
     Exec=/usr/local/Protege-5.5.0/run.sh
     Icon= /home/gregj/.local/share/pixmaps/CAPSoff.gif
     Terminal=false
     Type=Application
     Categories=Ontologies;Graph
   #+end_src

** Rancher Homelab
   #+begin_src conf :tangle ~/.local/share/applications/rancher-homelab.desktop
         [Desktop Entry]
         Name=Rancher Homelab
         Comment=Rancher
         Exec=xdg-open https://abstract-blackbird-q7vpfs.g57fzg0l.traefikhub.io/
         Icon=/home/gregj/.local/share/pixmaps/rancher-labs-icon.png
         Terminal=false
         Type=Application
         Categories=Kubernetes;Administration;Awesomeness
   #+end_src
** Rancher Public
   #+begin_src conf :tangle ~/.local/share/applications/rancher.desktop
     [Desktop Entry]
     Name=Rancher Public
     Comment=Rancher in TG AWS
     Exec=xdg-open https://rancher.hypecyclist.org/
     Icon=/home/gregj/.local/share/pixmaps/rancher-labs-icon.png
     Terminal=false
     Type=Application
     Categories=Kubernetes;Administration;Awesomeness
   #+end_src
** Lemmy
   #+begin_src conf :tangle ~/.local/share/applications/freddit.desktop
     [Desktop Entry]
     Name=Lemmy
     Comment=Bye Bye Reddit
     Exec=xdg-open https://lemmy.one
     Icon=/home/gregj/.local/share/pixmaps/fediverse-color.png-512x512.png
     Terminal=false
     Type=Application
     Categories=Stuff
   #+end_src
** Reset compositor
   #+begin_src conf :tangle ~/.local/share/applications/reset-compositor.desktop
     [Desktop Entry]
     Name=Reset Compositor and remove invert-colors
     Comment=
     Exec=/home/gregj/bin/reset-compositor.sh
     Icon=/home/gregj/.local/share/pixmaps/compton_compton.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Righty Tighty
   #+begin_src bash :tangle ~/bin/righty
     xmodmap -e "pointer = 1 2 3"
   #+end_src
   #+begin_src conf :tangle ~/.local/share/applications/righty.desktop
     [Desktop Entry]
     Name=Righty Tighty
     Comment=Set attached mouse or trackpad to right-handed use
     Exec=/home/gregj/bin/righty
     Icon= /home/gregj/.local/share/pixmaps/righthandcoords.gif
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Rocket Language
   This has to run in Chrome for reasons
   #+begin_src conf :tangle ~/.local/share/applications/rocket-language.desktop
     [Desktop Entry]
     Name=Rocket Language
     Comment=Spanish Portuguese German
     Exec=flatpak run com.google.Chrome https://app.rocketlanguages.com/
     Icon= /home/gregj/.local/share/pixmaps/rocket-languages-logo-transparent.png
     Terminal=false
     Type=Application
     Categories=Messaging
   #+end_src
** Rotate Wallpaper
   #+begin_src conf :tangle ~/.local/share/applications/rotate-wallpapers.desktop
     [Desktop Entry]
     Name=Rotate Wallpaper
     Comment=Yep
     Exec=/home/gregj/bin/rotate-wallpapers.sh
     Icon= /home/gregj/.local/share/pixmaps/rotate-wallpapers.jpg
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Signal
   #+begin_src conf :tangle no
 ~/.local/share/applications/signal.desktop
     [Desktop Entry]
     Name=Signal
     Comment=Signal
     Exec=flatpak run org.signal.Signal
     Icon= /home/gregj/.local/share/pixmaps/signal-desktop.png
     Terminal=false
     Type=Application
     Categories=Messaging
   #+end_src
** Slack
   #+begin_src conf :tangle no
 ~/.local/share/applications/slack.desktop
     [Desktop Entry]
     Name=Slack
     Comment=Slack
     Exec=flatpak run com.slack.Slack
     Icon=/home/gregj/.local/share/pixmaps/slack.jpeg
     Terminal=false
     Type=Application
     Categories=InstantMessaging;
   #+end_src
** Spotify
   #+begin_src conf :tangle no
 ~/.local/share/applications/spotify.desktop
     [Desktop Entry]
     Name=Spotify
     Comment=Spotify
     Exec=flatpak run com.spotify.Client
     Icon= /home/gregj/.local/share/pixmaps/spotify-client.png
     Terminal=false
     Type=Application
     Categories=Music;Media
   #+end_src
** Spotify in browser
   #+begin_src conf :tangle no
     # ~/.local/share/applications/fspotify.desktop
     [Desktop Entry]
     Name=Spotify
     Comment=Spotify web player in Browser
     Exec=xdg-open https://open.spotify.com
     Icon=/home/gregj/.local/share/pixmaps/spotify-client.png
     Terminal=false
     Type=Application
     Categories=Music;Media
   #+end_src
** Stable Diffusion
   #+begin_src conf :tangle ~/.local/share/applications/stable-diffuion.desktop
     [Desktop Entry]
     Name=Stable Diffusion
     Comment=Locally hosted Stable Diffusion on Aziriphale
     Exec=xdg-open http://aziriphale:7860/
     Icon= /home/gregj/emacs/pixmaps/stable-diffusion-icon-using-stable-diffusion-v0-i2bkql0z88ya1-512x512.png
     Terminal=false
     Type=Application
     Categories=Image;Art;Media
   #+end_src
** Stardog AWS Console
   #+begin_src conf :tangle ~/.local/share/applications/stardog-aws-console.desktop
     [Desktop Entry]
     Name=Amazon Web Services Console - Stardog
     Comment=
     Exec=xdg-open https://stardog-solutions.signin.aws.amazon.com/console
     Icon= /home/gregj/.local/share/pixmaps/aws.png
     Terminal=false
     Type=Application
     Categories=Cloud;Productivity
   #+end_src
** Stardog Cloud
   #+begin_src conf :tangle ~/.local/share/applications/stardog-cloud.desktop
     [Desktop Entry]
     Name=Stardog Cloud - Doghouse
     Comment=Doghouse
     Exec=xdg-open https://cloud.stardog.com
     Icon= /home/gregj/.local/share/pixmaps/stardog-doghouse-icon.png
     Terminal=false
     Type=Application
     Categories=Cloud;Productivity
   #+end_src
** Stardog Community
   #+begin_src conf :tangle ~/.local/share/applications/stardog-community.desktop
     [Desktop Entry]
     Name=Stardog Community
     Comment=
     Exec=xdg-open https://community.stardog.com/
     Icon= /home/gregj/.local/share/pixmaps/stardog-doghouse-icon.png
     Terminal=false
     Type=Application
     Categories=Community;sm
   #+end_src
** Stardog Local Launchpad
   #+begin_src conf :tangle ~/.local/share/applications/stardog-studio.desktop
     [Desktop Entry]
     Name=Stardog Launchpad
     Comment=
     Exec=xdg-open http://launchpad-homelab-172.16.17.241.dnsify.me:8080
     Icon= /home/gregj/.local/share/pixmaps/stardog-logo.png
     Terminal=false
     Type=Application
     Categories=Database;Graph;dh
   #+end_src
** Stardog Studio
   #+begin_src conf :tangle ~/.local/share/applications/stardog-studio.desktop
     [Desktop Entry]
     Name=Stardog Studio
     Comment=
     Exec=xdg-open http://localhost:8888/
     Icon= /home/gregj/.local/share/pixmaps/stardog-logo.png
     Terminal=false
     Type=Application
     Categories=Database;Graph;dh
   #+end_src
** Stardog Documentation
   #+begin_src conf :tangle ~/.local/share/applications/stardog.desktop
     [Desktop Entry]
     Name=Dog Docs
     Comment=
     Exec=xdg-open https://docs.stardog.com/
     Icon= /home/gregj/.local/share/pixmaps/stardog-logo.png
     Terminal=false
     Type=Application
     Categories=Docs
   #+end_src
** Steam games
   *Don't* create desktop shortcuts - Steam already add =.desktop= files for all currently
    installed games.

    Point =XDG_DATA_DIRS= to the directory above =/applications=
    For example, for a Flatpak user installation of Steam:
    #+begin_src bash
      export XDG_DATA_DIRS=$XDG_DATA_DIRS:/var/lib/exports/share:/home/gregj/.local/share/flatpak/exports/share:/home/gregj/.var/app/com.valvesoftware.Steam/.local/share
    #+end_src
** Suspend laptop
   #+begin_src conf :tangle ~/.local/share/applications/suspend-laptop.desktop
     [Desktop Entry]
     Name=Suspend / Sleep
     Comment=Sleepytime
     # Exec=/usr/bin/systemctl suspend
     Exec=systemctl suspend
     Icon= /home/gregj/.local/share/pixmaps/sleepy-stars.png
     Terminal=false
     Type=Application
     Categories=System
   #+end_src
** Switchy McSwitchface
   #+begin_src conf :tangle ~/.local/share/applications/switchy.desktop
     [Desktop Entry]
     Name=Switchy
     Comment=Netgear ProSafe Gigabit switch
     Exec=xdg-open http://switchy.magichome/
     Icon= /home/gregj/.local/share/pixmaps/netgear.jpeg
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src

** Tailscale
   #+begin_src conf :tangle ~/.local/share/applications/tailscale.desktop
     [Desktop Entry]
     Name=TailScale
     Comment=
     Exec=xdg-open https://tailscale.com/admin
     Icon= /home/gregj/.local/share/pixmaps/tailscale-icon-512x512.png
     Terminal=false
     Type=Application
     Categories=Networking;VPN
   #+end_src
** TigerGraph Test Drives
   #+begin_src conf :tangle ~/.local/share/applications/tigergraph-testdrives.desktop
     [Desktop Entry]
     Name=TigerGraph Test Drive Demo
     Comment=Test Drives for TigerGraph!
     Exec=xdg-open https://testdrive.tigergraph.com/
     Icon= /home/gregj/.local/share/pixmaps/tiger-freaky.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** TigerGraph GraphStudio
   #  ~/.local/share/applications/tigergraph-graphstudio.desktop
   #+begin_src conf :tangle no
     [Desktop Entry]
     Name=Tigergraph GraphStudio
     Comment=
     Exec=xdg-open http://172.16.17.230:14240
     Icon= /home/gregj/.local/share/pixmaps/tiger-dead-expression.jpg
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** Toggle Polybar Panel Show/Hide
   #+begin_src conf :tangle ~/.local/share/applications/toggle-polybar-panel-visibility.desktop
     [Desktop Entry]
     Name=Toggle Polybar Panel Show/Hide
     Comment=Polybar panel with system tray
     Exec=/home/gregj/bin/toggle-auto-hide-polybar.sh
     Icon= /home/gregj/.local/share/pixmaps/show-hide.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
   #+begin_src bash :tangle ~/bin/toggle-auto-hide-polybar.sh
     pid=$(ps fax | grep hideIt | grep -v grep|head -1 | awk '{print $1}')
     echo "Debug: pid is |${pid}|"
     if [ -n "${pid}" ] ; then
         # it's active, so kill it, thus "pinning" our panel
         echo "killing ${pid}"
         ps fax | grep hideIt | grep -v grep | awk '{print $1}' | xargs kill
     else
         # it's not running so, start 'er up and autohide the panel
         # We first have to grab monitor 0 resolution to properly set regiob
         hregion=$(xrandr --listactivemonitors | egrep '^ *0:'  |cut -d':' -f2|cut -d' ' -f3 | sed 's,\([0-9]\+\)\/[0-9]\+x\([0-9]\+\).\+,0x\2+\1+-10,')
         setsid ~/.config/polybar/hideIt.sh --wait --region ${hregion} --name '^polybar-floating' > /dev/null 2>&1 &

     fi
   #+end_src
** Toggle XFCE4 Panel Show/Hide
   #+begin_src conf :tangle no
         # ~/.local/share/applications/toggle-xfce-panel-visibility.desktop
         [Desktop Entry]
         Name=Toggle XFCE4 Panel Show/Hide
         Comment=Panel with widgets for use with EXWM
         Exec=/home/gregj/bin/toggle-xfce4-panel-hide.sh
         Icon= /home/gregj/.local/share/pixmaps/xfce4-panel-icon-png-icon.jpg
         Terminal=false
         Type=Application
         Categories=Office;Productivity;
   #+end_src

** Vterm
   Emacs vterm!
   #+begin_src conf :tangle ~/.local/share/applications/vterm.desktop
     [Desktop Entry]
     Name=Emacs Vterm
     Comment=Terminal
     Exec=/usr/local/bin/emacsclient -e '(vterm)'
     Icon= /home/gregj/.local/share/pixmaps/cool-terminal.jpeg
     Terminal=true
     Type=Application
     Categories=System;TerminalEmulator
   #+end_src
** XFCE4 Panel
   #+begin_src conf :tangle ~/.local/share/applications/exwm-xfce4-panel.desktop
     [Desktop Entry]
     Name=XFCE4 Panel
     Comment=Panel with widgets for use with EXWM
     # Exec=gnome-terminal -e "bash -c '/home/gregj/bin/xfce-panel-widgets.sh;/usr/bin/bash'"
     Exec=/home/gregj/bin/xfce-panel-widgets.sh
     Icon= /home/gregj/.local/share/pixmaps/xfce.png
     Terminal=false
     Type=Application
     Categories=Office;Productivity;
   #+end_src
** YouTube
   #+begin_src conf :tangle ~/.local/share/applications/youtube.desktop
     [Desktop Entry]
     Name=YouTube
     Comment=
     Exec=xdg-open https://youtube.com
     Icon= /home/gregj/.local/share/pixmaps/youtube-logo.png
     Terminal=false
     Type=Application
     Categories=Video;yt
   #+end_src

** Yummy Sauce - mealie
   #+begin_src conf :tangle ~/.local/share/applications/yummy-sauce.desktop
     [Desktop Entry]
     Name=Yummy Sauce Recipes
     Comment=
     Exec=xdg-open http://yummy-sauce.magichome:9925/
     Icon= /home/gregj/.local/share/pixmaps/mealie-favicon.png
     Terminal=false
     Type=Application
     Categories=Cooking;Recipes
   #+end_src

** Zen Browser
   Add to browsers in alternatives system, and preferred to handle webby mime types

   #+begin_src bash
     sudo update-alternatives --install /usr/bin/x-www-browser x-www-browser /usr/local/bin/zen 100
     xdg-mime default zen-browser.desktop text/html
     xdg-mime default zen-browser.desktop application/xhtml+xml
     xdg-mime default zen-browser.desktop x-scheme-handler/http
     xdg-mime default zen-browser.desktop x-scheme-handler/https
#+end_src


   #+begin_src conf :tangle ~/.local/share/applications/zen-browser.desktop
     [Desktop Entry]
     Name=Zen Web Browser
     GenericName=Zen
     Comment=Open source browser
     Exec=/usr/local/bin/zen %U
     Icon=/home/gregj/.local/share/pixmaps/zen-browser-icon-128x128.png
     Terminal=false
     Type=Application
     Categories=Network;Browser;WebBrowser
     # StartupNotify=True
     MimeType=text/html;text/xml;application/xhtml+xml;x-scheme-handler/http;
#+end_src
** Zoom
   Use this if you are not using the OS package manager installation - set =:tangle no= if
   you are

   Also - one important setting to maintain sanity in a tiling window manager like EXWM is
   #+begin_src conf :tangle no
     enableMiniWindow=false
   #+end_src

   Set that in =~/.config/zoomus.conf= or similar
   ~/.local/share/applications/zoom.desktop

   #+begin_src conf :tangle no
     [Desktop Entry]
     Encoding=UTF-8
     Name=Zoom
     GenericName=Zoom
     Comment=Zoom it up
     Exec=flatpak run us.zoom.Zoom
     Icon= /home/gregj/.local/share/pixmaps/google-cloud-logo.png
     Terminal=false
     Type=Application
     Categories=Application;Network;Productivity;
     StartupNotify=True
#+end_src
