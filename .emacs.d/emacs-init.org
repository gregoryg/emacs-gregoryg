# -*- org-src-preserve-indentation: t; -*-
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:2 todo:t |:t
#+TITLE: Gregory's Emacs Initialization in Org-Mode
#+DATE: <2019-09-08 Sun>
#+AUTHOR: Greg Grubbs
#+EMAIL: gregory@dynapse.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.2 (Org mode 9.1.9)
# #+SETUPFILE: ~/projects/org-html-themes/setup/theme-readtheorg-local.setup
#+SETUPFILE: https://raw.githubusercontent.com/fniessen/org-html-themes/master/setup/theme-readtheorg.setup
* Should I use =evil-mode=?

  No.

* Set executable path
#+begin_src emacs-lisp
  (when (file-exists-p "~/bin")
    (add-to-list 'exec-path "~/bin"))
  (when (file-exists-p "/usr/local/bin")
    (add-to-list 'exec-path "/usr/local/bin"))
#+end_src
* Deal with required packages

  This first section installs most required packages automatically when
  =gjg/check-packages-on-startup= is set

  Very useful when bringing up a virgin Emacs on a new system

  =use-package= is a macro, so it makes it challenging
  to do something like mapping over a list of package names - to do
  that you would have to [[https://emacs.stackexchange.com/questions/32744/dynamic-package-name-with-use-package][write your own macro]]

#+BEGIN_SRC emacs-lisp
(defvar gjg/check-packages-on-startup nil) ; should be nil in repo

(add-to-list 'load-path "~/emacs")
(require 'cl)
;; (require 'ls-lisp)
;; (setq ls-lisp-use-insert-directory-program nil)
(require 'package)

;; get control of required packages across different emacs environments
(defvar gjg/required-packages
  '(ag
    bash-completion
    bazel-mode
    company
    counsel
    diminish
    docker-tramp
    dumb-jump
    edit-indirect
    ;; edit-server
    flx
    go
    htmlize
    ;; ivy-omni-org
    ;; ivy-todo
    jupyter
    keychain-environment
    magit
    magit-todos
    material-theme
    org
    org-bullets
    org-plus-contrib
    org-tree-slide
    ob-async
    ob-http
    toc-org
    ;; pandoc-mode
    prettify-greek
    rainbow-delimiters
    ;; smart-mode-line
    smartparens
    use-package
    uuid
    xterm-color
    ;; language modes
    ;; csv-mode
    js2-mode
    json-mode
    markdown-mode
    ;; scala-mode
    ssh-config-mode
    smex
    sql-indent
    terraform-mode
    ;; web-mode
    yafolding
    yaml-mode
    ))

(defun gjg/packages-installed-p ()
  (loop for p in gjg/required-packages
	when (not (package-installed-p p)) do (return nil)
	finally (return t)))

;; if not all packages are installed, install 'em
(when gjg/check-packages-on-startup
  (unless (gjg/packages-installed-p)
    ;; check for new package versions
    (message "%s" "This copy of Emacs is now refreshing its package database...")
    (package-refresh-contents)
    (message "%s" "  done.")
    ;; install the missing packages
    (dolist (p gjg/required-packages)
      (when (not (package-installed-p p))
	(package-install p)))))

#+END_SRC
* Org mode stuff

** Org key mappings
Disable some that get in the way
#+begin_src emacs-lisp
(eval-after-load 'org
  (progn
	(define-key org-mode-map (kbd "C-c ;") nil)
	)
  )
#+end_src
** Org Babel and Source Code Blocks
  TODO: install ob-jupyter package on systems with Jupyter
  #+begin_src emacs-lisp
	;; (unless (version< org-version "9.2")
	;;   (require 'org-tempo) ; required for Easy Templates since Org 9.2
	;;   )
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 (append org-babel-load-languages
		 '(
		   (clojure . t)
		   (http . t) ;; curl 
		   (js . t)
		   (latex . t)
		   (python . t)
		   (shell  . t)
		   (sql . t)
		   (jupyter . t)
		   )))
	;; ;; The Dreadful Timeline has brought us indentation-sensitive languages
	;; ;; Python, YAML, Heredoc seem to require that Org not format source code blocks
	;; (setq org-src-preserve-indentation nil) 
	(setq org-src-window-setup 'current-window)
	(setq org-structure-template-alist '(("C" . "comment")
						 ("e" . "example")
						 ("E" . "export")
						 ("h" . "export html")
						 ("l" . "export latex")
						 ("q" . "quote")
						 ("S" . "src")
                         ("sj" . "src json")
						 ("sl" . "src emacs-lisp")
						 ("sp" . "src python")
						 ("ss" . "src bash")
						 ("sy" . "src yaml")))

  #+end_src
*** Crazy way to allow babel elisp to modify window configuration
This disables Org's use of =save-window-excursion= for execution of source blocks
Stolen from [[https://emacs.stackexchange.com/questions/42096/running-elisp-within-an-orgmode-code-block][Running elisp within an orgmode code block]] (github)

Simply add the new block param =:keep-windows= to use this functionality

#+begin_src emacs-lisp
(require 'ob-emacs-lisp)
(defun transform-tree (tree trafo)
  "Transform TREE by TRAFO."
  (let ((next tree))
    (while next
      (let ((this next))
	(setq next (cdr next))
	(if (consp (car this))
	    (transform-tree (car this) trafo)
	  (funcall trafo this)))))
  tree)

(defun replace-in-fundef (fun sym &rest replacement)
  "In function FUN perform REPLACEMENT."
  (setq fun (or
	     (condition-case err
		 (let* ((pos (find-function-noselect fun t))
			(buf (car pos))
			(pt (cdr pos)))
		   (with-current-buffer buf
		     (save-excursion
		       (goto-char pt)
		       (read buf))))
	       (error nil))
	     (and (symbolp fun) (symbol-function fun))
	     fun))
  (transform-tree fun
		  (lambda (this)
		    (when (eq (car this) sym)
		      (let ((copy-repl (cl-copy-list replacement)))
			(setcdr (last copy-repl) (cdr this))
			(setcdr this (cdr copy-repl))
			(setcar this (car copy-repl)))))))

(defmacro save-window-excursion-if (pred &rest body)
  "Act like `save-window-excursion' if PRED is non-nil."
  (declare (indent 1) (debug t))
  (let ((c (make-symbol "wconfig")))
    `(let ((,c (and ,pred (current-window-configuration))))
       (unwind-protect (progn ,@body)
         (when ,c (set-window-configuration ,c))))))

(advice-remove 'org-babel-execute:emacs-lisp #'ad-org-babel-execute:emacs-lisp)
;; make sure we have access to the source code of `org-babel-execute:emacs-lisp'
(find-function-noselect 'org-babel-execute:emacs-lisp t)
;; (defun ad-org-babel-execute:emacs-lisp ...):
(eval (replace-in-fundef 'org-babel-execute:emacs-lisp 'org-babel-execute:emacs-lisp 'ad-org-babel-execute:emacs-lisp))
;; Use `save-window-excursion-if' in `ad-org-babel-execute:emacs-lisp':
(declare-function 'ad-org-babel-execute:emacs-lisp " ")
(eval (replace-in-fundef 'ad-org-babel-execute:emacs-lisp
			 'save-window-excursion 'save-window-excursion-if '(null (member (cdr (assoc :keep-windows params)) '("yes" "t")))))
;; Replace `org-babel-execute:emacs-lisp':
(advice-add 'org-babel-execute:emacs-lisp :override #'ad-org-babel-execute:emacs-lisp)
#+end_src

** Org-mode hook
   On =auto-fill-mode=: I prefer to have it on, but hate when
   creating links and having it wrap while typing the description.
   For this reason, I want to get in the habit of only adding links
   using =C-c C-l= (=org-insert-link=)

   #+begin_src emacs-lisp
(add-hook 'org-mode-hook
	  (lambda ()
	    (auto-fill-mode 1)
        (org-bullets-mode 1)
	    (setq fill-column 90) ; good default for wide screens
	    (org-defkey org-mode-map [(control tab)] 'org-next-link)
	    ;; steal back my keys
	    (org-defkey org-mode-map [home] 'beginning-of-buffer)
	    (org-defkey org-mode-map [end] 'end-of-buffer)
	    ;; 	    ;; (local-set-key (kbd "C-c TAB") 'org-next-link)
	    ;; 	    ;; (local-set-key (kbd "S C-c TAB") 'org-previous-link)
	    ;; 	    (abbrev-mode 1)
	    ;; 	    ;; set sub/superscript interpretation OFFFFFFOOOFFF
	    ;; 	    (setq org-use-sub-superscripts nil)
	    (setq org-catch-invisible-edits 'show-and-error )
	    ))
   #+end_src
** Capture Templates

   #+begin_src emacs-lisp
;; *** Org capture
;; TODO: improve meeting template with
;;       + :NOBLOCKING: t
;;       + meeting|call

;; PLEASE SET USING CUSTOMIZATION (setq org-directory "~/Copy/projects/")


;; taken from StackOverflow answer https://stackoverflow.com/questions/11902620/org-mode-how-do-i-create-a-new-file-with-org-capture
;; (defun capture-blog-filename (path)
(defun capture-blog-filename ()
  (let ((thedate (org-read-date nil nil nil "Date of post: "))
	(name (read-string "Name of blog post file description: ")))
    (expand-file-name (format "%s-%s.md"
			      (format-time-string "%Y-%m-%d")
			      name) "~/projects/jekyll/gregorygrubbs/_posts/")))


(setq org-default-notes-file "~/projects/notes.org")
(eval-after-load "org-capture"
  '(add-hook 'org-capture-mode-hook 'turn-on-auto-fill))
(define-key global-map "\C-cc" 'org-capture)
(setq org-capture-templates
      '(
	("b" "Blog post" plain
	 (file capture-blog-filename)
	 "---
      layout: post
      title:  %^{title|Generic Post}
      date:   %<%F %T %z>
      categories: jekyll update
      ---

      # some thoughts"
	 )
	("r" "Regular todo" entry
	 (file+headline "~/todos.org" "General")
	 "* TODO %? \nSCHEDULED: %^T\n:LOGBOOK:\n:CREATED:%U\n:END:\n%i\n " :prepend nil :time-prompt t)
	
	("p" "D2iQ Phone/Meeting" entry
	 (file+headline "~/mesosphere.org.gpg" "Calls and Meetings Log")
	 "* %t %^{type|Call|Meeting} with %^{with|Unknown|Kirk Marty|Nick Kane|Jerry Connors}: %^{Subject|Sync-up|Follow-up|Team|Presentation|Introduction}
      :PROPERTIES:
      :NOBLOCKING: t
      :END:
      :LOGBOOK:
      :CREATED:%U
      :END:
      %i
	 + From D2iQ: GG, 
	 + From %\\2: 
	 + %?
       " :prepend t :clock-in t :clock-resume t)
	))


   #+end_src
** Exporting
*** General preferences
#+begin_src emacs-lisp
  (custom-set-variables '(org-export-with-sub-superscripts nil))
#+end_src
*** Atlassian Confluence
    #+begin_src emacs-lisp
;;(require 'ox-confluence)
    #+end_src
*** Exporting Babel without evaluation
#+begin_src emacs-lisp
(custom-set-variables '(org-export-use-babel nil))
#+end_src
*** Export without theme interference
	:LOGBOOK:
	- State "DONE"       from "TODO"       [2020-01-14 Tue 10:40]
	- State "DONE"       from "STARTED"    [2020-01-14 Tue 10:40]
	- State "STARTED"    from "TODO"       [2019-09-17 Tue 19:37]
	:END:
	Wrap advice around any means of exporting HTML, including export-and-open
#+begin_src emacs-lisp
;; export to html - use light theme for export
;; tip o' the hat to legoscia https://github.com/legoscia/dotemacs/blob/master/dotemacs.org#theme-for-org-html-export
(defvar my-org-html-export-theme 'material-light)

(defun my-with-theme (orig-fun &rest args)
  (load-theme my-org-html-export-theme)
  (unwind-protect
	  (apply orig-fun args)
	(disable-theme my-org-html-export-theme)))

(with-eval-after-load "ox-html"
  (advice-add 'org-export-to-buffer :around 'my-with-theme)
  (advice-add 'org-export-to-file :around 'my-with-theme)
  )

#+end_src
*** (Deprecated method) Exporting so theme does not interfere with source code blocks
    #+begin_src emacs-lisp :tangle no
;; ease export/sharing from org-mode
(defun gjg/org-export-to-odt ()
  "Export to odt without the theme interfering"
  (interactive)
  (let ((gort custom-enabled-themes))
    (mapc 'disable-theme custom-enabled-themes)
    (org-odt-export-to-odt)
    (mapc 'enable-theme gort)))

(defun gjg/org-export-to-html-and-open ()
  "Export to HTML with no theme active"
  (interactive)
  (let ((gort custom-enabled-themes))
    (mapc 'disable-theme custom-enabled-themes)
    (org-html-export-to-html)
    (browse-url (browse-url-file-url (concat (file-name-sans-extension (buffer-file-name)) ".html")))
    (mapc 'enable-theme gort)
    ))

(org-defkey org-mode-map (kbd "C-c o") 'gjg/org-export-to-html-and-open)
    #+end_src
** Speed commands
   #+begin_src emacs-lisp
(setq org-use-speed-commands t) ;; POWER USER BABY
;; (setq org-speed-commands-user 
;;       '(
;;         ("," . org-columns)
;;         ("q" . bury-buffer)))
;; DAN DAVISON nifty speed commands
(defun ded/org-show-next-heading-tidily ()
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (outline-show-children))
    (outline-next-heading)
    (unless (and (bolp) (org-at-heading-p))
      (org-up-heading-safe)
      (outline-hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (outline-show-children)))

(defun ded/org-show-previous-heading-tidily ()
  "Show previous entry, keeping other entries closed."
  (let ((pos (point)))
    (outline-previous-heading)
    (unless (and (< (point) pos) (bolp) (org-at-heading-p))
      (goto-char pos)
      (outline-hide-subtree)
      (error "Boundary reached"))
    (org-overview)
    (org-reveal t)
    (org-show-entry)
    (outline-show-children)))

(add-to-list 'org-speed-commands-user
	     '("]" ded/org-show-next-heading-tidily))
(add-to-list 'org-speed-commands-user 
	     '("[" ded/org-show-previous-heading-tidily))

;; END DAN DAVISON nifty speed commands

   #+end_src
** Agenda
   #+begin_src emacs-lisp
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key "\C-ca" 'org-agenda)
(setq org-agenda-files '("~/mesosphere.org.gpg"))
;;(global-set-key (kbd "C-c TAB") 'org-cycle-agenda-files)
;; Set basic org-mode keys
(setq org-agenda-show-inherited-tags t)
(setq org-agenda-hide-tags-regexp "noagenda")
(setq org-agenda-window-setup 'other-window)
(setq org-agenda-restore-windows-after-quit t)
(setq org-agenda-start-with-log-mode t)
(setq org-agenda-entry-text-maxlines 10)
(setq org-agenda-diary-file "~/projects/diary.org")
(setq org-agenda-include-diary t)

(setq org-agenda-exporter-settings
      '((ps-number-of-columns 1)
	(ps-landscape-mode t)
	(org-agenda-add-entry-text-maxlines 10)
	(htmlize-output-type 'css)))

;;(setq org-agenda-start-with-clockreport-mode t)
(setq org-special-ctrl-a/e t)
(setq org-agenda-clockreport-parameter-plist '(:link t :maxlevel 99))
(setq org-cycle-open-archived-trees nil)
(setq org-cycle-separator-lines 1) ;
(setq org-clock-history-length 12)

(setq org-agenda-show-inherited-tags t)
(setq org-agenda-custom-commands
      (quote (("P" "Projects" tags "Project|project|PROJECT" ((org-use-tag-inheritance nil)))
	      ("S" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil)))
	      ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil)))
	      ("dc" "Clock report" agenda ""
	       ((org-agenda-ndays 1)
		(org-agenda-start-with-clockreport-mode t)
		(org-agenda-time-grid nil)
		(org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled 'deadline 'scheduled))))
	      ("dw" "Weekly clock report" agenda ""
	       ((org-agenda-ndays 7)
		(org-agenda-start-with-clockreport-mode t)
		(org-agenda-time-grid nil)
		(org-agenda-skip-function '(org-agenda-skip-entry-if 'notscheduled 'deadline 'scheduled))))
	      ("da" "GORT Agenda"
	       ((agenda "")
		(todo "STARTED")))
	      )))

;; org-agenda: some handy keys
;;(define-key org-agenda-mode-map "o" 'org-agenda-show)

;; you might also want to set:
;;   (setq org-agenda-skip-unavailable-files t)
;; so these warnings won't annoy the little remember-frame
;; also: I have noted infrequent problems when using ElScreen
;;  (the wrong frame might be chosen for Remember in about 10% of the cases)

;; (defun popup-remember-frame ()
;;   "turn the current frame into a small popup frame for remember mode;
;; this is meant to be called with
;;      emacsclient -c -e '(popup-remember-frame)'"
;;   (modify-frame-parameters nil
;;                         '( (name . "*Remember*") ;; must be same as in mode-hook below
;;                            (width .  80)
;;                            (height . 16)
;;                            (vertical-scroll-bars . nil)
;;                            (menu-bar-lines . nil)
;;                            (tool-bar-lines . nil)))
;;   (org-remember nil ?w)
;;   (when (fboundp 'x-focus-frame) (x-focus-frame nil)) ;; X only
;;   (delete-other-windows))

;; when we're in such a remember-frame, close it when done.
;; (add-hook 'org-remember-mode-hook
;;        (lambda()
;;          (define-key org-remember-mode-map (kbd "C-c C-c")
;;            (lambda()(interactive)
;;               (let ((remember-frame-p
;;                      (string= (frame-parameter nil 'name) "*Remember*")))
;;                 (when remember-frame-p (make-frame-invisible))  ;; hide quickly

;;                 (org-remember-finalize)
;;                 (when remember-frame-p (delete-frame)))))))

(add-hook 'org-agenda-mode-hook
	  (lambda ()
	    (hl-line-mode 1)
	    ;; undo the horrendous "o" key binding (bound to 'delete-other-windows)
	    ;;       (local-unset-key "o")
	    ;; rebind to a sweet and beautiful function
	    (org-defkey org-agenda-mode-map "o" 'org-agenda-show)
	    (local-unset-key "a") ;; don't let this accidentally archive a tree!
	    ))
(add-hook 'org-export-preprocess-hook
	  (lambda ()
	    (org-dblock-update 2) ;; update all dynamic blocks in the buffer
	    ))
;; Function stolen from Bernt Hansen on gmane.emacs.orgmode: insert inactive time stamp for new entries

(setq org-agenda-format-date
      (concat "%Y-%m-%d %a "
	      (make-string (- (window-width) 15) (string-to-char "_"))))

   #+end_src
** Tags/TODOs/Projects Oh My
   #+begin_src emacs-lisp
(setq org-tag-alist '(("Project" . ?p)
		      ("NEXT" . ?n)
		      ("noexport" . ?x)
		      ("cloud" . ?c)
		      ("customer")
		      ("Hadoop" . ?h)
		      ("m&a" . ?m)
		      ))
;; Projects are identified by a :Project: tag unless they are marked DONE;
;;   Any project must have one sub-task identified by :NEXT: to be considered un-stuck
;;   MAYBE: exclude special tags like Someday/Maybe
(setq org-stuck-projects '("Project|project/-DONE"
			   nil
			   ("NEXT")
			   ""))
(setq org-columns-default-format "%TODO %CATEGORY %60ITEM(Task)%5Effort(Estim){:} %5CLOCKSUM(Clock) %SCHEDULED(Time) %DEADLINE")
(setq org-todo-keywords (quote ((sequence "TODO(t)" "STARTED(s!)" "|" "DONE(d!)")      ;; ordinary sequence is Todo -> Started -> Done
				(sequence "PROPOSED(p)" "WAITING(w@/!)" "MAYBE(m!)" "OPEN(O@)" "|" "CANCELLED(c@/!)" "SUBMITTED(S)") ;; "oddball" states that any task may be set to
				;; (sequence "QUOTE(q!)" "QUOTED(Q!)" "|" "APPROVED(A@)" "EXPIRED(E@)" "REJECTED(R@)")     ;; sequence for quotes
				)))
(setq org-todo-keyword-faces
      '(("TODO"
	 (:foreground "#ff39a3" :weight bold))
	("STARTED" . "#E35DBF")
	("CANCELLED" :foreground "green" :weight bold :strike-through t)
	("PROPOSED" . "pink")
	("WAITING" . "yellow")))

;; (setq org-todo-keyword-faces (quote (("TODO" :foreground "red" :weight bold)
;;                                      ("STARTED" :foreground "deep sky blue" :weight bold)
;;                                      ("DONE" :foreground "forest green" :weight bold)
;;                                      ("WAITING" :foreground "orange" :weight bold)
;;                                      ("SOMEDAY" :foreground "magenta" :weight bold)
;;                                      ("CANCELLED" :foreground "forest green" :weight bold)
;;                                      ("QUOTE" :foreground "red" :weight bold)
;;                                      ("QUOTED" :foreground "magenta" :weight bold)
;;                                      ("APPROVED" :foreground "forest green" :weight bold)
;;                                      ("EXPIRED" :foreground "forest green" :weight bold)
;;                                      ("REJECTED" :foreground "forest green" :weight bold)
;;                                      ("OPEN" :foreground "blue" :weight bold))))

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
	      ("WAITING" ("WAITING" . t) ("NEXT"))
	      ("SOMEDAY" ("WAITING" . t))
	      (done ("NEXT") ("WAITING"))
	      ("TODO" ("WAITING") ("CANCELLED"))
	      ("STARTED" ("WAITING") ("NEXT" . t)))))
;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")

(setq org-tags-exclude-from-inheritance '("Project" "project" "interview2"))    
					;(setq org-tag-alist '(("project" . ?p)("car" . ?c)))

(setq org-enforce-todo-dependencies t)
   #+end_src
** Refile
   #+begin_src emacs-lisp
;; navigate to files using org-refile; use C-u C-c C-w
(setq org-outline-path-complete-in-steps nil)
;; (setq org-refile-targets '(( org-agenda-files :maxlevel . 3))
;;       org-refile-use-outline-path 'file
;;       org-refile-target-verify-function
;;       (lambda ()
;;         (not (member "ARCHIVE" (org-get-tags)))))

(defadvice org-refile (around org-refile-pseudo-hook )
  "Turn ido flex matching off for org-refile"
  (let ((ido-enable-flex-matching nil))
    ad-do-it))
(ad-activate 'org-refile)

(defun gjg/org-refile-goto ()
  "Call org-refile with arg to visit an org-mode location. A convenience function to bind to a global key."
  (interactive)
  (org-refile 1))


   #+end_src
** TODO Mobile Org - delete or move to modern version
    
   #+begin_src emacs-lisp
;;*** Org-mobile
(setq org-mobile-directory "~/Dropbox/MobileOrg")
;;    (setq org-mobile-directory "/gregj@smeagol.hoochiepep.home:/home/gregj/work/org/web")
(setq org-mobile-inbox-for-pull "~/projectsfrom-mobile.org")
(setq org-agenda-before-write-hook nil)
(setq org-mobile-files '( "~/Copy/ingress/ingress.org" 'org-agenda-files))

   #+end_src
** Publishing
   This is for publishing to a website
   #+begin_src emacs-lisp
(setq org-publish-project-alist
      '(
	("director-23-testing" :components("director-23-testing-www" "director-23-testing-static"))
	("director-23-testing-www"
	 :base-directory "~/Google Drive/testing/director/2.3"
	 :base-extension "org"
	 :publishing-directory "/rsync:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/testing/director/2.3/"
	 :recursive t
	 :publishing-function org-html-publish-to-html
	 :headline-levels 4
	 :auto-preamble t
	 )
	("director-23-testing-static"
	 :base-directory "~/Google Drive/testing/director/2.3"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|dxt\\|dxj\\|sdk\\|txt\\|conf"
	 :publishing-directory "/rsync:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/testing/director/2.3/"
	 :recursive t
	 :publishing-function org-publish-attachment)
	("ted-talks"
	 :components
	 ("ted-talks-notes" "ted-talks-static"))
	("ted-talks-notes"
	 :base-directory "/c/Copy/projects/programming/ted"
	 :base-extension "org"
	 :publishing-directory "/rsync:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/ted"
	 :recursive t
	 :publishing-function org-html-publish-to-html
	 :headline-levels 4)  ;; default for this project
	("ted-talks-static"
	 :base-directory "/c/Copy/projects/programming/ted"
	 :base-extension "html"
	 :publishing-directory "/rsync:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/ted"
	 :recursive t
	 :publishing-function org-publish-attachment)
	("syncsort-pm2015-notes"
	 :base-directory "~/syncsort/db/pm/syncsort-pm2015"
	 :base-extension "org"
	 :publishing-directory "/cygssh:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/syncsort-pm2015"
	 :recursive t
	 :publishing-function org-html-publish-to-html
	 :headline-levels 4  ;; default for this project
	 :html-head "<style>.timestamp {color: #ff0033;} .notes-image img {width: 60%;} body {counter-reset: section;} h4 {counter-increment: section; color: auto;} h4:before { counter(section) " ";}</style><style>html {font-family: Georgia, "Times New Roman", Times, serif; font-size: large;}</style>"
	 )
	("syncsort-pm2015-static"
	 :base-directory "~/syncsort/db/pm/syncsort-pm2015/images"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|dxt\\|dxj\\|sdk\\|txt"
	 :publishing-directory "/cygssh:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/syncsort-pm2015/images"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )
	("syncsort-pm2015"
	 :components
	 ("syncsort-pm2015-notes" "syncsort-pm2015-static"))
	("hadoop-howtows-notes"
	 :base-directory "~/syncsort/db/docs/hadoop/howto"
	 :base-extension "org"
	 :publishing-directory "/plink:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/private/joins"
	 :recursive t
	 :publishing-function org-publish-org-to-html
	 :headline-levels 4  ;; default for this project
	 )
	("hadoop-howtos-static"
	 :base-directory "~/syncsort/db/docs/hadoop/howto"
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|dxt\\|dxj\\|sdk\\|txt"
	 :publishing-directory "/plink:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/private/joins"
	 :recursive t
	 :publishing-function org-publish-attachment
	 )
	("hadoop-howtos"
	 :components
	 ("hadoop-howtos-notes" "hadoop-howtos-static"))
	("syncsort-pm-blog-posts"
	 :base-directory "~/syncsort/db/pm"
	 :base-extension "org"
	 :publishing-directory "/plink:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/blog"
	 :recursive nil
	 :with-toc nil
	 :section-numbers nil
	 :with-todo-keywords nil
	 :publishing-function org-html-publish-to-html
	 )
	("blog-static"
	 :base-directory "~/syncsort/db/pm"
	 :recursive t
	 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|dxt\\|dxj\\|sdk\\|txt"
	 :publishing-directory "/plink:gortsleigh@hoochiepep.com:/home/gortsleigh/dynapse.net/blog"
	 :publishing-function org-publish-attachment
	 )
	("syncsort-blog"
	 :components ("syncsort-pm-blog-posts" "blog-static"))
	))


   #+end_src
** Clock
#+begin_src emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-report-include-clocking-task t)
(setq org-read-date-prefer-future 'time)

#+end_src
** Behavior
#+begin_src emacs-lisp
;; make c-y pay attention to current level
(setq org-yank-adjusted-subtrees t)
(setq org-yank-folded-subtrees nil)
(setq org-insert-heading-respect-content t); new headings go AFTER CONTENT, even from the middle of content area
(setq org-indirect-buffer-display 'current-window)
(setq org-reverse-note-order t) ; notes go at the top
(setq org-return-follows-link t)
(setq org-treat-S-cursor-todo-selection-as-state-change nil) ;; use S-arrow without having to log state change!
(setq org-log-into-drawer t)

;; delete the seleted region when something is typed - don't do that
(delete-selection-mode -1)

;; show only current/today's/all time in the clock task modeline
;; this SHOULD be settable on a file basis by using property CLOCK_MODELINE_TOTAL
(setq org-clock-modeline-total 'current)
#+end_src
** Org Drill flashcards
#+begin_src emacs-lisp
(defun gjg/org-drill-set-cloze1 ()
  "Set current question as 'cloze1' type"
  (interactive)
  (insert ":PROPERTIES:\n:DRILL_CARD_TYPE: hide1cloze\n:END:\n")
  )

#+end_src

* Greg's customizations!

** Let emacs use more memory in these modern times
 #+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000) ; ref https://github.com/lewang/flx#gc-optimization
 #+END_SRC
** Microsoft Windows things
*** Printing
   #+begin_src emacs-lisp
;; **** Windows printing that relies on ghostscript and gsview

(defcustom gjg/gsprint "c:/Program Files/Ghostgum/gsview/gsprint.exe"
  "Path to gsprint.exe: usually in Program Files or Program Files (x86)"
  :group 'gjg
  :type 'string)

(when (and (string= (window-system) "w32") (file-exists-p gjg/gsprint))
  (progn
    ;;  Windows printer
    (setq-default ps-lpr-command (expand-file-name gjg/gsprint))
    (setq-default ps-printer-name t)
    (setq-default ps-printer-name-option nil)
    (setq ps-lpr-switches '("-query")) ; show printer dialog
    (setq ps-right-header '("/pagenumberstring load" ps-time-stamp-mon-dd-yyyy))))

   #+end_src
*** Info on Windows
    #+begin_src emacs-lisp
(when  (eq window-system 'w32)
  (progn
    (setq Info-directory-list Info-default-directory-list)
    (setq Info-additional-directory-list '("c:/emacs/share/info"))))
    #+end_src

*** File opens
    #+begin_src emacs-lisp
(when (eq window-system 'w32)
  (setq w32-get-true-file-attributes nil)
  (remove-hook 'find-file-hook 'vc-find-file-hook))
    #+end_src
** Fonts
   Forever in search of the One True Holy and Apostolic Programmer Font.

   Big fan of Inconsolata, Source Code Pro, and Hack.  Inability to decide on one is
   encoded herein.

   #+begin_src emacs-lisp
	 (cond ((or (eq window-system 'mac) (eq window-system 'ns))
			(set-frame-font "Source Code Pro-17"))
		   ((eq window-system 'w32)
			(set-face-font 'default '"-outline-Source Code Pro-normal-normal-normal-mono-17-*-*-*-c-*-iso8859-1"))
		   ((eq window-system 'x)
			(set-frame-font "Hack-14")
			;; (set-frame-font "Inconsolata-16")
			))
	 (load-library "fontize")
	 (require 'fontize)
	 (global-set-key [C-kp-subtract] 'dec-font-size)
	 (global-set-key [C-kp-add] 'inc-font-size)
   #+end_src
** Desktop save
   #+begin_src emacs-lisp
(desktop-save-mode 1)
(setq desktop-restore-eager 5)
   #+end_src
** Basic defaults that aren't default
   So many defaults in Emacs make no sense.  If starting out with Emacs, consider these
   settings to make your first experiences nicer.
   
   If you have any questions about what these settings do, use Emacs to explore them:
   + If it's a variable being set (line starts with the =setq= function, set the point in
     the variable name and hit =C-h v= for help on that variable.
   + If it's a function (line starts with almost anything other than =setq=, set the point
     in the function name and hit "C-h f"

#+begin_src emacs-lisp
;; When I want transient mark mode, I'll beat it out of you
(setq transient-mark-mode nil)
;; display time and battery status in the mode line
(display-time-mode 0)
(display-battery-mode 0)
;; turn off that stupid toolbar
(tool-bar-mode -1)
;; scroll bars?
(scroll-bar-mode -1)

;; don't do that stoopid splash screen
(setq inhibit-splash-screen t)

(setq-default indent-tabs-mode nil)
(setq-default tab-always-indent t)
(setq-default tab-width 4)
;; blink parens and similar delimiters
(show-paren-mode 1)
;; ** Global identity (ie, same on all machines) - Emacs does not make good guesses here
(setq user-full-name "Gregory Grubbs"
      user-mail-address "gregory@dynapse.com")

(setq confirm-kill-emacs 'y-or-n-p) ;; confirm to exit emacs

;; dippy bird FTW - single character y-n for all yes/no question dialogs
(fset 'yes-or-no-p 'y-or-n-p)
(setq shell-file-name "bash")
(setq explicit-shell-file-name shell-file-name)
(setq explicit-bash-args '("--noediting" "-i"))

(global-hl-line-mode t) ;; highlight current line - turn off when figuring out faces

(temp-buffer-resize-mode 1)  ;; crazy cool auto resizing of temp windows - nice for UX

(setq fill-column 90); good default for wider screens - BUT this is buffer-local so should be set in mode hooks only

;; ensure that the default for searches is case-insensitive
(setq case-fold-search t)

;; highlight/colorize everything that can be colorized!
(global-font-lock-mode 1)

;; never split windows horizontally by default
(setq split-width-threshold nil)
;; Here's a choice one: stay in the same column while scrolling!
(setq scroll-preserve-screen-position t)
;; in Emacs23+, make line-move move by a line, ignoring wrapping
(setq line-move-visual nil)
;; enable hugely useful things that are disabled by default
(put 'narrow-to-region 'disabled nil)
(put 'set-goal-column 'disabled nil)

;; echo quickly
(setq echo-keystrokes 0.1)
;; keep the screen from jumping wildly as I cursor down/up
(setq scroll-conservatively 5)
;; remember minibuffer history between sessions
(savehist-mode t)
;; if point is at end of line, keep it there for vertical movement
(setq track-eol t)
(setq align-to-tab-stop nil) ;; do not use tabs for align and align-regexp
#+end_src
** Custom Functions in a separate file
   TODO: pull these functions in
   #+begin_src emacs-lisp
(add-to-list 'load-path "~/emacs")
(load-library "gjg-functions")
(require 'gjg-functions)
   #+end_src
** Key bindings
   #+begin_src emacs-lisp
(global-set-key [home] (lambda () (interactive) (goto-char (point-min))))
(global-set-key [end] (quote end-of-buffer))
;; M-left and M-right on Pixelbook
(global-unset-key (kbd "<M-left>"))
(global-unset-key (kbd "<M-right>"))
(global-set-key (kbd "<M-left>") (lambda () (interactive) (goto-char (point-min))))
(global-set-key (kbd "<M-right>") 'end-of-buffer)
(global-unset-key (kbd "C-z"))
(global-set-key (kbd "C-z") 'undo)
(global-unset-key (kbd "M-]")) ; unset one next-buffer binding
(global-unset-key (kbd "M-[")) ; unset one previous-buffer binding

(global-set-key [f1] 'delete-other-windows)
(global-set-key [f2] 'gjg/switch-to-other-buffer)
(global-set-key [f3] 'gjg/other-window-or-split)
(global-set-key [f4] 'narrow-to-defun)

(global-set-key [f5] 'gjg/widen-ask-if-indirect)
(global-set-key [f6] 'read-only-mode)
(global-set-key [f7] 'hl-line-mode) ;; toggle hl-line-mode for this window only
;; (global-set-key [f8] 'bury-buffer)

;; (global-set-key [f9] 'bury-buffer)
(global-set-key [f10] 'dired-omit-mode)
;; (global-set-key [f11] 'mac-toggle-max-window)
(global-set-key [f11] 'gjg/toggle-max-frame)
(global-set-key [M-f11] 'gjg/toggle-max-frame)
;; (global-set-key [f11] 'toggle-fullscreen)
;; (global-set-key [f11] 'switch-full-screen)
;; (global-set-key (kbd "C-<f11>") 'gjg/emacs-max-coolness)
(global-set-key [f12] (lambda () (interactive) (message (or (buffer-file-name) "No file associated with this buffer."))))
(global-set-key (kbd "<C-f12>") 'yow)
(global-set-key [C-wheel-up] 'text-scale-increase)
(global-set-key [C-wheel-down] 'text-scale-decrease)
(global-set-key [S-wheel-up] 'inc-font-size)
(global-set-key [S-wheel-down] 'dec-font-size)
(global-set-key (kbd "M-]") 'next-buffer)
(global-set-key (kbd "M-[") 'previous-buffer)
(global-set-key (kbd "C-c C-v") 'browse-url-at-point)
;; EXPERIMENTAL: unbind SPACE and ? in minibuffer, to allow typing in completions with those chars
(add-hook 'minibuffer-setup-hook (lambda () 
				   (define-key minibuffer-local-completion-map " " nil)
				   (define-key minibuffer-local-must-match-map " " nil)
				   (define-key minibuffer-local-completion-map "?" nil)
				   (define-key minibuffer-local-must-match-map "?" nil)))
(defalias 'ss 'gjg/open-remote-shell)
(defalias 'ht 'gjg/highlight-terraform-stuff)
(defalias 'rb 'rename-buffer)

   #+end_src
** Backup files
   #+begin_src emacs-lisp
;; backup files
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/.emacs.d/backups"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 5
 kept-old-versions 5
 version-control nil)   
   #+end_src
** Window/buffer management
*** Modeline and Title
   Fancy icons may require fonts (like =texlive-fonts-extra=)

    #+begin_src emacs-lisp
;; show column number in modeline - in addition to line number
(column-number-mode t)

(setq frame-title-format (concat "emacs@" (system-name) " - %f; %b"))
;; fancy git icon
(defadvice vc-mode-line (after strip-backend () activate)
  (when (stringp vc-mode)
    (let ((gitlogo (replace-regexp-in-string "^ Git." "  " vc-mode)))
      (setq vc-mode gitlogo))))

    #+end_src
*** Winner-mode and Windmove
   #+begin_src emacs-lisp
;; winner
(winner-mode 1)
;; windmove
(require 'windmove)
(eval-after-load "windmove"
  '(progn
     (windmove-default-keybindings)
     ;; Make windmove work in org-mode:
     (setq org-replace-disputed-keys t)))
;; (add-hook 'org-shiftup-final-hook 'windmove-up)
;; (add-hook 'org-shiftleft-final-hook 'windmove-left)
;; (add-hook 'org-shiftdown-final-hook 'windmove-down)
;; (add-hook 'org-shiftright-final-hook 'windmove-right)))


   #+end_src
*** GJG full screen, movement, transparency
    #+begin_src emacs-lisp
(defun revert-dammit () ; revert buffer without prompting
  (interactive)
  ;; revert buffer, don't use auto-save, preserve modes
  (revert-buffer t t t))
(defalias 'rd 'revert-dammit)
(defun gjg/switch-to-other-buffer ()
  (interactive)
  (switch-to-buffer (other-buffer))
  (message "Switched to other-buffer"))
(defun gjg/other-window-or-split ()
  "If one window is displayed in current frame, split vertically and go to other window, else go to other window without splitting"
  (interactive)
  (if (one-window-p t)
      (progn
	(split-window-vertically)
	(other-window 1)
	(switch-to-buffer (other-buffer)))
    (other-window 1)))
(defun gjg/widen-ask-if-indirect ()
  "If buffer is indirect, ask before widening"
  (interactive)
  (if (buffer-base-buffer)
      (when (yes-or-no-p "Buffer is indirect; really widen? ")
	(widen))
    (widen)))
(defun toggle-transparency (alpha-level)
  (interactive "p")
  (message (format "%s" alpha-level))
  (if (< alpha-level 50) (setq alpha-level 75))
  (let ((myalpha (frame-parameter nil 'alpha)))
    (if (or (not myalpha)
	    (= myalpha 100))
	(set-frame-parameter nil 'alpha alpha-level)
      (set-frame-parameter nil 'alpha 100))
    )
  (message (format "Alpha level is %d" (frame-parameter nil 'alpha)))
  )

(defun set-transparency (alpha-level)
  (interactive "p")
  (message (format "Alpha level passed in: %s" alpha-level))
  (let ((alpha-level (if (< alpha-level 2)
			 (read-number "Opacity percentage: " 75)
		       alpha-level))
	(myalpha (frame-parameter nil 'alpha)))
    (set-frame-parameter nil 'alpha alpha-level))
  (message (format "Alpha level is %d" (frame-parameter nil 'alpha))))
(defalias 'set-opacity 'set-transparency )

(defun toggle-window-split ()
  (interactive)
  (if (= (count-windows) 2)
      (let* ((this-win-buffer (window-buffer))
	     (next-win-buffer (window-buffer (next-window)))
	     (this-win-edges (window-edges (selected-window)))
	     (next-win-edges (window-edges (next-window)))
	     (this-win-2nd (not (and (<= (car this-win-edges)
					 (car next-win-edges))
				     (<= (cadr this-win-edges)
					 (cadr next-win-edges)))))
	     (splitter
	      (if (= (car this-win-edges)
		     (car (window-edges (next-window))))
		  'split-window-horizontally
		'split-window-vertically)))
	(delete-other-windows)
	(let ((first-win (selected-window)))
	  (funcall splitter)
	  (if this-win-2nd (other-window 1))
	  (set-window-buffer (selected-window) this-win-buffer)
	  (set-window-buffer (next-window) next-win-buffer)
	  (select-window first-win)
	  (if this-win-2nd (other-window 1))))))

(define-key ctl-x-4-map "t" 'toggle-window-split)
;; *** Full-screen frame defuns

(defun switch-full-screen ()
  (interactive)
  (shell-command (concat "/usr/bin/wmctrl -i -r " (frame-parameter nil 'outer-window-id) " -btoggle,fullscreen")))

;; (defun toggle-fullscreen ()
;;   "toggles whether the currently selected frame consumes the entire display or is decorated with a window border"
;;   (interactive)
;;   (let ((f (selected-frame)))
;;     (modify-frame-parameters f `((fullscreen . ,(if (eq nil (frame-parameter f 'fullscreen)) 'fullboth nil))))))

;; (defun mac-toggle-max-window ()
;;   "Toggle full-screen frame on Linux and OS X - use maxframe.el for Windows"
;;   (interactive)
;;   (if (frame-parameter nil 'fullscreen)
;;       (set-frame-parameter nil 'fullscreen nil)
;;     (set-frame-parameter nil 'fullscreen 'fullboth)))
;; (defun toggle-full-screen ()
;;   "Toggle between full screen and partial screen display on X11;
;;     courtesy of http://www.emacswiki.org/cgi-bin/wiki/FullScreen"
;;   (interactive)
;;   (x-send-client-message nil 0 nil "_NET_WM_STATE" 32
;;                          '(2 "_NET_WM_STATE_FULLSCREEN" 0)))


;; ;; add toggle for maxframe.el (works on Windows)
(when (eq window-system 'w32)
  (require 'maxframe)
  (modify-frame-parameters nil '((gjg/frame-maxp . nil))))
;; (modify-frame-parameters nil '((gjg/frame-maxp . nil)))
;; ;; (defvar gjg/frame-maxp nil "Store whether frame is maximized using maxframe.el")
(defun gjg/switch-buffer-by-mode ()
  "Switch to a buffer after choosing a mode."
  (interactive)
  (let* ((active-buffers-with-mode (mapcar #'(lambda (x) (with-current-buffer x (cons (buffer-name) (symbol-name major-mode)))) (buffer-list)))
	 (distinct-modes (-distinct (mapcar #'cdr active-buffers-with-mode)))
	 (selected-mode (ido-completing-read "Mode: " distinct-modes))
	 (candidate-buffers (mapcar #'car (remove-if-not '(lambda (x) (string-equal selected-mode (cdr x))) active-buffers-with-mode)))
	 (selected-buffer (ido-completing-read "Buffer: " candidate-buffers)))
    (switch-to-buffer selected-buffer)))
(global-set-key (kbd "C-c s") 'gjg/switch-buffer-by-mode)

(defun gjg/max-frame ()
  "Maximize the current frame and toggle gjg/frame-maxp"
  (interactive)
  (cond ((eq window-system 'w32)
	 (maximize-frame))
	((eq window-system 'x)
	 (switch-full-screen))
	(t
	 (mac-toggle-max-window)))
  (modify-frame-parameters nil '((gjg/frame-maxp . t))))

(defun gjg/restore-frame ()
  "Restore the current frame to its previous size and toggle gjg/frame-maxp"
  (interactive)
  (cond ((eq window-system 'w32)
	 (restore-frame))
	((eq window-system 'x)
	 (switch-full-screen))
	(t
	 (mac-toggle-max-window)))
  (modify-frame-parameters nil '((gjg/frame-maxp . nil))))

(defun gjg/toggle-max-frame ()
  "Check the status of gjg/max-framep and change to whichever mode we're not in now."
  (interactive)
  (cond ((eq window-system 'ns)
	 (toggle-frame-maximized))
	(t
	 (if (eq (frame-parameter nil 'gjg/frame-maxp) nil) (gjg/max-frame) (gjg/restore-frame)))))

    #+end_src
*** Ibuffer FTW
    Saved filter groups provide a nice organization.

    #+begin_src emacs-lisp
	  (global-set-key (kbd "C-x C-b") (lambda () (interactive) (ibuffer)))
	  (setq ibuffer-expert t)
	  (setq ibuffer-saved-filter-groups
			'(("home"
			   ("Org and Markdown" (or (mode . org-mode)
									   (mode . markdown-mode)))
			   ("Shell" (mode . shell-mode))
			   ("Configs" (or (filename . ".emacs.d")
							  (mode . emacs-lisp-mode)
							  (derived-mode .  conf-mode)
							  (mode . json-mode)))
			   ("YAML Shmaml" (mode . yaml-mode))
			   ("Code" (derived-mode .  prog-mode))
			   ("Magit" (or (mode . magit-diff-mode)
							(mode . magit-status-mode)
							(mode . magit-process-mode)
							(mode . magit-revision-mode)
							(mode . magit-refs-mode)))
			   ("Dired" (mode . dired-mode))
			   ("Tramp sessions" (name . "\*tramp.+"))
			   ("Remote" (filename . "/\*:.+"))
			   )))
	  (add-hook 'ibuffer-mode-hook
				'(lambda ()
				   (ibuffer-auto-mode 1)
				   (ibuffer-switch-to-saved-filter-groups "home")))
    #+end_src
*** Uniquify
    #+begin_src emacs-lisp
(autoload 'uniquify "uniquify" "unique buffer names dependent on file name")
(eval-after-load "uniquify"
  '(progn
     (setq uniquify-buffer-name-style 'reverse)
     (setq uniquify-separator "/")
     (setq uniquify-after-kill-buffer-p t)
     (setq uniquify-ignore-buffers-re "^\\*")))
    #+end_src
*** Theme
    #+begin_src emacs-lisp
(load-theme 'material t)
    #+end_src
** Automatic typing - abbrevs and expansions
   #+begin_src emacs-lisp
;; Dynamic abbrevs should expand both words and symbols
(setq dabbrev-abbrev-char-regexp "\\sw\\|\\s_")
;; and now set up hippie-expand
(global-set-key (kbd "M-/") 'hippie-expand)

   #+end_src
** Games and silliness
   #+begin_src emacs-lisp
;; very important: keep a long list of yow lines
;;   in emacs 24.4 yow.el is obsolete; use cookie instead
(when (featurep 'yow)
  (unload-feature 'yow))
(require 'cookie1)
(eval-after-load "cookie1"
  '(progn
     (setq yow-file "~/emacs/yow.lines")
     (defun yow ()
       (interactive)
       (let ((suggest-key-bindings nil))
	 (message (cookie yow-file nil nil))))))
;; almost as important: keep track of those tetris scores
(setq tetris-score-file "~/.emacs.d/tetris.score")


   #+end_src
** Weird random rarely used maybe interesting things
*** MOOs and MUDs - NOT legacy - added 2019!
   #+begin_src emacs-lisp
;; Moos and MUDs - NOT legacy stuff - added 2019!
(add-to-list 'load-path "~/projects/rmoo")
(require 'rmoo-autoload)
(require 'moocode-mode)
;; (global-set-key (kbd "C-c C-r") 'rmoo)
(add-to-list 'auto-mode-alist '("\\.moo$" . moocode-mode))
(add-hook 'rmoo-interactive-mode-hooks
          (lambda ()
            (linum-mode -1)                  ;; ... no line numbers
            (goto-address-mode t)))          ;; ... clickable links


   #+end_src
* Encryption
  Set value of =epg-gpg-program= to location on local system
  #+begin_src emacs-lisp
;; let's get encryption established
;; For gpg, disable external pinentry - let emacs handle pass phrase
;; (setenv "GPG_AGENT_INFO" nil)
(require 'epa-file)
;; (custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
(epa-file-enable)
(setq epg-pinentry-mode 'loopback)
(require 'org-crypt)
(org-crypt-use-before-save-magic)

  #+end_src
* Commonly used modes
** Start emacs server
   #+begin_src emacs-lisp
(server-start)
   #+end_src
** Company
 #+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)

  ;; (global-company-mode t)
  )

;; (use-package company-lsp
;;   :ensure t
;;   :config
;;  (push 'company-lsp company-backends)
;; )
 #+END_SRC
** TRAMP
   #+begin_src emacs-lisp
(require 'tramp)
   #+end_src
*** Do not restore TRAMP buffers in next emacs session
   #+begin_src emacs-lisp
(defun tv-list-tramp-buffer-file-name ()
  "Return a list of buffers that I do not want automatically restored by desktop.el in the next emacs session: TRAMP dirs and files, Info buffer, and Dired buffers"
  (let* ((desktop-info-list (mapcar #'desktop-buffer-info (buffer-list)))
	 (tramp-buf-list (loop for i in desktop-info-list
			       if (and (listp i)
				       (stringp (car (nth 8 i)))
				       (or
					(string= "dired-mode" (nth 3 i))
					(string= "Info-mode" (nth 3 i))
					(string-match "^/su:.*\\|^/sudo:.*\\|^/ssh:.*\\|^/scp[^:]*:.*\\|^/smb:.*\\|^/docker:.*" (car (nth 8 i)))))
			       collect (nth 2 i))))
    tramp-buf-list))

;; (add-hook 'desktop-save-hook #'(lambda ()
;;                                  (let ((del-buf-list
;;                                         (tv-list-tramp-buffer-file-name)))
;;                                    (dolist (i del-buf-list)
;;                                      (if (get-buffer i) (kill-buffer i))))))
;;(setq desktop-buffers-not-to-save
;;      (concat "\\` "
;;	      (tv-list-tramp-buffer-file-name)))
(add-to-list 'desktop-modes-not-to-save 'dired-mode)
(add-to-list 'desktop-modes-not-to-save 'Info-mode)
(add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
   #+end_src
*** Add SSH Agent
    #+begin_src emacs-lisp
(defun add-ssh-agent-to-tramp ()
  (cl-pushnew '("-A")
	      (cadr (assoc 'tramp-login-args
			   (assoc "ssh" tramp-methods)))
	      :test #'equal))
(add-ssh-agent-to-tramp)


    #+end_src
*** Add methods for Docker, DC/OS, Google Cloud Shell
    #+begin_src emacs-lisp
;; Add method to connect to Mesosphere DC/OS tasks
;; we need to execute a command like the following
;;  dcos task exec --tty --interactive <taskname> -- bash
;; example TRAMP URI:   //dcos:jupyter:
(require 'tramp)
(add-to-list 'tramp-methods
	     '("dcos"
	       (tramp-login-program "dcos")
	       (tramp-login-args
		(nil
		 ("task" "exec" "-it")
		 ("%h")
		 ("bash")))
	       (tramp-remote-shell "/bin/sh")
	       (tramp-remote-shell-args ("-i" "-c"))))

;; Add method to connect to Kubernetes pods
;; we need to execute a command like the following
;;  kubectl exec -it --namespace jhub jupyter-gregj -- /bin/bash
;; example TRAMP URI:   //kexec:jhub@jupyter:
(add-to-list 'tramp-methods
	     '("kube"
	       (tramp-login-program "kubectl")
	       (tramp-login-args
		(nil
		 ("exec" "-it")
		 ("--namespace" "%u")
		 ("%h")
		 ("--" "bash")))
	       (tramp-remote-shell "/bin/sh")
	       (tramp-remote-shell-args ("-i" "-c"))))

;; TRAMP gcloud ssh
;; Google Cloud Shell
(add-to-list 'tramp-methods
	     '("gshell"
	       (tramp-login-program        "gcloud alpha cloud-shell ssh")
	       (tramp-default-host "cloud-shell")
	       (tramp-login-args (("#%h")))
	       ;; (tramp-login-args           (("%h")))
	       ;; (tramp-async-args           (("-q")))
	       (tramp-remote-shell         "/bin/bash")
	       (tramp-remote-shell-args    ("-c"))
	       ;; (tramp-gw-args              (("-o" "GlobalKnownHostsFile=/dev/null")
	       ;;                              ("-o" "UserKnownHostsFile=/dev/null")
	       ;;                              ("-o" "StrictHostKeyChecking=no")))
	       (tramp-default-port         22)))
(add-to-list 'tramp-methods
             '("gcssh"
               (tramp-login-program        "gcloud compute ssh")
               (tramp-login-args           (("%h")))
               (tramp-async-args           (("-q")))
               (tramp-remote-shell         "/bin/bash")
               (tramp-remote-shell-args    ("-c"))
               (tramp-gw-args              (("-o" "GlobalKnownHostsFile=/dev/null")
                                            ("-o" "UserKnownHostsFile=/dev/null")
                                            ("-o" "StrictHostKeyChecking=no")))
               (tramp-default-port         22)))


    #+end_src
*** Handle SUDO - root and other users
    #+begin_src emacs-lisp
;; TRAMP SUDO FUN - snarfed from Peter Dyballa on gmane.emacs.help
(defun my-tramp-header-line-function ()
  (when (string-match "^/.*su\\(do\\)?:" default-directory)
    (setq header-line-format
	  (format-mode-line "----- THIS BUFFER IS VISITED WITH SUDO PRIVILEGES -----"
			    'font-lock-warning-face))))

(add-hook 'find-file-hook 'my-tramp-header-line-function)
(add-hook 'dired-mode-hook 'my-tramp-header-line-function)
    #+end_src
** Rainbow delimiters for various programming modes
   #+begin_src emacs-lisp
(require 'rainbow-delimiters)
;; rainbow delimiters ; make much stronger (more saturated) colors
(autoload 'rainbow-delimiters "rainbow-delimiters" "Highlight brackets according to their depth")
(eval-after-load "rainbow-delimiters"
  '(progn
     (require 'cl-lib)
     (require 'color)
     (cl-loop
      for index from 1 to rainbow-delimiters-max-face-count
      do
      (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
	(cl-callf color-saturate-name (face-foreground face) 30)))))

   #+end_src
** Dired
   =dired-dwim-target= is just awesome.  Whenever you have 2 Dired
   windows in a frame, hitting Copy or Rename from one Dired buffer
   automatically suggests the other as the target

   =dired-omit-files= is a regexp for files you want to hide using
   =dired-omit-mode= Depending on your workflow, that may include
   compiled files (.elc, .o etc) as well as normally hidden files.

   =auto-revert-mode= refreshes the visible buffer when something in
   the directory changes.

   #+begin_src emacs-lisp
(require 'dired)
(define-key dired-mode-map [mouse-1] 'dired-find-file)
(define-key dired-mode-map [mouse-2] 'dired-find-file)
(require 'dired-x)
(setq dired-dwim-target t)
(setq dired-omit-files "^\\.?#\\|^\\..*")
;; (declare (special dired-x-hands-off-my-keys
;; 		  dired-bind-vm
;; 		  dired-omit-files-p))
;; (add-hook 'dired-load-hook
;; 	  (function
;; 	   (lambda ()
;; 	     (declare (special dired-x-hands-off-my-keys
;; 			       dired-bind-vm))
;; 	     (load-library "dired-x")
;; 	     (setq dired-x-hands-off-my-keys nil
;; 		   dired-bind-vm t))))

(require 'autorevert)
(setq auto-revert-verbose nil)
(add-hook 'dired-mode-hook
	  (function (lambda ()
		      (auto-revert-mode))))
;; 		      ;; Set dired-x buffer-local variables here.  For example:
;; 		      (setq dired-omit-mode t)
;; 		      (setq dired-omit-files "^\\..*")
;; 		      )))

   #+end_src
*** Open file in relevant OS app
#+begin_src emacs-lisp
;; swiped from Gilaras Drakeson <gilaras@gmail.com>
(require 'dired)
(defcustom gjg/os-open "xdg-open"
  "Command to open a document, e.g. 'xdg-open' on Linux, 'sensible-browser' on crostini, 'open' on OS X, 'explorer' or 'cygpath' on Windows"
  :type 'string
  :group 'gjg)


(defun dired-open (&optional file-list)
  (interactive
   (list (dired-get-marked-files t current-prefix-arg)))
  (progn
    (message (format "Calling %s %s" gjg/os-open file-list))
    (apply 'call-process gjg/os-open nil 0 nil file-list)))
(define-key dired-mode-map (kbd "C-;") 'dired-open)
#+end_src
** Ediff
   #+begin_src emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
   #+end_src
** Help mode
   #+begin_src emacs-lisp
(setq help-window-select t)
(add-hook 'help-mode-hook
	  (lambda ()
	    (local-set-key (kbd "M-p") 'help-go-back)
	    (local-set-key (kbd "M-n") 'help-go-forward)
	    ))
   #+end_src
** Ivy / Smex / Counsel
   Just starting to make use of =use-package= here.  The =:ensure= param will
   automagically install the package if it is not already installed. 

*** Set up Ivy basics
    This setup includes reliance on other packages such as Swiper for incremental search,
    and Counsel for symbol completion and selection.

	Smex helps sort commands by most-used 

    #+begin_src emacs-lisp
(use-package counsel
  :ensure nil
  :config
  (use-package swiper
    :ensure nil)
  (use-package flx
    :ensure nil)
  (use-package smex
    :ensure nil)
  (ivy-mode 1)
  ;; (setq ivy-use-virtual-buffers t)
  ;; intentional space before end of string
  (setq ivy-count-format "(%d/%d) ")
  ;; (setq ivy-re-builders-alist
  ;;       '((t . ivy--regex-fuzzy)))
  ;; (setq ivy-re-builders-alist
  ;; 	    '((swiper . ivy--regex-plus)
  ;; 		  (counsel-find-file . ivy--regex-plus)
  ;; 		  (ivy-switch-buffer . ivy--regex-plus)
  ;; 		  (t . ivy--regex-fuzzy))))
  (setq ivy-re-builders-alist '((t . ivy--regex-plus))))
   #+end_src

**** Make some keybindings for these crazy packages
     Use =M-j= during a Swiper search to add the sub-word at point to
     the search - similar to =C-s C-w= in built-in isearch.

     #+begin_src emacs-lisp
;; (global-set-key (kbd "C-s") 'swiper)
;; (global-set-key (kbd "C-M-s") 'swiper-isearch)
;; (global-set-key (kbd "C-M-r") 'swiper-isearch-backward)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
     #+end_src
** Grep
   #+begin_src emacs-lisp
(defun advice-without-ivy (o &rest a)
  (ivy-mode -1)
  (prog1 (apply o a)
    (ivy-mode 1)))

(advice-add 'grep-read-files :around #'advice-without-ivy)
   #+end_src
** Occur
*** Navigation
   #+begin_src emacs-lisp
;;     Some simple sex-ups for occur-mode

(define-key occur-mode-map "n" 'occur-next)
(define-key occur-mode-map "p" 'occur-prev)
(defadvice occur-next (after gjg/occur-navigation-other-window)
  "Show match in other window as you navigate, as in rgrep"
  (occur-mode-display-occurrence))
(ad-activate 'occur-next)
(defadvice occur-prev (after gjg/occur-navigation-other-window)
  "Show match in other window as you navigate, as in rgrep"
  (occur-mode-display-occurrence))
(ad-activate 'occur-prev)
   #+end_src
*** Occur in buffers that use this current mode
	Stolen from Sacha Chua in [[https://masteringemacs.org/article/searching-buffers-occur-mode][Mastering Emacs]]
#+begin_src emacs-lisp
(eval-when-compile
  (require 'cl))

(defun get-buffers-matching-mode (mode)
  "Returns a list of buffers where their major-mode is equal to MODE"
  (let ((buffer-mode-matches '()))
    (dolist (buf (buffer-list))
      (with-current-buffer buf
	(if (eq mode major-mode)
	    (add-to-list 'buffer-mode-matches buf))))
    buffer-mode-matches))

(defun multi-occur-in-this-mode ()
  "Show all lines matching REGEXP in buffers with this major mode."
  (interactive)
  (multi-occur
   (get-buffers-matching-mode major-mode)
   (car (occur-read-primary-args))))

;; global key for `multi-occur-in-this-mode' - you should change this.
(global-set-key (kbd "C-<f2>") 'multi-occur-in-this-mode)
#+end_src
** Shell mode
*** Bash completions
#+begin_src emacs-lisp
  (require 'bash-completion)
  (bash-completion-setup)
#+end_src
*** Placement of new shell windows
I want new shell buffers to open in the currently selected window, not replacing the text
I'm referencing in a different window.  This is absurdly difficult to do because
=shell-mode= does not offer a setting to control this behavior.  The solution I found was
given in an answer [[https://stackoverflow.com/a/40351851/457574][here on stackoverflow]] 

#+begin_src emacs-lisp
(defun shell-same-window-advice (orig-fn &optional buffer)
  "Advice to make `shell' reuse the current window.

Intended as :around advice."
  (let* ((buffer-regexp
          (regexp-quote
           (cond ((bufferp buffer)  (buffer-name buffer))
                 ((stringp buffer)  buffer)
                 (:else             "*shell*"))))
         (display-buffer-alist
          (cons `(,buffer-regexp display-buffer-same-window)
                display-buffer-alist)))
    (funcall orig-fn buffer)))

(advice-add 'shell :around #'shell-same-window-advice)
#+end_src
*** ANSI color
The =xterm-color-filter= function is part of the =xterm-color= package.  It does the
lawd's work in translating ANSI color codes to font properties so that things can look
awesome.

   #+begin_src emacs-lisp
(ansi-color-for-comint-mode-on)
;; try some xterm coloring in shell buffers
(setq comint-output-filter-functions
      (remove 'ansi-color-process-output comint-output-filter-functions))

(add-hook 'shell-mode-hook
	  (lambda ()
	    ;; Disable font-locking in this buffer to improve performance
	    ;; TODO: Does disabling font-lock mess up highlight-regexp?
	    ;; (font-lock-mode -1)
	    ;; Prevent font-locking from being re-enabled in this buffer
	    ;; (make-local-variable 'font-lock-function)
	    ;; (setq font-lock-function (lambda (_) nil))
	    (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)
	    ;; (unless (file-remote-p default-directory)
	    ;;   (company-mode 1))
	    ;; (process-send-string (get-buffer-process (current-buffer)) "export TERM=xterm-256color\n")
	    ))

;; Also set TERM accordingly (xterm-256color) in the shell itself.

;; (add-hook 'shell-mode-hook
;; 	  (lambda ()
;; 	    (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)
;; 	    (shell-command "export PS1='\\[\\e[32m\\]\\u@\\h \\[\\e[33m\\]\\w\\[\\e[0m\\]\\n\\$ '")
;; 	    ))
   #+end_src
*** SSH Agent in subprocesses
    + Not really related to shell-mode, this assures our keychain is activated for things
      such as magit that fire off subproceess
      #+begin_src emacs-lisp
(keychain-refresh-environment)
      #+end_src

** Smartparens
   #+begin_src emacs-lisp
(autoload 'smartparens-config "smartparens-config" "Default configuration for smartparens package")
(defun my-create-newline-and-enter-sexp (&rest _ignored)
  "Open a new brace or bracket expression, with relevant newlines and indent. "
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(require 'smartparens)
;; (eval-after-load "smartparens-config"
;;   '(progn 
;; (sp-local-pair 'javascript-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
(sp-local-pair 'js2-mode        "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
(sp-local-pair 'js2-mode        "[" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
(sp-local-pair 'javascript-mode "{" nil :post-handlers '((my-create-newline-and-enter-sexp "RET")))
;; ))

   #+end_src
** Spelling
   #+begin_src emacs-lisp
;; redefine the obsolete spell-word
(defalias 'spell-word  'ispell-word)

(defalias 'spell-buffer 'ispell-buffer)
   #+end_src
** Man pages
Open man page in current window, rather than other window with 
#+begin_src emacs-lisp
(custom-set-variables '(Man-notify-method 'pushy))
#+end_src

* Programming language modes

** All modes derived from =prog-mode=
   #+begin_src emacs-lisp
(add-hook 'prog-mode-hook
	  (lambda ()
		(rainbow-delimiters-mode 0)
		(rainbow-delimiters-mode 1)
		(company-mode 1)
        (yafolding-mode 1)
		(smartparens-mode 1)))
   #+end_src
** Clojure
   #+begin_src emacs-lisp
(require 'ob-clojure) ;; org-babel code evaluation
;; (add-hook 'cider-repl-mode-hook #'company-
(add-hook 'cider-mode-hook #'company-mode) 
;; (use-package lsp-mode
;;   :ensure nil
;;   :commands lsp
;;   :config
;;   (add-to-list 'lsp-language-id-configuration '(clojure-mode . "clojure-mode"))
;;   :init
;;   (setq lsp-enable-indentation nil)
;;   (add-hook 'clojure-mode-hook #'lsp)
;;   (add-hook 'clojurec-mode-hook #'lsp)
;;   (add-hook 'clojurescript-mode-hook #'lsp))

;; ;; (add-to-list 'load-path "~/emacs/cider")
;; (autoload 'cider "cider" "Cider for Clojure")
;; (require 'cider)
;; (eval-after-load "cider"
;;   '(progn
;;      ;; (require 'cider)
;;      ;; (defadvice cider--lein-present-p (around gjg-find-the-damn-script activate)
;;      ;;   "Lein shell script is not detected on Windows as executable"
;;      ;;   (if (eq window-system 'w32)
;;      ;;       (setq ad-return-value (or (file-remote-p default-directory)
;;      ;;    			     (locate-file "lein" exec-path nil 'exists)))
;;      ;;     (ad-do-it)))
;;      (add-hook 'cider-repl-mode-hook 'company-mode)
;;      (add-hook 'cider-mode-hook 'company-mode)))

   #+end_src
** Go
   Initial configuration was nabbed from a 2-parter by @tleydn
   [[http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/][Configure Emacs as a Go Editor From Scratch]]

   #+begin_src emacs-lisp
(use-package go
  :ensure nil
  :config)
(setenv "GOPATH" "/home/gregorygrubbs/go")
(defun my-go-mode-hook ()
  ; Use goimports instead of go-fmt
  (setq gofmt-command "goimports")
  ;; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ;; jump into code with M-. and jump back with M-*
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
  ;; Customize compile command to run go build
  ;; NOTE: may want to start with =go generate= for some projects
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
           "go build -v && go test -v && go vet"))
  ;; ; Go oracle/guru
  ;; (load-file "$GOPATH/src/golang.org/x/tools/cmd/oracle/oracle.el")
  ;; (load-file "$GOPATH/sr")
  (auto-complete-mode 1)
  )
(add-hook 'go-mode-hook 'my-go-mode-hook)
(with-eval-after-load 'go-mode
  (require 'go-autocomplete))
   #+end_src

** Rust
** Javascript
*** Prefer =js2= mode
   #+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
   #+end_src
*** Treat =.cue= as JSON or Bazel
	#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.cue$" . bazel-mode))

	#+end_src
** Python
*** Python mode setup
   #+begin_src emacs-lisp
;; Python
;; TODO: is the ANSI code problem still existant as of Emacs 26.3?
;; deal with the horrific ANSI codes in latest ipython

(use-package python
  :ensure nil
  :config
  (use-package prettify-greek
    :ensure nil)
  (setq python-shell-interpreter "ipython3" 
	python-shell-interpreter-args "-i --simple-prompt")
  (setq org-babel-python-command "python3")
  (add-hook 'python-mode-hook
	    (lambda ()
	      (setq indent-tabs-mode nil)
	      (setq python-indent-offset 4)
	      (setq tab-width 4)
	      (setq prettify-symbols-alist prettify-greek-lower)
	      (prettify-symbols-mode t)))
  )

(custom-set-variables '(org-babel-python-command "python3"))

(setq ansi-color-drop-regexp
      "\033\\[\\([ABCDsuK]\\|[12][JK]\\|=[0-9]+[hI]\\|[0-9;]*[Hf]\\|\\?[0-9]+[hl]\\|[0-9]+[CD]\\|J\\|6n\\)")

;; (require 'elpy)

;; (require 'prettify-greek)

   #+end_src
*** Treat Bazel/Starlark files as Python
	#+begin_src emacs-lisp
	  (add-to-list 'auto-mode-alist '("\\.starlark$" . python-mode))
	#+end_src
** Jupyter
#+begin_src emacs-lisp
(use-package jupyter
  :ensure nil)

#+end_src
** R
   #+begin_src emacs-lisp
;; (setq ess-sas-edit-keys-toggle nil)     ;;; turn on automatic indentation
;; (require 'ess-site)
;; (when (require 'polymode nil t)
;;   (progn
;;     ;;; R modes
;;     (add-to-list 'auto-mode-alist '("\\.Snw" . poly-noweb+r-mode))
;;     (add-to-list 'auto-mode-alist '("\\.Rnw" . poly-noweb+r-mode))
;;     (add-to-list 'auto-mode-alist '("\\.Rmd" . poly-markdown+r-mode))))

   #+end_src
** SQL
   #+begin_src emacs-lisp
(require 'sql)
;; (add-hook 'sql-mode-hook (lambda
(sql-set-product-feature 'mysql :prompt-regexp "^\\(MariaDB\\|[Mm][Yy][Ss][Qq][Ll]\\) *\\[?[_a-zA-Z0-9()]*\\]?> ")
(setq sql-mysql-options '("-C" "-t" "-f" "-n"))
;; ))
   #+end_src
* Devops
** Working with containers
   This is largely a function of TRAMP.  I have added simple ways to
   get Dired and =shell-mode= in 
   + Docker containers using =docker-tramp= package
   + DC/OS tasks with the =dcos= TRAMP method
   + Kubernetes pods with the =kube= TRAMP method.  This will grab a
     shell on the first container defined in the pod
   + Google Cloud Shell with =gshell= TRAMP method

** Highlight Terraform and Ansible messages
   This function highlights the typical lines for: 
   + Terraform (Creation/Destruction complete)
   + Ansible (RUNNING/STAGE/TASK/PLAY)
   + Docker build (Step n/n)

  #+begin_src emacs-lisp
(defun gjg/highlight-terraform-stuff ()
  (interactive)
  ; Terraform patterns
  (highlight-regexp "Creation complete" 'hi-green)
  (highlight-regexp "Destruction complete" 'hi-pink)
  ; Docker build
  (highlight-regexp "Step [0-9]+/[0-9]+ : [A-Z]+" 'hi-aquamarine)
  ; Ansible
  (highlight-regexp "\\(RUNNING\\|STAGE\\|TASK\\|PLAY\\) .+" 'hi-black-b))
  #+end_src

* Final steps
#+begin_src emacs-lisp
(shell (get-buffer-create "sh1"))
#+end_src
